{
  while (this.active.get()) {
    QueueEntry queueEntry=null;
    try {
synchronized (this.lock) {
        queueEntry=this.queue.peek();
      }
      if ((queueEntry != null) && (Time.currentTimeMillis() >= queueEntry.endTimeMs)) {
synchronized (this.lock) {
          this.queue.poll();
        }
        queueEntry.afn.run(null);
      }
 else       if (queueEntry != null) {
        Time.sleep(Math.min(1000,(queueEntry.endTimeMs - Time.currentTimeMillis())));
      }
 else {
        Time.sleep(1000);
      }
    }
 catch (    Throwable t) {
      if (!(Utils.exceptionCauseIsInstanceOf(InterruptedException.class,t))) {
        this.onKill.run(t);
        this.setActive(false);
        throw new RuntimeException(t);
      }
    }
  }
  this.cancelNotifier.release();
}
