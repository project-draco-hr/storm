{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list92=iprot.readListBegin();
          struct.supervisors=new ArrayList<SupervisorSummary>(_list92.size);
          SupervisorSummary _elem93;
          for (int _i94=0; _i94 < _list92.size; ++_i94) {
            _elem93=new SupervisorSummary();
            _elem93.read(iprot);
            struct.supervisors.add(_elem93);
          }
          iprot.readListEnd();
        }
        struct.set_supervisors_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.nimbus_uptime_secs=iprot.readI32();
    struct.set_nimbus_uptime_secs_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list95=iprot.readListBegin();
  struct.topologies=new ArrayList<TopologySummary>(_list95.size);
  TopologySummary _elem96;
  for (int _i97=0; _i97 < _list95.size; ++_i97) {
    _elem96=new TopologySummary();
    _elem96.read(iprot);
    struct.topologies.add(_elem96);
  }
  iprot.readListEnd();
}
struct.set_topologies_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list98=iprot.readListBegin();
struct.nimbuses=new ArrayList<NimbusSummary>(_list98.size);
NimbusSummary _elem99;
for (int _i100=0; _i100 < _list98.size; ++_i100) {
_elem99=new NimbusSummary();
_elem99.read(iprot);
struct.nimbuses.add(_elem99);
}
iprot.readListEnd();
}
struct.set_nimbuses_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
