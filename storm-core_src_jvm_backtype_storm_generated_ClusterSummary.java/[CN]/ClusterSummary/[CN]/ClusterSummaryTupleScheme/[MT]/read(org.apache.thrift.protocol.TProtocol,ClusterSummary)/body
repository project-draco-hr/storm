{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TList _list99=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.supervisors=new ArrayList<SupervisorSummary>(_list99.size);
    SupervisorSummary _elem100;
    for (int _i101=0; _i101 < _list99.size; ++_i101) {
      _elem100=new SupervisorSummary();
      _elem100.read(iprot);
      struct.supervisors.add(_elem100);
    }
  }
  struct.set_supervisors_isSet(true);
{
    org.apache.thrift.protocol.TList _list102=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.topologies=new ArrayList<TopologySummary>(_list102.size);
    TopologySummary _elem103;
    for (int _i104=0; _i104 < _list102.size; ++_i104) {
      _elem103=new TopologySummary();
      _elem103.read(iprot);
      struct.topologies.add(_elem103);
    }
  }
  struct.set_topologies_isSet(true);
{
    org.apache.thrift.protocol.TList _list105=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.nimbuses=new ArrayList<NimbusSummary>(_list105.size);
    NimbusSummary _elem106;
    for (int _i107=0; _i107 < _list105.size; ++_i107) {
      _elem106=new NimbusSummary();
      _elem106.read(iprot);
      struct.nimbuses.add(_elem106);
    }
  }
  struct.set_nimbuses_isSet(true);
}
