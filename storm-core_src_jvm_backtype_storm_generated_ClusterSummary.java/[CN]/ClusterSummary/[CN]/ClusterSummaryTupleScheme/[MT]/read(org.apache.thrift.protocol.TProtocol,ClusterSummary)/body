{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TList _list107=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.supervisors=new ArrayList<SupervisorSummary>(_list107.size);
    SupervisorSummary _elem108;
    for (int _i109=0; _i109 < _list107.size; ++_i109) {
      _elem108=new SupervisorSummary();
      _elem108.read(iprot);
      struct.supervisors.add(_elem108);
    }
  }
  struct.set_supervisors_isSet(true);
{
    org.apache.thrift.protocol.TList _list110=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.topologies=new ArrayList<TopologySummary>(_list110.size);
    TopologySummary _elem111;
    for (int _i112=0; _i112 < _list110.size; ++_i112) {
      _elem111=new TopologySummary();
      _elem111.read(iprot);
      struct.topologies.add(_elem111);
    }
  }
  struct.set_topologies_isSet(true);
{
    org.apache.thrift.protocol.TList _list113=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.nimbuses=new ArrayList<NimbusSummary>(_list113.size);
    NimbusSummary _elem114;
    for (int _i115=0; _i115 < _list113.size; ++_i115) {
      _elem114=new NimbusSummary();
      _elem114.read(iprot);
      struct.nimbuses.add(_elem114);
    }
  }
  struct.set_nimbuses_isSet(true);
  BitSet incoming=iprot.readBitSet(1);
  if (incoming.get(0)) {
    struct.nimbus_uptime_secs=iprot.readI32();
    struct.set_nimbus_uptime_secs_isSet(true);
  }
}
