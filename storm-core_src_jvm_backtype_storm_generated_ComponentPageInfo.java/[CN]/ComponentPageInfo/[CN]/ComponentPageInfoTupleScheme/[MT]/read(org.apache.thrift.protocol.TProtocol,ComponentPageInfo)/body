{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.component_id=iprot.readString();
  struct.set_component_id_isSet(true);
  struct.component_type=backtype.storm.generated.ComponentType.findByValue(iprot.readI32());
  struct.set_component_type_isSet(true);
  BitSet incoming=iprot.readBitSet(13);
  if (incoming.get(0)) {
    struct.topology_id=iprot.readString();
    struct.set_topology_id_isSet(true);
  }
  if (incoming.get(1)) {
    struct.topology_name=iprot.readString();
    struct.set_topology_name_isSet(true);
  }
  if (incoming.get(2)) {
    struct.num_executors=iprot.readI32();
    struct.set_num_executors_isSet(true);
  }
  if (incoming.get(3)) {
    struct.num_tasks=iprot.readI32();
    struct.set_num_tasks_isSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map442=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.window_to_stats=new HashMap<String,ComponentAggregateStats>(2 * _map442.size);
      String _key443;
      ComponentAggregateStats _val444;
      for (int _i445=0; _i445 < _map442.size; ++_i445) {
        _key443=iprot.readString();
        _val444=new ComponentAggregateStats();
        _val444.read(iprot);
        struct.window_to_stats.put(_key443,_val444);
      }
    }
    struct.set_window_to_stats_isSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TMap _map446=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.gsid_to_input_stats=new HashMap<GlobalStreamId,ComponentAggregateStats>(2 * _map446.size);
      GlobalStreamId _key447;
      ComponentAggregateStats _val448;
      for (int _i449=0; _i449 < _map446.size; ++_i449) {
        _key447=new GlobalStreamId();
        _key447.read(iprot);
        _val448=new ComponentAggregateStats();
        _val448.read(iprot);
        struct.gsid_to_input_stats.put(_key447,_val448);
      }
    }
    struct.set_gsid_to_input_stats_isSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map450=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.sid_to_output_stats=new HashMap<String,ComponentAggregateStats>(2 * _map450.size);
      String _key451;
      ComponentAggregateStats _val452;
      for (int _i453=0; _i453 < _map450.size; ++_i453) {
        _key451=iprot.readString();
        _val452=new ComponentAggregateStats();
        _val452.read(iprot);
        struct.sid_to_output_stats.put(_key451,_val452);
      }
    }
    struct.set_sid_to_output_stats_isSet(true);
  }
  if (incoming.get(7)) {
{
      org.apache.thrift.protocol.TList _list454=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.exec_stats=new ArrayList<ExecutorAggregateStats>(_list454.size);
      ExecutorAggregateStats _elem455;
      for (int _i456=0; _i456 < _list454.size; ++_i456) {
        _elem455=new ExecutorAggregateStats();
        _elem455.read(iprot);
        struct.exec_stats.add(_elem455);
      }
    }
    struct.set_exec_stats_isSet(true);
  }
  if (incoming.get(8)) {
{
      org.apache.thrift.protocol.TList _list457=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.errors=new ArrayList<ErrorInfo>(_list457.size);
      ErrorInfo _elem458;
      for (int _i459=0; _i459 < _list457.size; ++_i459) {
        _elem458=new ErrorInfo();
        _elem458.read(iprot);
        struct.errors.add(_elem458);
      }
    }
    struct.set_errors_isSet(true);
  }
  if (incoming.get(9)) {
    struct.eventlog_host=iprot.readString();
    struct.set_eventlog_host_isSet(true);
  }
  if (incoming.get(10)) {
    struct.eventlog_port=iprot.readI32();
    struct.set_eventlog_port_isSet(true);
  }
  if (incoming.get(11)) {
    struct.debug_options=new DebugOptions();
    struct.debug_options.read(iprot);
    struct.set_debug_options_isSet(true);
  }
  if (incoming.get(12)) {
    struct.topology_status=iprot.readString();
    struct.set_topology_status_isSet(true);
  }
}
