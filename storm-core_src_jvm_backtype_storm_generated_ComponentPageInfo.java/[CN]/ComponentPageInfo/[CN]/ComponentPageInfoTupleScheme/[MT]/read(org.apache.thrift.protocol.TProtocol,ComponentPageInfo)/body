{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.component_id=iprot.readString();
  struct.set_component_id_isSet(true);
  struct.component_type=backtype.storm.generated.ComponentType.findByValue(iprot.readI32());
  struct.set_component_type_isSet(true);
  BitSet incoming=iprot.readBitSet(9);
  if (incoming.get(0)) {
    struct.topology_id=iprot.readString();
    struct.set_topology_id_isSet(true);
  }
  if (incoming.get(1)) {
    struct.topology_name=iprot.readString();
    struct.set_topology_name_isSet(true);
  }
  if (incoming.get(2)) {
    struct.num_executors=iprot.readI32();
    struct.set_num_executors_isSet(true);
  }
  if (incoming.get(3)) {
    struct.num_tasks=iprot.readI32();
    struct.set_num_tasks_isSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map414=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.window_to_stats=new HashMap<String,ComponentAggregateStats>(2 * _map414.size);
      String _key415;
      ComponentAggregateStats _val416;
      for (int _i417=0; _i417 < _map414.size; ++_i417) {
        _key415=iprot.readString();
        _val416=new ComponentAggregateStats();
        _val416.read(iprot);
        struct.window_to_stats.put(_key415,_val416);
      }
    }
    struct.set_window_to_stats_isSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TMap _map418=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.gsid_to_input_stats=new HashMap<GlobalStreamId,ComponentAggregateStats>(2 * _map418.size);
      GlobalStreamId _key419;
      ComponentAggregateStats _val420;
      for (int _i421=0; _i421 < _map418.size; ++_i421) {
        _key419=new GlobalStreamId();
        _key419.read(iprot);
        _val420=new ComponentAggregateStats();
        _val420.read(iprot);
        struct.gsid_to_input_stats.put(_key419,_val420);
      }
    }
    struct.set_gsid_to_input_stats_isSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map422=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.sid_to_output_stats=new HashMap<String,ComponentAggregateStats>(2 * _map422.size);
      String _key423;
      ComponentAggregateStats _val424;
      for (int _i425=0; _i425 < _map422.size; ++_i425) {
        _key423=iprot.readString();
        _val424=new ComponentAggregateStats();
        _val424.read(iprot);
        struct.sid_to_output_stats.put(_key423,_val424);
      }
    }
    struct.set_sid_to_output_stats_isSet(true);
  }
  if (incoming.get(7)) {
{
      org.apache.thrift.protocol.TList _list426=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.exec_stats=new ArrayList<ExecutorAggregateStats>(_list426.size);
      ExecutorAggregateStats _elem427;
      for (int _i428=0; _i428 < _list426.size; ++_i428) {
        _elem427=new ExecutorAggregateStats();
        _elem427.read(iprot);
        struct.exec_stats.add(_elem427);
      }
    }
    struct.set_exec_stats_isSet(true);
  }
  if (incoming.get(8)) {
{
      org.apache.thrift.protocol.TList _list429=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.errors=new ArrayList<ErrorInfo>(_list429.size);
      ErrorInfo _elem430;
      for (int _i431=0; _i431 < _list429.size; ++_i431) {
        _elem430=new ErrorInfo();
        _elem430.read(iprot);
        struct.errors.add(_elem430);
      }
    }
    struct.set_errors_isSet(true);
  }
}
