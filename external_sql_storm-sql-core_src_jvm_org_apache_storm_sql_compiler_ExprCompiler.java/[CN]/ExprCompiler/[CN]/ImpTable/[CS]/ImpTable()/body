{
  ImmutableMap.Builder<SqlOperator,CallExprPrinter> builder=ImmutableMap.builder();
  builder.put(builtInMethod(UPPER,BuiltInMethod.UPPER,NullPolicy.STRICT)).put(builtInMethod(LOWER,BuiltInMethod.LOWER,NullPolicy.STRICT)).put(builtInMethod(INITCAP,BuiltInMethod.INITCAP,NullPolicy.STRICT)).put(builtInMethod(SUBSTRING,BuiltInMethod.SUBSTRING,NullPolicy.STRICT)).put(builtInMethod(CHARACTER_LENGTH,BuiltInMethod.CHAR_LENGTH,NullPolicy.STRICT)).put(builtInMethod(CHAR_LENGTH,BuiltInMethod.CHAR_LENGTH,NullPolicy.STRICT)).put(builtInMethod(CONCAT,BuiltInMethod.STRING_CONCAT,NullPolicy.STRICT)).put(builtInMethod(ITEM,BuiltInMethod.ANY_ITEM,NullPolicy.STRICT)).put(infixBinary(LESS_THAN,"<","lt")).put(infixBinary(LESS_THAN_OR_EQUAL,"<=","le")).put(infixBinary(GREATER_THAN,">","gt")).put(infixBinary(GREATER_THAN_OR_EQUAL,">=","ge")).put(infixBinary(EQUALS,"==",StormSqlFunctions.class,"eq")).put(infixBinary(NOT_EQUALS,"<>",StormSqlFunctions.class,"ne")).put(infixBinary(PLUS,"+","plus")).put(infixBinary(MINUS,"-","minus")).put(infixBinary(MULTIPLY,"*","multiply")).put(infixBinary(DIVIDE,"/","divide")).put(infixBinary(DIVIDE_INTEGER,"/","divide")).put(expect(IS_NULL,null)).put(expectNot(IS_NOT_NULL,null)).put(expect(IS_TRUE,true)).put(expectNot(IS_NOT_TRUE,true)).put(expect(IS_FALSE,false)).put(expectNot(IS_NOT_FALSE,false)).put(AND,AND_EXPR).put(OR,OR_EXPR).put(NOT,NOT_EXPR).put(CAST,CAST_EXPR);
  this.translators=builder.build();
}
