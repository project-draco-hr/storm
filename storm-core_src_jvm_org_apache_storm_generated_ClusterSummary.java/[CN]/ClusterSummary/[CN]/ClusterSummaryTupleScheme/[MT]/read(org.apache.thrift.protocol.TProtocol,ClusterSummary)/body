{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TList _list123=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.supervisors=new ArrayList<SupervisorSummary>(_list123.size);
    SupervisorSummary _elem124;
    for (int _i125=0; _i125 < _list123.size; ++_i125) {
      _elem124=new SupervisorSummary();
      _elem124.read(iprot);
      struct.supervisors.add(_elem124);
    }
  }
  struct.set_supervisors_isSet(true);
{
    org.apache.thrift.protocol.TList _list126=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.topologies=new ArrayList<TopologySummary>(_list126.size);
    TopologySummary _elem127;
    for (int _i128=0; _i128 < _list126.size; ++_i128) {
      _elem127=new TopologySummary();
      _elem127.read(iprot);
      struct.topologies.add(_elem127);
    }
  }
  struct.set_topologies_isSet(true);
{
    org.apache.thrift.protocol.TList _list129=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.nimbuses=new ArrayList<NimbusSummary>(_list129.size);
    NimbusSummary _elem130;
    for (int _i131=0; _i131 < _list129.size; ++_i131) {
      _elem130=new NimbusSummary();
      _elem130.read(iprot);
      struct.nimbuses.add(_elem130);
    }
  }
  struct.set_nimbuses_isSet(true);
  BitSet incoming=iprot.readBitSet(1);
  if (incoming.get(0)) {
    struct.nimbus_uptime_secs=iprot.readI32();
    struct.set_nimbus_uptime_secs_isSet(true);
  }
}
