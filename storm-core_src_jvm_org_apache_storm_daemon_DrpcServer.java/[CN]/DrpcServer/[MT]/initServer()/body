{
  Integer drpcHttpPort=(Integer)conf.get(Config.DRPC_HTTP_PORT);
  handlerServer=initHandlerServer(conf,this);
  invokeServer=initInvokeServer(conf,this);
  httpCredsHandler=AuthUtils.GetDrpcHttpCredentialsPlugin(conf);
  Utils.addShutdownHookWithForceKillIn1Sec(new Runnable(){
    @Override public void run(){
      if (handlerServer != null) {
        handlerServer.stop();
      }
 else {
        invokeServer.stop();
      }
    }
  }
);
  LOG.info("Starting Distributed RPC servers...");
  LOG.info("Starting Distributed RPC servers...");
  new Thread(new Runnable(){
    @Override public void run(){
      invokeServer.serve();
    }
  }
).start();
  if (drpcHttpPort != null && drpcHttpPort > 0) {
    String filterClass=(String)(conf.get(Config.DRPC_HTTP_FILTER));
    Map<String,String> filterParams=(Map<String,String>)(conf.get(Config.DRPC_HTTP_FILTER_PARAMS));
    FilterConfiguration filterConfiguration=new FilterConfiguration(filterParams,filterClass);
    final List<FilterConfiguration> filterConfigurations=Arrays.asList(filterConfiguration);
    final Integer httpsPort=Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT),0);
    final String httpsKsPath=(String)(conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));
    final String httpsKsPassword=(String)(conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));
    final String httpsKsType=(String)(conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));
    final String httpsKeyPassword=(String)(conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));
    final String httpsTsPath=(String)(conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));
    final String httpsTsPassword=(String)(conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));
    final String httpsTsType=(String)(conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));
    final Boolean httpsWantClientAuth=(Boolean)(conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));
    final Boolean httpsNeedClientAuth=(Boolean)(conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));
    UIHelpers.stormRunJetty(drpcHttpPort,new IConfigurator(){
      @Override public void execute(      Server s){
        UIHelpers.configSsl(s,httpsPort,httpsKsPath,httpsKsPassword,httpsKsType,httpsKeyPassword,httpsTsPath,httpsTsPassword,httpsTsType,httpsNeedClientAuth,httpsWantClientAuth);
        UIHelpers.configFilter(s,httpServlet,filterConfigurations);
      }
    }
);
  }
  List<PreparableReporter> reporters=MetricsUtils.getPreparableReporters(conf);
  for (  PreparableReporter reporter : reporters) {
    reporter.prepare(new MetricRegistry(),conf);
    reporter.start();
    LOG.info("Started statistics report plugin...");
  }
  if (handlerServer != null)   handlerServer.serve();
}
