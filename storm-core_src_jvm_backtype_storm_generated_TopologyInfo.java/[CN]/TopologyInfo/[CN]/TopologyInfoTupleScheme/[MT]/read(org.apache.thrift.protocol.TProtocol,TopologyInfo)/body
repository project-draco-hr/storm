{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.id=iprot.readString();
  struct.set_id_isSet(true);
  struct.name=iprot.readString();
  struct.set_name_isSet(true);
  struct.uptime_secs=iprot.readI32();
  struct.set_uptime_secs_isSet(true);
{
    org.apache.thrift.protocol.TList _list338=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.executors=new ArrayList<ExecutorSummary>(_list338.size);
    ExecutorSummary _elem339;
    for (int _i340=0; _i340 < _list338.size; ++_i340) {
      _elem339=new ExecutorSummary();
      _elem339.read(iprot);
      struct.executors.add(_elem339);
    }
  }
  struct.set_executors_isSet(true);
  struct.status=iprot.readString();
  struct.set_status_isSet(true);
{
    org.apache.thrift.protocol.TMap _map341=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
    struct.errors=new HashMap<String,List<ErrorInfo>>(2 * _map341.size);
    String _key342;
    List<ErrorInfo> _val343;
    for (int _i344=0; _i344 < _map341.size; ++_i344) {
      _key342=iprot.readString();
{
        org.apache.thrift.protocol.TList _list345=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
        _val343=new ArrayList<ErrorInfo>(_list345.size);
        ErrorInfo _elem346;
        for (int _i347=0; _i347 < _list345.size; ++_i347) {
          _elem346=new ErrorInfo();
          _elem346.read(iprot);
          _val343.add(_elem346);
        }
      }
      struct.errors.put(_key342,_val343);
    }
  }
  struct.set_errors_isSet(true);
  BitSet incoming=iprot.readBitSet(10);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map348=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.component_debug=new HashMap<String,DebugOptions>(2 * _map348.size);
      String _key349;
      DebugOptions _val350;
      for (int _i351=0; _i351 < _map348.size; ++_i351) {
        _key349=iprot.readString();
        _val350=new DebugOptions();
        _val350.read(iprot);
        struct.component_debug.put(_key349,_val350);
      }
    }
    struct.set_component_debug_isSet(true);
  }
  if (incoming.get(1)) {
    struct.sched_status=iprot.readString();
    struct.set_sched_status_isSet(true);
  }
  if (incoming.get(2)) {
    struct.owner=iprot.readString();
    struct.set_owner_isSet(true);
  }
  if (incoming.get(3)) {
    struct.replication_count=iprot.readI32();
    struct.set_replication_count_isSet(true);
  }
  if (incoming.get(4)) {
    struct.requested_memonheap=iprot.readDouble();
    struct.set_requested_memonheap_isSet(true);
  }
  if (incoming.get(5)) {
    struct.requested_memoffheap=iprot.readDouble();
    struct.set_requested_memoffheap_isSet(true);
  }
  if (incoming.get(6)) {
    struct.requested_cpu=iprot.readDouble();
    struct.set_requested_cpu_isSet(true);
  }
  if (incoming.get(7)) {
    struct.assigned_memonheap=iprot.readDouble();
    struct.set_assigned_memonheap_isSet(true);
  }
  if (incoming.get(8)) {
    struct.assigned_memoffheap=iprot.readDouble();
    struct.set_assigned_memoffheap_isSet(true);
  }
  if (incoming.get(9)) {
    struct.assigned_cpu=iprot.readDouble();
    struct.set_assigned_cpu_isSet(true);
  }
}
