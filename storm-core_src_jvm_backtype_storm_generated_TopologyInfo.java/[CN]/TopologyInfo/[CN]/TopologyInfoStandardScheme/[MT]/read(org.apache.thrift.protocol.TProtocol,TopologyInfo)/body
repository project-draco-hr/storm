{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.id=iprot.readString();
        struct.set_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.name=iprot.readString();
    struct.set_name_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.uptime_secs=iprot.readI32();
struct.set_uptime_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list298=iprot.readListBegin();
struct.executors=new ArrayList<ExecutorSummary>(_list298.size);
ExecutorSummary _elem299;
for (int _i300=0; _i300 < _list298.size; ++_i300) {
_elem299=new ExecutorSummary();
_elem299.read(iprot);
struct.executors.add(_elem299);
}
iprot.readListEnd();
}
struct.set_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.status=iprot.readString();
struct.set_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map301=iprot.readMapBegin();
struct.errors=new HashMap<String,List<ErrorInfo>>(2 * _map301.size);
String _key302;
List<ErrorInfo> _val303;
for (int _i304=0; _i304 < _map301.size; ++_i304) {
_key302=iprot.readString();
{
org.apache.thrift.protocol.TList _list305=iprot.readListBegin();
_val303=new ArrayList<ErrorInfo>(_list305.size);
ErrorInfo _elem306;
for (int _i307=0; _i307 < _list305.size; ++_i307) {
_elem306=new ErrorInfo();
_elem306.read(iprot);
_val303.add(_elem306);
}
iprot.readListEnd();
}
struct.errors.put(_key302,_val303);
}
iprot.readMapEnd();
}
struct.set_errors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map308=iprot.readMapBegin();
struct.component_debug=new HashMap<String,DebugOptions>(2 * _map308.size);
String _key309;
DebugOptions _val310;
for (int _i311=0; _i311 < _map308.size; ++_i311) {
_key309=iprot.readString();
_val310=new DebugOptions();
_val310.read(iprot);
struct.component_debug.put(_key309,_val310);
}
iprot.readMapEnd();
}
struct.set_component_debug_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 513:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.sched_status=iprot.readString();
struct.set_sched_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 514:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.owner=iprot.readString();
struct.set_owner_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 515:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.replication_count=iprot.readI32();
struct.set_replication_count_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
