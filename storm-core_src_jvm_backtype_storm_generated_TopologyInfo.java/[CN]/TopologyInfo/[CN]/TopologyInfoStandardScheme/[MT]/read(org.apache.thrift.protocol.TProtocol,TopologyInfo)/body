{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.id=iprot.readString();
        struct.set_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.name=iprot.readString();
    struct.set_name_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.uptime_secs=iprot.readI32();
struct.set_uptime_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list316=iprot.readListBegin();
struct.executors=new ArrayList<ExecutorSummary>(_list316.size);
ExecutorSummary _elem317;
for (int _i318=0; _i318 < _list316.size; ++_i318) {
_elem317=new ExecutorSummary();
_elem317.read(iprot);
struct.executors.add(_elem317);
}
iprot.readListEnd();
}
struct.set_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.status=iprot.readString();
struct.set_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map319=iprot.readMapBegin();
struct.errors=new HashMap<String,List<ErrorInfo>>(2 * _map319.size);
String _key320;
List<ErrorInfo> _val321;
for (int _i322=0; _i322 < _map319.size; ++_i322) {
_key320=iprot.readString();
{
org.apache.thrift.protocol.TList _list323=iprot.readListBegin();
_val321=new ArrayList<ErrorInfo>(_list323.size);
ErrorInfo _elem324;
for (int _i325=0; _i325 < _list323.size; ++_i325) {
_elem324=new ErrorInfo();
_elem324.read(iprot);
_val321.add(_elem324);
}
iprot.readListEnd();
}
struct.errors.put(_key320,_val321);
}
iprot.readMapEnd();
}
struct.set_errors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map326=iprot.readMapBegin();
struct.component_debug=new HashMap<String,DebugOptions>(2 * _map326.size);
String _key327;
DebugOptions _val328;
for (int _i329=0; _i329 < _map326.size; ++_i329) {
_key327=iprot.readString();
_val328=new DebugOptions();
_val328.read(iprot);
struct.component_debug.put(_key327,_val328);
}
iprot.readMapEnd();
}
struct.set_component_debug_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 513:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.sched_status=iprot.readString();
struct.set_sched_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 514:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.owner=iprot.readString();
struct.set_owner_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 515:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.replication_count=iprot.readI32();
struct.set_replication_count_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 521:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.requested_memonheap=iprot.readDouble();
struct.set_requested_memonheap_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 522:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.requested_memoffheap=iprot.readDouble();
struct.set_requested_memoffheap_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 523:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.requested_cpu=iprot.readDouble();
struct.set_requested_cpu_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 524:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.assigned_memonheap=iprot.readDouble();
struct.set_assigned_memonheap_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 525:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.assigned_memoffheap=iprot.readDouble();
struct.set_assigned_memoffheap_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 526:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.assigned_cpu=iprot.readDouble();
struct.set_assigned_cpu_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
