{
  Map<List<Object>,List<TridentTuple>> grouped=new HashMap();
  List<List<Object>> groups=new ArrayList<List<Object>>(tuples.size());
  List<Object> values=new ArrayList<Object>(tuples.size());
  for (  TridentTuple t : tuples) {
    List<Object> group=_groupFactory.create(t);
    List<TridentTuple> groupTuples=grouped.get(group);
    if (groupTuples == null) {
      groupTuples=new ArrayList();
      grouped.put(group,groupTuples);
    }
    groupTuples.add(_inputFactory.create(t));
  }
  List<List<Object>> uniqueGroups=new ArrayList(grouped.keySet());
  List<ValueUpdater> updaters=new ArrayList(uniqueGroups.size());
  for (  List<Object> group : uniqueGroups) {
    updaters.add(new ReducerValueUpdater(_agg,grouped.get(group)));
  }
  List<Object> results=map.multiUpdate(uniqueGroups,updaters);
  for (int i=0; i < uniqueGroups.size(); i++) {
    List<Object> group=uniqueGroups.get(i);
    Object result=results.get(i);
    collector.emit(_factory.create(new List[]{group,new Values(result)}));
  }
}
