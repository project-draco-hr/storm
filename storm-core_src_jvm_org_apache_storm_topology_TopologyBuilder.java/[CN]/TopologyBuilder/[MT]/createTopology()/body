{
  Map<String,Bolt> boltSpecs=new HashMap<>();
  Map<String,SpoutSpec> spoutSpecs=new HashMap<>();
  maybeAddCheckpointSpout();
  for (  String boltId : _bolts.keySet()) {
    IRichBolt bolt=_bolts.get(boltId);
    bolt=maybeAddCheckpointTupleForwarder(bolt);
    ComponentCommon common=getComponentCommon(boltId,bolt);
    try {
      maybeAddCheckpointInputs(common);
      boltSpecs.put(boltId,new Bolt(ComponentObject.serialized_java(Utils.javaSerialize(bolt)),common));
    }
 catch (    RuntimeException wrapperCause) {
      if (wrapperCause.getCause() != null && NotSerializableException.class.equals(wrapperCause.getCause().getClass())) {
        throw new IllegalStateException("Bolt '" + boltId + "' contains a non-serializable field of type "+ wrapperCause.getCause().getMessage()+ ", "+ "which was instantiated prior to topology creation. "+ wrapperCause.getCause().getMessage()+ " "+ "should be instantiated within the prepare method of '"+ boltId+ " at the earliest.",wrapperCause);
      }
      throw wrapperCause;
    }
  }
  for (  String spoutId : _spouts.keySet()) {
    IRichSpout spout=_spouts.get(spoutId);
    ComponentCommon common=getComponentCommon(spoutId,spout);
    try {
      spoutSpecs.put(spoutId,new SpoutSpec(ComponentObject.serialized_java(Utils.javaSerialize(spout)),common));
    }
 catch (    RuntimeException wrapperCause) {
      if (wrapperCause.getCause() != null && NotSerializableException.class.equals(wrapperCause.getCause().getClass())) {
        throw new IllegalStateException("Spout '" + spoutId + "' contains a non-serializable field of type "+ wrapperCause.getCause().getMessage()+ ", "+ "which was instantiated prior to topology creation. "+ wrapperCause.getCause().getMessage()+ " "+ "should be instantiated within the prepare method of '"+ spoutId+ " at the earliest.",wrapperCause);
      }
      throw wrapperCause;
    }
  }
  StormTopology stormTopology=new StormTopology(spoutSpecs,boltSpecs,new HashMap<String,StateSpoutSpec>());
  stormTopology.set_worker_hooks(_workerHooks);
  return stormTopology;
}
