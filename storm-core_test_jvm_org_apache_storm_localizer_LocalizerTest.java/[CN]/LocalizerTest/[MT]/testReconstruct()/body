{
  Map conf=new HashMap();
  String expectedFileDir1=constructExpectedFilesDir(baseDir.toString(),user1);
  String expectedArchiveDir1=constructExpectedArchivesDir(baseDir.toString(),user1);
  String expectedFileDir2=constructExpectedFilesDir(baseDir.toString(),user2);
  String expectedArchiveDir2=constructExpectedArchivesDir(baseDir.toString(),user2);
  String key1="testfile1.txt";
  String key2="testfile2.txt";
  String key3="testfile3.txt";
  String key4="testfile4.txt";
  String archive1="archive1";
  String archive2="archive2";
  File user1file1=new File(expectedFileDir1,key1 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user1file2=new File(expectedFileDir1,key2 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user2file3=new File(expectedFileDir2,key3 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user2file4=new File(expectedFileDir2,key4 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user1archive1=new File(expectedArchiveDir1,archive1 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user2archive2=new File(expectedArchiveDir2,archive2 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File user1archive1file=new File(user1archive1,"file1");
  File user2archive2file=new File(user2archive2,"file2");
  assertTrue("Failed setup filecache dir1",new File(expectedFileDir1).mkdirs());
  assertTrue("Failed setup filecache dir2",new File(expectedFileDir2).mkdirs());
  assertTrue("Failed setup file1",user1file1.createNewFile());
  assertTrue("Failed setup file2",user1file2.createNewFile());
  assertTrue("Failed setup file3",user2file3.createNewFile());
  assertTrue("Failed setup file4",user2file4.createNewFile());
  assertTrue("Failed setup archive dir1",user1archive1.mkdirs());
  assertTrue("Failed setup archive dir2",user2archive2.mkdirs());
  assertTrue("Failed setup file in archivedir1",user1archive1file.createNewFile());
  assertTrue("Failed setup file in archivedir2",user2archive2file.createNewFile());
  Localizer localizer=new TestLocalizer(conf,baseDir.toString());
  ArrayList<LocalResource> arrUser1Keys=new ArrayList<LocalResource>();
  arrUser1Keys.add(new LocalResource(key1,false));
  arrUser1Keys.add(new LocalResource(archive1,true));
  localizer.addReferences(arrUser1Keys,user1,"topo1");
  LocalizedResourceSet lrsrcSet=localizer.getUserResources().get(user1);
  assertEquals("local resource set size wrong",3,lrsrcSet.getSize());
  assertEquals("user doesn't match",user1,lrsrcSet.getUser());
  LocalizedResource key1rsrc=lrsrcSet.get(key1,false);
  assertNotNull("Local resource doesn't exist but should",key1rsrc);
  assertEquals("key doesn't match",key1,key1rsrc.getKey());
  assertEquals("refcount doesn't match",1,key1rsrc.getRefCount());
  LocalizedResource key2rsrc=lrsrcSet.get(key2,false);
  assertNotNull("Local resource doesn't exist but should",key2rsrc);
  assertEquals("key doesn't match",key2,key2rsrc.getKey());
  assertEquals("refcount doesn't match",0,key2rsrc.getRefCount());
  LocalizedResource archive1rsrc=lrsrcSet.get(archive1,true);
  assertNotNull("Local resource doesn't exist but should",archive1rsrc);
  assertEquals("key doesn't match",archive1,archive1rsrc.getKey());
  assertEquals("refcount doesn't match",1,archive1rsrc.getRefCount());
  LocalizedResourceSet lrsrcSet2=localizer.getUserResources().get(user2);
  assertEquals("local resource set size wrong",3,lrsrcSet2.getSize());
  assertEquals("user doesn't match",user2,lrsrcSet2.getUser());
  LocalizedResource key3rsrc=lrsrcSet2.get(key3,false);
  assertNotNull("Local resource doesn't exist but should",key3rsrc);
  assertEquals("key doesn't match",key3,key3rsrc.getKey());
  assertEquals("refcount doesn't match",0,key3rsrc.getRefCount());
  LocalizedResource key4rsrc=lrsrcSet2.get(key4,false);
  assertNotNull("Local resource doesn't exist but should",key4rsrc);
  assertEquals("key doesn't match",key4,key4rsrc.getKey());
  assertEquals("refcount doesn't match",0,key4rsrc.getRefCount());
  LocalizedResource archive2rsrc=lrsrcSet2.get(archive2,true);
  assertNotNull("Local resource doesn't exist but should",archive2rsrc);
  assertEquals("key doesn't match",archive2,archive2rsrc.getKey());
  assertEquals("refcount doesn't match",0,archive2rsrc.getRefCount());
}
