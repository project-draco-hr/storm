{
  KryoSerializableDefault k=new KryoSerializableDefault();
  k.setRegistrationRequired(!((Boolean)conf.get(Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION)));
  k.setReferences(false);
  k.register(byte[].class);
  k.register(ListDelegate.class);
  k.register(ArrayList.class,new ArrayListSerializer());
  k.register(HashMap.class,new HashMapSerializer());
  k.register(HashSet.class,new HashSetSerializer());
  k.register(BigInteger.class,new BigIntegerSerializer());
  k.register(TransactionAttempt.class);
  k.register(Values.class);
  try {
    JavaBridge.registerPrimitives(k);
    JavaBridge.registerCollections(k);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  Map<String,String> registrations=normalizeKryoRegister(conf);
  boolean skipMissing=(Boolean)conf.get(Config.TOPOLOGY_SKIP_MISSING_KRYO_REGISTRATIONS);
  for (  String klassName : registrations.keySet()) {
    String serializerClassName=registrations.get(klassName);
    try {
      Class klass=Class.forName(klassName);
      Class serializerClass=null;
      if (serializerClassName != null)       serializerClass=Class.forName(serializerClassName);
      if (serializerClass == null) {
        k.register(klass);
      }
 else {
        k.register(klass,resolveSerializerInstance(k,klass,serializerClass));
      }
    }
 catch (    ClassNotFoundException e) {
      if (skipMissing) {
        LOG.info("Could not find serialization or class for " + serializerClassName + ". Skipping registration...");
      }
 else {
        throw new RuntimeException(e);
      }
    }
  }
  k.overrideDefault(true);
  if (!(conf.get(Config.TOPOLOGY_KRYO_DECORATORS) instanceof List)) {
    return k;
  }
  for (  String klassName : (List<String>)conf.get(Config.TOPOLOGY_KRYO_DECORATORS)) {
    try {
      Class klass=Class.forName(klassName);
      IKryoDecorator decorator=(IKryoDecorator)klass.newInstance();
      decorator.decorate(k);
      System.out.println(klassName + ".. executed decorate.");
    }
 catch (    ClassNotFoundException e) {
      if (skipMissing) {
        LOG.info("Could not find kryo decorator named " + klassName + ". Skipping registration...");
      }
 else {
        throw new RuntimeException(e);
      }
    }
catch (    InstantiationException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
  return k;
}
