{
  LOG.debug("Scan events, eviction policy {}",evictionPolicy);
  List<T> eventsToExpire=new ArrayList<>();
  List<Event<T>> eventsToProcess=new ArrayList<>();
  try {
    lock.lock();
    Iterator<Event<T>> it=queue.iterator();
    while (it.hasNext()) {
      Event<T> windowEvent=it.next();
      Action action=evictionPolicy.evict(windowEvent);
      if (action == EXPIRE) {
        eventsToExpire.add(windowEvent.get());
        it.remove();
      }
 else       if (!fullScan || action == STOP) {
        break;
      }
 else       if (action == PROCESS) {
        eventsToProcess.add(windowEvent);
      }
    }
    expiredEvents.addAll(eventsToExpire);
  }
  finally {
    lock.unlock();
  }
  eventsSinceLastExpiry.set(0);
  LOG.debug("[{}] events expired from window.",eventsToExpire.size());
  if (!eventsToExpire.isEmpty()) {
    LOG.debug("invoking windowLifecycleListener.onExpiry");
    windowLifecycleListener.onExpiry(eventsToExpire);
  }
  return eventsToProcess;
}
