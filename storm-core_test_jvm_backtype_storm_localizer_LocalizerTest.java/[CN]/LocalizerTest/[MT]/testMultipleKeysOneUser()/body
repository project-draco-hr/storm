{
  Map conf=new HashMap();
  conf.put(Config.SUPERVISOR_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS,60 * 60 * 1000);
  String key1="key1";
  String topo1="topo1";
  String key2="key2";
  String key3="key3";
  Localizer localizer=new TestLocalizer(conf,baseDir.toString());
  localizer.setTargetCacheSize(68);
  ReadableBlobMeta rbm=new ReadableBlobMeta();
  rbm.set_settable(new SettableBlobMeta(BlobStoreAclHandler.WORLD_EVERYTHING));
  when(mockblobstore.getBlobMeta(anyString())).thenReturn(rbm);
  when(mockblobstore.getBlob(key1)).thenReturn(new TestInputStreamWithMeta());
  when(mockblobstore.getBlob(key2)).thenReturn(new TestInputStreamWithMeta());
  when(mockblobstore.getBlob(key3)).thenReturn(new TestInputStreamWithMeta());
  List<LocalResource> keys=Arrays.asList(new LocalResource[]{new LocalResource(key1,false),new LocalResource(key2,false),new LocalResource(key3,false)});
  File user1Dir=localizer.getLocalUserFileCacheDir(user1);
  assertTrue("failed to create user dir",user1Dir.mkdirs());
  List<LocalizedResource> lrsrcs=localizer.getBlobs(keys,user1,topo1,user1Dir);
  LocalizedResource lrsrc=lrsrcs.get(0);
  LocalizedResource lrsrc2=lrsrcs.get(1);
  LocalizedResource lrsrc3=lrsrcs.get(2);
  String expectedFileDir=joinPath(baseDir.toString(),Localizer.USERCACHE,user1,Localizer.FILECACHE,Localizer.FILESDIR);
  assertTrue("user filecache dir not created",new File(expectedFileDir).exists());
  File keyFile=new File(expectedFileDir,key1 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File keyFile2=new File(expectedFileDir,key2 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File keyFile3=new File(expectedFileDir,key3 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  assertTrue("blob not created",keyFile.exists());
  assertTrue("blob not created",keyFile2.exists());
  assertTrue("blob not created",keyFile3.exists());
  assertEquals("size doesn't match",34,keyFile.length());
  assertEquals("size doesn't match",34,keyFile2.length());
  assertEquals("size doesn't match",34,keyFile3.length());
  assertEquals("size doesn't match",34,lrsrc.getSize());
  assertEquals("size doesn't match",34,lrsrc3.getSize());
  assertEquals("size doesn't match",34,lrsrc2.getSize());
  LocalizedResourceSet lrsrcSet=localizer.getUserResources().get(user1);
  assertEquals("local resource set size wrong",3,lrsrcSet.getSize());
  assertEquals("user doesn't match",user1,lrsrcSet.getUser());
  long timeBefore=System.nanoTime();
  localizer.removeBlobReference(lrsrc.getKey(),user1,topo1,false);
  localizer.removeBlobReference(lrsrc2.getKey(),user1,topo1,false);
  localizer.removeBlobReference(lrsrc3.getKey(),user1,topo1,false);
  long timeAfter=System.nanoTime();
  lrsrc=localizer.getBlob(new LocalResource(key1,false),user1,topo1,user1Dir);
  assertTrue("timestamp not within range",(lrsrc.getLastAccessTime() >= timeBefore && lrsrc.getLastAccessTime() <= timeAfter));
  localizer.removeBlobReference(lrsrc.getKey(),user1,topo1,false);
  localizer.handleCacheCleanup();
  lrsrcSet=localizer.getUserResources().get(user1);
  assertEquals("local resource set size wrong",2,lrsrcSet.getSize());
  assertFalse("blob not deleted",keyFile2.exists());
  assertTrue("blob deleted",keyFile.exists());
  assertTrue("blob deleted",keyFile3.exists());
  localizer.setTargetCacheSize(34);
  localizer.handleCacheCleanup();
  lrsrcSet=localizer.getUserResources().get(user1);
  assertEquals("local resource set size wrong",1,lrsrcSet.getSize());
  assertTrue("blob deleted",keyFile.exists());
  assertFalse("blob not deleted",keyFile3.exists());
}
