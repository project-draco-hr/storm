{
  Map conf=new HashMap();
  conf.put(Config.SUPERVISOR_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS,60 * 60 * 1000);
  String topo1="topo1";
  String topo2="topo2";
  String topo3="topo3";
  String key1="key1";
  String key2="key2";
  String key3="key3";
  Localizer localizer=new TestLocalizer(conf,baseDir.toString());
  localizer.setTargetCacheSize(68);
  ReadableBlobMeta rbm=new ReadableBlobMeta();
  rbm.set_settable(new SettableBlobMeta(BlobStoreAclHandler.WORLD_EVERYTHING));
  when(mockblobstore.getBlobMeta(anyString())).thenReturn(rbm);
  when(mockblobstore.getBlob(key1)).thenReturn(new TestInputStreamWithMeta());
  when(mockblobstore.getBlob(key2)).thenReturn(new TestInputStreamWithMeta());
  when(mockblobstore.getBlob(key3)).thenReturn(new TestInputStreamWithMeta());
  File user1Dir=localizer.getLocalUserFileCacheDir(user1);
  assertTrue("failed to create user dir",user1Dir.mkdirs());
  File user2Dir=localizer.getLocalUserFileCacheDir(user2);
  assertTrue("failed to create user dir",user2Dir.mkdirs());
  File user3Dir=localizer.getLocalUserFileCacheDir(user3);
  assertTrue("failed to create user dir",user3Dir.mkdirs());
  LocalizedResource lrsrc=localizer.getBlob(new LocalResource(key1,false),user1,topo1,user1Dir);
  LocalizedResource lrsrc2=localizer.getBlob(new LocalResource(key2,false),user2,topo2,user2Dir);
  LocalizedResource lrsrc3=localizer.getBlob(new LocalResource(key3,false),user3,topo3,user3Dir);
  LocalizedResource lrsrc1_user3=localizer.getBlob(new LocalResource(key1,false),user3,topo3,user3Dir);
  String expectedUserDir1=joinPath(baseDir.toString(),Localizer.USERCACHE,user1);
  String expectedFileDirUser1=joinPath(expectedUserDir1,Localizer.FILECACHE,Localizer.FILESDIR);
  String expectedFileDirUser2=joinPath(baseDir.toString(),Localizer.USERCACHE,user2,Localizer.FILECACHE,Localizer.FILESDIR);
  String expectedFileDirUser3=joinPath(baseDir.toString(),Localizer.USERCACHE,user3,Localizer.FILECACHE,Localizer.FILESDIR);
  assertTrue("user filecache dir user1 not created",new File(expectedFileDirUser1).exists());
  assertTrue("user filecache dir user2 not created",new File(expectedFileDirUser2).exists());
  assertTrue("user filecache dir user3 not created",new File(expectedFileDirUser3).exists());
  File keyFile=new File(expectedFileDirUser1,key1 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File keyFile2=new File(expectedFileDirUser2,key2 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File keyFile3=new File(expectedFileDirUser3,key3 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  File keyFile1user3=new File(expectedFileDirUser3,key1 + Utils.DEFAULT_CURRENT_BLOB_SUFFIX);
  assertTrue("blob not created",keyFile.exists());
  assertTrue("blob not created",keyFile2.exists());
  assertTrue("blob not created",keyFile3.exists());
  assertTrue("blob not created",keyFile1user3.exists());
  LocalizedResourceSet lrsrcSet=localizer.getUserResources().get(user1);
  assertEquals("local resource set size wrong",1,lrsrcSet.getSize());
  LocalizedResourceSet lrsrcSet2=localizer.getUserResources().get(user2);
  assertEquals("local resource set size wrong",1,lrsrcSet2.getSize());
  LocalizedResourceSet lrsrcSet3=localizer.getUserResources().get(user3);
  assertEquals("local resource set size wrong",2,lrsrcSet3.getSize());
  localizer.removeBlobReference(lrsrc.getKey(),user1,topo1,false);
  localizer.handleCacheCleanup();
  lrsrcSet=localizer.getUserResources().get(user1);
  lrsrcSet3=localizer.getUserResources().get(user3);
  assertNull("user set should be null",lrsrcSet);
  assertFalse("blob dir not deleted",new File(expectedFileDirUser1).exists());
  assertFalse("blob dir not deleted",new File(expectedUserDir1).exists());
  assertEquals("local resource set size wrong",2,lrsrcSet3.getSize());
  assertTrue("blob deleted",keyFile2.exists());
  assertFalse("blob not deleted",keyFile.exists());
  assertTrue("blob deleted",keyFile3.exists());
  assertTrue("blob deleted",keyFile1user3.exists());
}
