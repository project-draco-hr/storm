{
  StormBoundedExponentialBackoffRetry retryPolicy=new StormBoundedExponentialBackoffRetry(baseSleepMs,maxSleepMs,maxRetries);
  int retryCount=0;
  int prevSleepMs=0;
  LOG.info("The baseSleepMs [" + baseSleepMs + "] the maxSleepMs ["+ maxSleepMs+ "] the maxRetries ["+ maxRetries+ "]");
  while (retryCount <= maxRetries) {
    int currSleepMs=retryPolicy.getSleepTimeMs(retryCount,0);
    LOG.info("For retryCount [" + retryCount + "] the previousSleepMs ["+ prevSleepMs+ "] the currentSleepMs ["+ currSleepMs+ "]");
    assertTrue("For retryCount [" + retryCount + "] the previousSleepMs ["+ prevSleepMs+ "] is not less than currentSleepMs ["+ currSleepMs+ "]",(prevSleepMs < currSleepMs) || (currSleepMs == maxSleepMs));
    assertTrue("For retryCount [" + retryCount + "] the currentSleepMs ["+ currSleepMs+ "] is less than baseSleepMs ["+ baseSleepMs+ "].",(baseSleepMs <= currSleepMs) || (currSleepMs == maxSleepMs));
    assertTrue("For retryCount [" + retryCount + "] the currentSleepMs ["+ currSleepMs+ "] is greater than maxSleepMs ["+ maxSleepMs+ "]",maxSleepMs >= currSleepMs);
    prevSleepMs=currSleepMs;
    retryCount++;
  }
  int badRetryCount=maxRetries + 10;
  int currSleepMs=retryPolicy.getSleepTimeMs(badRetryCount,0);
  LOG.info("For badRetryCount [" + badRetryCount + "] the previousSleepMs ["+ prevSleepMs+ "] the currentSleepMs ["+ currSleepMs+ "]");
  assertTrue("For the badRetryCount [" + badRetryCount + "] that's greater than maxRetries ["+ maxRetries+ "]the currentSleepMs ["+ currSleepMs+ "] "+ "is greater than maxSleepMs ["+ maxSleepMs+ "]",maxSleepMs >= currSleepMs);
}
