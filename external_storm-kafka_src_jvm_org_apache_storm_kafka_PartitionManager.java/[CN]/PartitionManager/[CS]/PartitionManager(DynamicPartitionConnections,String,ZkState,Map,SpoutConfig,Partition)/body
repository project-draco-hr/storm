{
  _partition=id;
  _connections=connections;
  _spoutConfig=spoutConfig;
  _topologyInstanceId=topologyInstanceId;
  _consumer=connections.register(id.host,id.topic,id.partition);
  _state=state;
  _stormConf=stormConf;
  numberAcked=numberFailed=0;
  _failedMsgRetryManager=new ExponentialBackoffMsgRetryManager(_spoutConfig.retryInitialDelayMs,_spoutConfig.retryDelayMultiplier,_spoutConfig.retryDelayMaxMs);
  String jsonTopologyId=null;
  Long jsonOffset=null;
  String path=committedPath();
  try {
    Map<Object,Object> json=_state.readJSON(path);
    LOG.info("Read partition information from: " + path + "  --> "+ json);
    if (json != null) {
      jsonTopologyId=(String)((Map<Object,Object>)json.get("topology")).get("id");
      jsonOffset=(Long)json.get("offset");
    }
  }
 catch (  Throwable e) {
    LOG.warn("Error reading and/or parsing at ZkNode: " + path,e);
  }
  String topic=_partition.topic;
  Long currentOffset=KafkaUtils.getOffset(_consumer,topic,id.partition,spoutConfig);
  if (jsonTopologyId == null || jsonOffset == null) {
    _committedTo=currentOffset;
    LOG.info("No partition information found, using configuration to determine offset");
  }
 else   if (!topologyInstanceId.equals(jsonTopologyId) && spoutConfig.ignoreZkOffsets) {
    _committedTo=KafkaUtils.getOffset(_consumer,topic,id.partition,spoutConfig.startOffsetTime);
    LOG.info("Topology change detected and ignore zookeeper offsets set to true, using configuration to determine offset");
  }
 else {
    _committedTo=jsonOffset;
    LOG.info("Read last commit offset from zookeeper: " + _committedTo + "; old topology_id: "+ jsonTopologyId+ " - new topology_id: "+ topologyInstanceId);
  }
  if (currentOffset - _committedTo > spoutConfig.maxOffsetBehind || _committedTo <= 0) {
    LOG.info("Last commit offset from zookeeper: " + _committedTo);
    Long lastCommittedOffset=_committedTo;
    _committedTo=currentOffset;
    LOG.info("Commit offset " + lastCommittedOffset + " is more than "+ spoutConfig.maxOffsetBehind+ " behind latest offset "+ currentOffset+ ", resetting to startOffsetTime="+ spoutConfig.startOffsetTime);
  }
  LOG.info("Starting Kafka " + _consumer.host() + " "+ id+ " from offset "+ _committedTo);
  _emittedToOffset=_committedTo;
  _fetchAPILatencyMax=new CombinedMetric(new MaxMetric());
  _fetchAPILatencyMean=new ReducedMetric(new MeanReducer());
  _fetchAPICallCount=new CountMetric();
  _fetchAPIMessageCount=new CountMetric();
  _lostMessageCount=new CountMetric();
}
