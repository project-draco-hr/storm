def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.id = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.name = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I32):
                self.uptime_secs = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.STRING):
                self.status = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.I32):
                self.num_tasks = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.I32):
                self.num_workers = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.I32):
                self.num_executors = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.STRING):
                self.topology_conf = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.MAP):
                self.id_to_spout_agg_stats = {}
                (_ktype345, _vtype346, _size344) = iprot.readMapBegin()
                for _i348 in xrange(_size344):
                    _key349 = iprot.readString().decode('utf-8')
                    _val350 = ComponentAggregateStats()
                    _val350.read(iprot)
                    self.id_to_spout_agg_stats[_key349] = _val350
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 10):
            if (ftype == TType.MAP):
                self.id_to_bolt_agg_stats = {}
                (_ktype352, _vtype353, _size351) = iprot.readMapBegin()
                for _i355 in xrange(_size351):
                    _key356 = iprot.readString().decode('utf-8')
                    _val357 = ComponentAggregateStats()
                    _val357.read(iprot)
                    self.id_to_bolt_agg_stats[_key356] = _val357
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 11):
            if (ftype == TType.STRING):
                self.sched_status = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 12):
            if (ftype == TType.STRUCT):
                self.topology_stats = TopologyStats()
                self.topology_stats.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 13):
            if (ftype == TType.STRING):
                self.owner = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 14):
            if (ftype == TType.STRUCT):
                self.debug_options = DebugOptions()
                self.debug_options.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 15):
            if (ftype == TType.I32):
                self.replication_count = iprot.readI32()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
