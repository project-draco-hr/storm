def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.inputs = {}
                (_ktype22, _vtype23, _size21) = iprot.readMapBegin()
                for _i25 in xrange(_size21):
                    _key26 = GlobalStreamId()
                    _key26.read(iprot)
                    _val27 = Grouping()
                    _val27.read(iprot)
                    self.inputs[_key26] = _val27
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.streams = {}
                (_ktype29, _vtype30, _size28) = iprot.readMapBegin()
                for _i32 in xrange(_size28):
                    _key33 = iprot.readString().decode('utf-8')
                    _val34 = StreamInfo()
                    _val34.read(iprot)
                    self.streams[_key33] = _val34
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I32):
                self.parallelism_hint = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.STRING):
                self.json_conf = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
