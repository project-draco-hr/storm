def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.I64):
                self.time_secs = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.hostname = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.assignment_id = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.used_ports = []
                (_etype516, _size513) = iprot.readListBegin()
                for _i517 in xrange(_size513):
                    _elem518 = iprot.readI64()
                    self.used_ports.append(_elem518)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.LIST):
                self.meta = []
                (_etype522, _size519) = iprot.readListBegin()
                for _i523 in xrange(_size519):
                    _elem524 = iprot.readI64()
                    self.meta.append(_elem524)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.MAP):
                self.scheduler_meta = {}
                (_ktype526, _vtype527, _size525) = iprot.readMapBegin()
                for _i529 in xrange(_size525):
                    _key530 = iprot.readString().decode('utf-8')
                    _val531 = iprot.readString().decode('utf-8')
                    self.scheduler_meta[_key530] = _val531
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.I64):
                self.uptime_secs = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.STRING):
                self.version = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.MAP):
                self.resources_map = {}
                (_ktype533, _vtype534, _size532) = iprot.readMapBegin()
                for _i536 in xrange(_size532):
                    _key537 = iprot.readString().decode('utf-8')
                    _val538 = iprot.readDouble()
                    self.resources_map[_key537] = _val538
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
