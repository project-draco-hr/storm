def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.LIST):
                self.supervisors = []
                (_etype85, _size82) = iprot.readListBegin()
                for _i86 in xrange(_size82):
                    _elem87 = SupervisorSummary()
                    _elem87.read(iprot)
                    self.supervisors.append(_elem87)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I32):
                self.nimbus_uptime_secs = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.LIST):
                self.topologies = []
                (_etype91, _size88) = iprot.readListBegin()
                for _i92 in xrange(_size88):
                    _elem93 = TopologySummary()
                    _elem93.read(iprot)
                    self.topologies.append(_elem93)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.nimbuses = []
                (_etype97, _size94) = iprot.readListBegin()
                for _i98 in xrange(_size94):
                    _elem99 = NimbusSummary()
                    _elem99.read(iprot)
                    self.nimbuses.append(_elem99)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
