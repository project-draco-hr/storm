def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.window_to_emitted = {}
                (_ktype339, _vtype340, _size338) = iprot.readMapBegin()
                for _i342 in xrange(_size338):
                    _key343 = iprot.readString().decode('utf-8')
                    _val344 = iprot.readI64()
                    self.window_to_emitted[_key343] = _val344
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.window_to_transferred = {}
                (_ktype346, _vtype347, _size345) = iprot.readMapBegin()
                for _i349 in xrange(_size345):
                    _key350 = iprot.readString().decode('utf-8')
                    _val351 = iprot.readI64()
                    self.window_to_transferred[_key350] = _val351
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.MAP):
                self.window_to_complete_latencies_ms = {}
                (_ktype353, _vtype354, _size352) = iprot.readMapBegin()
                for _i356 in xrange(_size352):
                    _key357 = iprot.readString().decode('utf-8')
                    _val358 = iprot.readDouble()
                    self.window_to_complete_latencies_ms[_key357] = _val358
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.MAP):
                self.window_to_acked = {}
                (_ktype360, _vtype361, _size359) = iprot.readMapBegin()
                for _i363 in xrange(_size359):
                    _key364 = iprot.readString().decode('utf-8')
                    _val365 = iprot.readI64()
                    self.window_to_acked[_key364] = _val365
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.MAP):
                self.window_to_failed = {}
                (_ktype367, _vtype368, _size366) = iprot.readMapBegin()
                for _i370 in xrange(_size366):
                    _key371 = iprot.readString().decode('utf-8')
                    _val372 = iprot.readI64()
                    self.window_to_failed[_key371] = _val372
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
