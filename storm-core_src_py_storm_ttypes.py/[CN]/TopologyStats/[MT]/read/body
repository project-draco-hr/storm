def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.window_to_emitted = {}
                (_ktype330, _vtype331, _size329) = iprot.readMapBegin()
                for _i333 in xrange(_size329):
                    _key334 = iprot.readString().decode('utf-8')
                    _val335 = iprot.readI64()
                    self.window_to_emitted[_key334] = _val335
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.window_to_transferred = {}
                (_ktype337, _vtype338, _size336) = iprot.readMapBegin()
                for _i340 in xrange(_size336):
                    _key341 = iprot.readString().decode('utf-8')
                    _val342 = iprot.readI64()
                    self.window_to_transferred[_key341] = _val342
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.MAP):
                self.window_to_complete_latencies_ms = {}
                (_ktype344, _vtype345, _size343) = iprot.readMapBegin()
                for _i347 in xrange(_size343):
                    _key348 = iprot.readString().decode('utf-8')
                    _val349 = iprot.readDouble()
                    self.window_to_complete_latencies_ms[_key348] = _val349
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.MAP):
                self.window_to_acked = {}
                (_ktype351, _vtype352, _size350) = iprot.readMapBegin()
                for _i354 in xrange(_size350):
                    _key355 = iprot.readString().decode('utf-8')
                    _val356 = iprot.readI64()
                    self.window_to_acked[_key355] = _val356
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.MAP):
                self.window_to_failed = {}
                (_ktype358, _vtype359, _size357) = iprot.readMapBegin()
                for _i361 in xrange(_size357):
                    _key362 = iprot.readString().decode('utf-8')
                    _val363 = iprot.readI64()
                    self.window_to_failed[_key362] = _val363
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
