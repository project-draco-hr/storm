def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.host = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I32):
                self.uptime_secs = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I32):
                self.num_workers = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.I32):
                self.num_used_workers = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.STRING):
                self.supervisor_id = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.STRING):
                self.version = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.MAP):
                self.total_resources = {}
                (_ktype74, _vtype75, _size73) = iprot.readMapBegin()
                for _i77 in xrange(_size73):
                    _key78 = iprot.readString().decode('utf-8')
                    _val79 = iprot.readDouble()
                    self.total_resources[_key78] = _val79
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.DOUBLE):
                self.used_mem = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.DOUBLE):
                self.used_cpu = iprot.readDouble()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
