def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.id = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.name = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I32):
                self.uptime_secs = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.executors = []
                (_etype286, _size283) = iprot.readListBegin()
                for _i287 in xrange(_size283):
                    _elem288 = ExecutorSummary()
                    _elem288.read(iprot)
                    self.executors.append(_elem288)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.STRING):
                self.status = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.MAP):
                self.errors = {}
                (_ktype290, _vtype291, _size289) = iprot.readMapBegin()
                for _i293 in xrange(_size289):
                    _key294 = iprot.readString().decode('utf-8')
                    _val295 = []
                    (_etype299, _size296) = iprot.readListBegin()
                    for _i300 in xrange(_size296):
                        _elem301 = ErrorInfo()
                        _elem301.read(iprot)
                        _val295.append(_elem301)
                    iprot.readListEnd()
                    self.errors[_key294] = _val295
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.MAP):
                self.component_debug = {}
                (_ktype303, _vtype304, _size302) = iprot.readMapBegin()
                for _i306 in xrange(_size302):
                    _key307 = iprot.readString().decode('utf-8')
                    _val308 = DebugOptions()
                    _val308.read(iprot)
                    self.component_debug[_key307] = _val308
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 513):
            if (ftype == TType.STRING):
                self.sched_status = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 514):
            if (ftype == TType.STRING):
                self.owner = iprot.readString().decode('utf-8')
            else:
                iprot.skip(ftype)
        elif (fid == 515):
            if (ftype == TType.I32):
                self.replication_count = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 521):
            if (ftype == TType.DOUBLE):
                self.requested_memonheap = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 522):
            if (ftype == TType.DOUBLE):
                self.requested_memoffheap = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 523):
            if (ftype == TType.DOUBLE):
                self.requested_cpu = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 524):
            if (ftype == TType.DOUBLE):
                self.assigned_memonheap = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 525):
            if (ftype == TType.DOUBLE):
                self.assigned_memoffheap = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 526):
            if (ftype == TType.DOUBLE):
                self.assigned_cpu = iprot.readDouble()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
