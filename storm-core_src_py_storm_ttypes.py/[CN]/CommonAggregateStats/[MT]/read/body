def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 513):
            if (ftype == TType.I32):
                self.num_executors = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 514):
            if (ftype == TType.I32):
                self.num_tasks = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 515):
            if (ftype == TType.I64):
                self.emitted = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 516):
            if (ftype == TType.I64):
                self.transferred = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 517):
            if (ftype == TType.I64):
                self.acked = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 518):
            if (ftype == TType.I64):
                self.failed = iprot.readI64()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
