{
  String testString="testingblob";
  String validKey="validkeyBasic";
  FileSystem fs=dfscluster.getFileSystem();
  Map conf=new HashMap();
  TestHdfsBlobStoreImpl hbs=new TestHdfsBlobStoreImpl(blobDir,conf,hadoopConf);
  assertTrue("BlobStore dir wasn't created",fs.exists(blobDir));
  assertEquals("BlobStore dir was created with wrong permissions",HdfsBlobStoreImpl.BLOBSTORE_DIR_PERMISSION,fs.getFileStatus(blobDir).getPermission());
  assertFalse("file exists but shouldn't",hbs.exists("bogus"));
  BlobStoreFile pfile=hbs.write(validKey,false);
  SettableBlobMeta meta=new SettableBlobMeta();
  meta.set_replication_factor(1);
  pfile.setMetadata(meta);
  OutputStream ios=pfile.getOutputStream();
  ios.write(testString.getBytes(Charset.forName("UTF-8")));
  ios.close();
  assertTrue("BlobStore key dir wasn't created",fs.exists(fullKeyDir));
  pfile.commit();
  Path dataFile=new Path(new Path(fullKeyDir,validKey),BLOBSTORE_DATA);
  assertTrue("blob data not committed",fs.exists(dataFile));
  assertEquals("BlobStore dir was created with wrong permissions",HdfsBlobStoreFile.BLOBSTORE_FILE_PERMISSION,fs.getFileStatus(dataFile).getPermission());
  assertTrue("key doesn't exist but should",hbs.exists(validKey));
  BlobStoreFile readpFile=hbs.read(validKey);
  String readString=IOUtils.toString(readpFile.getInputStream(),"UTF-8");
  assertEquals("string read from blob doesn't match",testString,readString);
  Iterator<String> keys=hbs.listKeys();
  assertTrue("blob has one key",keys.hasNext());
  assertEquals("one key in blobstore",validKey,keys.next());
  hbs.deleteKey(validKey);
  assertFalse("key not deleted",fs.exists(dataFile));
  assertFalse("key not deleted",hbs.exists(validKey));
  String testString2="testingblob2";
  String validKey2="validkey2";
  pfile=hbs.write(validKey,false);
  pfile.setMetadata(meta);
  ios=pfile.getOutputStream();
  ios.write(testString.getBytes(Charset.forName("UTF-8")));
  ios.close();
  assertTrue("BlobStore key dir wasn't created",fs.exists(fullKeyDir));
  pfile.commit();
  assertTrue("blob data not committed",fs.exists(dataFile));
  assertEquals("BlobStore dir was created with wrong permissions",HdfsBlobStoreFile.BLOBSTORE_FILE_PERMISSION,fs.getFileStatus(dataFile).getPermission());
  assertTrue("key doesn't exist but should",hbs.exists(validKey));
  pfile=hbs.write(validKey2,false);
  pfile.setMetadata(meta);
  OutputStream ios2=pfile.getOutputStream();
  ios2.write(testString2.getBytes(Charset.forName("UTF-8")));
  ios2.close();
  pfile.commit();
  Path dataFile2=new Path(new Path(fullKeyDir,validKey2),BLOBSTORE_DATA);
  assertTrue("blob data not committed",fs.exists(dataFile2));
  assertEquals("BlobStore dir was created with wrong permissions",HdfsBlobStoreFile.BLOBSTORE_FILE_PERMISSION,fs.getFileStatus(dataFile2).getPermission());
  assertTrue("key doesn't exist but should",hbs.exists(validKey2));
  keys=hbs.listKeys();
  int total=0;
  boolean key1Found=false;
  boolean key2Found=false;
  while (keys.hasNext()) {
    total++;
    String key=keys.next();
    if (key.equals(validKey)) {
      key1Found=true;
    }
 else     if (key.equals(validKey2)) {
      key2Found=true;
    }
 else {
      fail("Found key that wasn't expected: " + key);
    }
  }
  assertEquals("number of keys is wrong",2,total);
  assertTrue("blobstore missing key1",key1Found);
  assertTrue("blobstore missing key2",key2Found);
  readpFile=hbs.read(validKey);
  readString=IOUtils.toString(readpFile.getInputStream(),"UTF-8");
  assertEquals("string read from blob doesn't match",testString,readString);
  readpFile=hbs.read(validKey2);
  readString=IOUtils.toString(readpFile.getInputStream(),"UTF-8");
  assertEquals("string read from blob doesn't match",testString2,readString);
  hbs.deleteKey(validKey);
  assertFalse("key not deleted",hbs.exists(validKey));
  hbs.deleteKey(validKey2);
  assertFalse("key not deleted",hbs.exists(validKey2));
}
