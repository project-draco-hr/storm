{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.MAP) {
{
          TMap _map101=iprot.readMapBegin();
          this.emitted=new HashMap<String,Map<Integer,Long>>(2 * _map101.size);
          for (int _i102=0; _i102 < _map101.size; ++_i102) {
            String _key103;
            Map<Integer,Long> _val104;
            _key103=iprot.readString();
{
              TMap _map105=iprot.readMapBegin();
              _val104=new HashMap<Integer,Long>(2 * _map105.size);
              for (int _i106=0; _i106 < _map105.size; ++_i106) {
                int _key107;
                long _val108;
                _key107=iprot.readI32();
                _val108=iprot.readI64();
                _val104.put(_key107,_val108);
              }
              iprot.readMapEnd();
            }
            this.emitted.put(_key103,_val104);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.MAP) {
{
      TMap _map109=iprot.readMapBegin();
      this.transferred=new HashMap<String,Map<Integer,Long>>(2 * _map109.size);
      for (int _i110=0; _i110 < _map109.size; ++_i110) {
        String _key111;
        Map<Integer,Long> _val112;
        _key111=iprot.readString();
{
          TMap _map113=iprot.readMapBegin();
          _val112=new HashMap<Integer,Long>(2 * _map113.size);
          for (int _i114=0; _i114 < _map113.size; ++_i114) {
            int _key115;
            long _val116;
            _key115=iprot.readI32();
            _val116=iprot.readI64();
            _val112.put(_key115,_val116);
          }
          iprot.readMapEnd();
        }
        this.transferred.put(_key111,_val112);
      }
      iprot.readMapEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRUCT) {
this.specific=new TaskSpecificStats();
this.specific.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
