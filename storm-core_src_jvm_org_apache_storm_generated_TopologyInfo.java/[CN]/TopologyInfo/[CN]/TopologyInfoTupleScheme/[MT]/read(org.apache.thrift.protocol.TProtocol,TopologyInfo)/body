{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.id=iprot.readString();
  struct.set_id_isSet(true);
  struct.name=iprot.readString();
  struct.set_name_isSet(true);
  struct.uptime_secs=iprot.readI32();
  struct.set_uptime_secs_isSet(true);
{
    org.apache.thrift.protocol.TList _list354=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.executors=new ArrayList<ExecutorSummary>(_list354.size);
    ExecutorSummary _elem355;
    for (int _i356=0; _i356 < _list354.size; ++_i356) {
      _elem355=new ExecutorSummary();
      _elem355.read(iprot);
      struct.executors.add(_elem355);
    }
  }
  struct.set_executors_isSet(true);
  struct.status=iprot.readString();
  struct.set_status_isSet(true);
{
    org.apache.thrift.protocol.TMap _map357=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
    struct.errors=new HashMap<String,List<ErrorInfo>>(2 * _map357.size);
    String _key358;
    List<ErrorInfo> _val359;
    for (int _i360=0; _i360 < _map357.size; ++_i360) {
      _key358=iprot.readString();
{
        org.apache.thrift.protocol.TList _list361=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
        _val359=new ArrayList<ErrorInfo>(_list361.size);
        ErrorInfo _elem362;
        for (int _i363=0; _i363 < _list361.size; ++_i363) {
          _elem362=new ErrorInfo();
          _elem362.read(iprot);
          _val359.add(_elem362);
        }
      }
      struct.errors.put(_key358,_val359);
    }
  }
  struct.set_errors_isSet(true);
  BitSet incoming=iprot.readBitSet(10);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map364=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.component_debug=new HashMap<String,DebugOptions>(2 * _map364.size);
      String _key365;
      DebugOptions _val366;
      for (int _i367=0; _i367 < _map364.size; ++_i367) {
        _key365=iprot.readString();
        _val366=new DebugOptions();
        _val366.read(iprot);
        struct.component_debug.put(_key365,_val366);
      }
    }
    struct.set_component_debug_isSet(true);
  }
  if (incoming.get(1)) {
    struct.sched_status=iprot.readString();
    struct.set_sched_status_isSet(true);
  }
  if (incoming.get(2)) {
    struct.owner=iprot.readString();
    struct.set_owner_isSet(true);
  }
  if (incoming.get(3)) {
    struct.replication_count=iprot.readI32();
    struct.set_replication_count_isSet(true);
  }
  if (incoming.get(4)) {
    struct.requested_memonheap=iprot.readDouble();
    struct.set_requested_memonheap_isSet(true);
  }
  if (incoming.get(5)) {
    struct.requested_memoffheap=iprot.readDouble();
    struct.set_requested_memoffheap_isSet(true);
  }
  if (incoming.get(6)) {
    struct.requested_cpu=iprot.readDouble();
    struct.set_requested_cpu_isSet(true);
  }
  if (incoming.get(7)) {
    struct.assigned_memonheap=iprot.readDouble();
    struct.set_assigned_memonheap_isSet(true);
  }
  if (incoming.get(8)) {
    struct.assigned_memoffheap=iprot.readDouble();
    struct.set_assigned_memoffheap_isSet(true);
  }
  if (incoming.get(9)) {
    struct.assigned_cpu=iprot.readDouble();
    struct.set_assigned_cpu_isSet(true);
  }
}
