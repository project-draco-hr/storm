{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map292=iprot.readMapBegin();
          struct.emitted=new HashMap<String,Map<String,Long>>(2 * _map292.size);
          String _key293;
          Map<String,Long> _val294;
          for (int _i295=0; _i295 < _map292.size; ++_i295) {
            _key293=iprot.readString();
{
              org.apache.thrift.protocol.TMap _map296=iprot.readMapBegin();
              _val294=new HashMap<String,Long>(2 * _map296.size);
              String _key297;
              long _val298;
              for (int _i299=0; _i299 < _map296.size; ++_i299) {
                _key297=iprot.readString();
                _val298=iprot.readI64();
                _val294.put(_key297,_val298);
              }
              iprot.readMapEnd();
            }
            struct.emitted.put(_key293,_val294);
          }
          iprot.readMapEnd();
        }
        struct.set_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map300=iprot.readMapBegin();
      struct.transferred=new HashMap<String,Map<String,Long>>(2 * _map300.size);
      String _key301;
      Map<String,Long> _val302;
      for (int _i303=0; _i303 < _map300.size; ++_i303) {
        _key301=iprot.readString();
{
          org.apache.thrift.protocol.TMap _map304=iprot.readMapBegin();
          _val302=new HashMap<String,Long>(2 * _map304.size);
          String _key305;
          long _val306;
          for (int _i307=0; _i307 < _map304.size; ++_i307) {
            _key305=iprot.readString();
            _val306=iprot.readI64();
            _val302.put(_key305,_val306);
          }
          iprot.readMapEnd();
        }
        struct.transferred.put(_key301,_val302);
      }
      iprot.readMapEnd();
    }
    struct.set_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.specific=new ExecutorSpecificStats();
struct.specific.read(iprot);
struct.set_specific_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.rate=iprot.readDouble();
struct.set_rate_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
