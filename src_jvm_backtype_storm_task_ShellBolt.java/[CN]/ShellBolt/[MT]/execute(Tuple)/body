{
  long genId=MessageId.generateId();
  _inputs.put(genId,input);
  try {
    JSONObject obj=new JSONObject();
    obj.put("id",genId);
    obj.put("comp",input.getSourceComponent());
    obj.put("stream",input.getSourceStreamId());
    obj.put("task",input.getSourceTask());
    obj.put("tuple",input.getValues());
    sendToSubprocess(obj.toString());
    while (true) {
      String line="";
      while (true) {
        String subline=_processout.readLine();
        if (subline == null)         throw new RuntimeException("Pipe to subprocess seems to be broken!");
        if (subline.equals("sync")) {
          line=subline;
          break;
        }
        if (subline.equals("end")) {
          break;
        }
        if (line.length() != 0) {
          line+="\n";
        }
        line+=subline;
      }
      if (line.equals("sync")) {
        break;
      }
 else {
        Map action=(Map)JSONValue.parse(line);
        String command=(String)action.get("command");
        if (command.equals("ack")) {
          Long id=(Long)action.get("id");
          Tuple acked=_inputs.remove(id);
          if (acked == null) {
            throw new RuntimeException("Acked a non-existent or already acked/failed id: " + id);
          }
          _collector.ack(acked);
        }
 else         if (command.equals("fail")) {
          Long id=(Long)action.get("id");
          Tuple failed=_inputs.remove(id);
          if (failed == null) {
            throw new RuntimeException("Failed a non-existent or already acked/failed id: " + id);
          }
          _collector.fail(failed);
        }
 else         if (command.equals("log")) {
          String msg=(String)action.get("msg");
          LOG.info("Shell msg: " + msg);
        }
 else         if (command.equals("emit")) {
          Long stream=(Long)action.get("stream");
          if (stream == null)           stream=(long)Utils.DEFAULT_STREAM_ID;
          Long task=(Long)action.get("task");
          List<Object> tuple=(List)action.get("tuple");
          List<Tuple> anchors=new ArrayList<Tuple>();
          Object anchorObj=action.get("anchors");
          if (anchorObj != null) {
            if (anchorObj instanceof Long) {
              anchorObj=Arrays.asList(anchorObj);
            }
            for (            Object o : (List)anchorObj) {
              anchors.add(_inputs.get((Long)o));
            }
          }
          if (task == null) {
            List<Integer> outtasks=_collector.emit((int)stream.longValue(),anchors,tuple);
            sendToSubprocess(JSONValue.toJSONString(outtasks));
          }
 else {
            _collector.emitDirect((int)task.longValue(),(int)stream.longValue(),anchors,tuple);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Error during multilang processing",e);
  }
}
