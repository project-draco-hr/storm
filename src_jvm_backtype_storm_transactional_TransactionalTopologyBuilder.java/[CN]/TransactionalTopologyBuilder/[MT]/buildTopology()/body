{
  String coordinator=_spoutId + "/coordinator";
  TopologyBuilder builder=new TopologyBuilder();
  SpoutDeclarer declarer=builder.setSpout(coordinator,new TransactionalSpoutCoordinator(_spout));
  for (  Map conf : _spoutConfs) {
    declarer.addConfigurations(conf);
  }
  declarer.addConfiguration(Config.TOPOLOGY_TRANSACTIONAL_ID,_id);
  builder.setBolt(_spoutId,new CoordinatedBolt(new TransactionalSpoutBatchExecutor(_spout),null,null),_spoutParallelism).allGrouping(coordinator,TransactionalSpoutCoordinator.TRANSACTION_BATCH_STREAM_ID).addConfiguration(Config.TOPOLOGY_TRANSACTIONAL_ID,_id);
  for (  String id : _bolts.keySet()) {
    Component component=_bolts.get(id);
    Map<String,SourceArgs> coordinatedArgs=new HashMap<String,SourceArgs>();
    for (    String c : componentBoltSubscriptions(component)) {
      coordinatedArgs.put(c,SourceArgs.all());
    }
    IdStreamSpec idSpec=null;
    if (component.committer) {
      idSpec=IdStreamSpec.makeDetectSpec(coordinator,TransactionalSpoutCoordinator.TRANSACTION_COMMIT_STREAM_ID);
    }
    BoltDeclarer input=builder.setBolt(id,new CoordinatedBolt(component.bolt,coordinatedArgs,idSpec),component.parallelism);
    for (    Map conf : component.componentConfs) {
      input.addConfigurations(conf);
    }
    for (    String c : componentBoltSubscriptions(component)) {
      input.directGrouping(c,Constants.COORDINATED_STREAM_ID);
    }
    for (    InputDeclaration d : component.declarations) {
      d.declare(input);
    }
    if (component.committer) {
      input.allGrouping(coordinator,TransactionalSpoutCoordinator.TRANSACTION_COMMIT_STREAM_ID);
    }
  }
  return builder.createTopology();
}
