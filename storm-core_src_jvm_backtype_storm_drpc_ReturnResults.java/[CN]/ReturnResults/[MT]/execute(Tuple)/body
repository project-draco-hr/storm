{
  String result=(String)input.getValue(0);
  String returnInfo=(String)input.getValue(1);
  if (returnInfo != null) {
    Map retMap=(Map)JSONValue.parse(returnInfo);
    final String host=(String)retMap.get("host");
    final int port=Utils.getInt(retMap.get("port"));
    String id=(String)retMap.get("id");
    DistributedRPCInvocations.Iface client;
    if (local) {
      client=(DistributedRPCInvocations.Iface)ServiceRegistry.getService(host);
    }
 else {
      List server=new ArrayList(){
{
          add(host);
          add(port);
        }
      }
;
      if (!_clients.containsKey(server)) {
        try {
          _clients.put(server,new DRPCInvocationsClient(_conf,host,port));
        }
 catch (        TTransportException ex) {
          throw new RuntimeException(ex);
        }
      }
      client=_clients.get(server);
    }
    try {
      client.result(id,result);
      _collector.ack(input);
    }
 catch (    TException e) {
      LOG.error("Failed to return results to DRPC server",e);
      _collector.fail(input);
      if (client instanceof DRPCInvocationsClient) {
        try {
          LOG.info("reconnecting... ");
          ((DRPCInvocationsClient)client).reconnectClient();
        }
 catch (        TException e2) {
          throw new RuntimeException(e2);
        }
      }
    }
catch (    AuthorizationException aze) {
      LOG.error("Not authorized to return results to DRPC server",aze);
      _collector.fail(input);
      if (client instanceof DRPCInvocationsClient) {
        try {
          LOG.info("reconnecting... ");
          ((DRPCInvocationsClient)client).reconnectClient();
        }
 catch (        TException e2) {
          throw new RuntimeException(e2);
        }
      }
    }
  }
}
