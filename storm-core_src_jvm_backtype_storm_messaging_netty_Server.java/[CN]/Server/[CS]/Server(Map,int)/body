{
  this.storm_conf=storm_conf;
  this.port=port;
  _ser=new KryoValuesSerializer(storm_conf);
  queueCount=Utils.getInt(storm_conf.get(Config.WORKER_RECEIVER_THREAD_COUNT),1);
  roundRobinQueueId=0;
  taskToQueueId=new HashMap<>();
  message_queue=new LinkedBlockingQueue[queueCount];
  pendingMessages=new AtomicInteger[queueCount];
  for (int i=0; i < queueCount; i++) {
    message_queue[i]=new LinkedBlockingQueue<>();
    pendingMessages[i]=new AtomicInteger(0);
  }
  int buffer_size=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_BUFFER_SIZE));
  int backlog=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_SOCKET_BACKLOG),500);
  int maxWorkers=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_SERVER_WORKER_THREADS));
  ThreadFactory bossFactory=new NettyRenameThreadFactory(netty_name() + "-boss");
  ThreadFactory workerFactory=new NettyRenameThreadFactory(netty_name() + "-worker");
  if (maxWorkers > 0) {
    factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory),maxWorkers);
  }
 else {
    factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory));
  }
  LOG.info("Create Netty Server " + netty_name() + ", buffer_size: "+ buffer_size+ ", maxWorkers: "+ maxWorkers);
  bootstrap=new ServerBootstrap(factory);
  bootstrap.setOption("child.tcpNoDelay",true);
  bootstrap.setOption("child.receiveBufferSize",buffer_size);
  bootstrap.setOption("child.keepAlive",true);
  bootstrap.setOption("backlog",backlog);
  bootstrap.setPipelineFactory(new StormServerPipelineFactory(this));
  Channel channel=bootstrap.bind(new InetSocketAddress(port));
  allChannels.add(channel);
}
