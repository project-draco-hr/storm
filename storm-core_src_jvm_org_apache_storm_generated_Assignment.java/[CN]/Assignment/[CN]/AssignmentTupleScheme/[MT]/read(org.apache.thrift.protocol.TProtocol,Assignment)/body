{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.master_code_dir=iprot.readString();
  struct.set_master_code_dir_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map652=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.node_host=new HashMap<String,String>(2 * _map652.size);
      String _key653;
      String _val654;
      for (int _i655=0; _i655 < _map652.size; ++_i655) {
        _key653=iprot.readString();
        _val654=iprot.readString();
        struct.node_host.put(_key653,_val654);
      }
    }
    struct.set_node_host_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map656=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map656.size);
      List<Long> _key657;
      NodeInfo _val658;
      for (int _i659=0; _i659 < _map656.size; ++_i659) {
{
          org.apache.thrift.protocol.TList _list660=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key657=new ArrayList<Long>(_list660.size);
          long _elem661;
          for (int _i662=0; _i662 < _list660.size; ++_i662) {
            _elem661=iprot.readI64();
            _key657.add(_elem661);
          }
        }
        _val658=new NodeInfo();
        _val658.read(iprot);
        struct.executor_node_port.put(_key657,_val658);
      }
    }
    struct.set_executor_node_port_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map663=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map663.size);
      List<Long> _key664;
      long _val665;
      for (int _i666=0; _i666 < _map663.size; ++_i666) {
{
          org.apache.thrift.protocol.TList _list667=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key664=new ArrayList<Long>(_list667.size);
          long _elem668;
          for (int _i669=0; _i669 < _list667.size; ++_i669) {
            _elem668=iprot.readI64();
            _key664.add(_elem668);
          }
        }
        _val665=iprot.readI64();
        struct.executor_start_time_secs.put(_key664,_val665);
      }
    }
    struct.set_executor_start_time_secs_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map670=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map670.size);
      NodeInfo _key671;
      WorkerResources _val672;
      for (int _i673=0; _i673 < _map670.size; ++_i673) {
        _key671=new NodeInfo();
        _key671.read(iprot);
        _val672=new WorkerResources();
        _val672.read(iprot);
        struct.worker_resources.put(_key671,_val672);
      }
    }
    struct.set_worker_resources_isSet(true);
  }
}
