{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.master_code_dir=iprot.readString();
  struct.set_master_code_dir_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map632=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.node_host=new HashMap<String,String>(2 * _map632.size);
      String _key633;
      String _val634;
      for (int _i635=0; _i635 < _map632.size; ++_i635) {
        _key633=iprot.readString();
        _val634=iprot.readString();
        struct.node_host.put(_key633,_val634);
      }
    }
    struct.set_node_host_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map636=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map636.size);
      List<Long> _key637;
      NodeInfo _val638;
      for (int _i639=0; _i639 < _map636.size; ++_i639) {
{
          org.apache.thrift.protocol.TList _list640=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key637=new ArrayList<Long>(_list640.size);
          long _elem641;
          for (int _i642=0; _i642 < _list640.size; ++_i642) {
            _elem641=iprot.readI64();
            _key637.add(_elem641);
          }
        }
        _val638=new NodeInfo();
        _val638.read(iprot);
        struct.executor_node_port.put(_key637,_val638);
      }
    }
    struct.set_executor_node_port_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map643=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map643.size);
      List<Long> _key644;
      long _val645;
      for (int _i646=0; _i646 < _map643.size; ++_i646) {
{
          org.apache.thrift.protocol.TList _list647=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key644=new ArrayList<Long>(_list647.size);
          long _elem648;
          for (int _i649=0; _i649 < _list647.size; ++_i649) {
            _elem648=iprot.readI64();
            _key644.add(_elem648);
          }
        }
        _val645=iprot.readI64();
        struct.executor_start_time_secs.put(_key644,_val645);
      }
    }
    struct.set_executor_start_time_secs_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map650=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map650.size);
      NodeInfo _key651;
      WorkerResources _val652;
      for (int _i653=0; _i653 < _map650.size; ++_i653) {
        _key651=new NodeInfo();
        _key651.read(iprot);
        _val652=new WorkerResources();
        _val652.read(iprot);
        struct.worker_resources.put(_key651,_val652);
      }
    }
    struct.set_worker_resources_isSet(true);
  }
}
