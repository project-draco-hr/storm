{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.master_code_dir=iprot.readString();
        struct.set_master_code_dir_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map598=iprot.readMapBegin();
      struct.node_host=new HashMap<String,String>(2 * _map598.size);
      String _key599;
      String _val600;
      for (int _i601=0; _i601 < _map598.size; ++_i601) {
        _key599=iprot.readString();
        _val600=iprot.readString();
        struct.node_host.put(_key599,_val600);
      }
      iprot.readMapEnd();
    }
    struct.set_node_host_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map602=iprot.readMapBegin();
  struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map602.size);
  List<Long> _key603;
  NodeInfo _val604;
  for (int _i605=0; _i605 < _map602.size; ++_i605) {
{
      org.apache.thrift.protocol.TList _list606=iprot.readListBegin();
      _key603=new ArrayList<Long>(_list606.size);
      long _elem607;
      for (int _i608=0; _i608 < _list606.size; ++_i608) {
        _elem607=iprot.readI64();
        _key603.add(_elem607);
      }
      iprot.readListEnd();
    }
    _val604=new NodeInfo();
    _val604.read(iprot);
    struct.executor_node_port.put(_key603,_val604);
  }
  iprot.readMapEnd();
}
struct.set_executor_node_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map609=iprot.readMapBegin();
struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map609.size);
List<Long> _key610;
long _val611;
for (int _i612=0; _i612 < _map609.size; ++_i612) {
{
  org.apache.thrift.protocol.TList _list613=iprot.readListBegin();
  _key610=new ArrayList<Long>(_list613.size);
  long _elem614;
  for (int _i615=0; _i615 < _list613.size; ++_i615) {
    _elem614=iprot.readI64();
    _key610.add(_elem614);
  }
  iprot.readListEnd();
}
_val611=iprot.readI64();
struct.executor_start_time_secs.put(_key610,_val611);
}
iprot.readMapEnd();
}
struct.set_executor_start_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map616=iprot.readMapBegin();
struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map616.size);
NodeInfo _key617;
WorkerResources _val618;
for (int _i619=0; _i619 < _map616.size; ++_i619) {
_key617=new NodeInfo();
_key617.read(iprot);
_val618=new WorkerResources();
_val618.read(iprot);
struct.worker_resources.put(_key617,_val618);
}
iprot.readMapEnd();
}
struct.set_worker_resources_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
