{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.master_code_dir=iprot.readString();
        struct.set_master_code_dir_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map618=iprot.readMapBegin();
      struct.node_host=new HashMap<String,String>(2 * _map618.size);
      String _key619;
      String _val620;
      for (int _i621=0; _i621 < _map618.size; ++_i621) {
        _key619=iprot.readString();
        _val620=iprot.readString();
        struct.node_host.put(_key619,_val620);
      }
      iprot.readMapEnd();
    }
    struct.set_node_host_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map622=iprot.readMapBegin();
  struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map622.size);
  List<Long> _key623;
  NodeInfo _val624;
  for (int _i625=0; _i625 < _map622.size; ++_i625) {
{
      org.apache.thrift.protocol.TList _list626=iprot.readListBegin();
      _key623=new ArrayList<Long>(_list626.size);
      long _elem627;
      for (int _i628=0; _i628 < _list626.size; ++_i628) {
        _elem627=iprot.readI64();
        _key623.add(_elem627);
      }
      iprot.readListEnd();
    }
    _val624=new NodeInfo();
    _val624.read(iprot);
    struct.executor_node_port.put(_key623,_val624);
  }
  iprot.readMapEnd();
}
struct.set_executor_node_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map629=iprot.readMapBegin();
struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map629.size);
List<Long> _key630;
long _val631;
for (int _i632=0; _i632 < _map629.size; ++_i632) {
{
  org.apache.thrift.protocol.TList _list633=iprot.readListBegin();
  _key630=new ArrayList<Long>(_list633.size);
  long _elem634;
  for (int _i635=0; _i635 < _list633.size; ++_i635) {
    _elem634=iprot.readI64();
    _key630.add(_elem634);
  }
  iprot.readListEnd();
}
_val631=iprot.readI64();
struct.executor_start_time_secs.put(_key630,_val631);
}
iprot.readMapEnd();
}
struct.set_executor_start_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map636=iprot.readMapBegin();
struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map636.size);
NodeInfo _key637;
WorkerResources _val638;
for (int _i639=0; _i639 < _map636.size; ++_i639) {
_key637=new NodeInfo();
_key637.read(iprot);
_val638=new WorkerResources();
_val638.read(iprot);
struct.worker_resources.put(_key637,_val638);
}
iprot.readMapEnd();
}
struct.set_worker_resources_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
