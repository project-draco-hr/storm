{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map344=iprot.readMapBegin();
          struct.window_to_emitted=new HashMap<String,Long>(2 * _map344.size);
          String _key345;
          long _val346;
          for (int _i347=0; _i347 < _map344.size; ++_i347) {
            _key345=iprot.readString();
            _val346=iprot.readI64();
            struct.window_to_emitted.put(_key345,_val346);
          }
          iprot.readMapEnd();
        }
        struct.set_window_to_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map348=iprot.readMapBegin();
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map348.size);
      String _key349;
      long _val350;
      for (int _i351=0; _i351 < _map348.size; ++_i351) {
        _key349=iprot.readString();
        _val350=iprot.readI64();
        struct.window_to_transferred.put(_key349,_val350);
      }
      iprot.readMapEnd();
    }
    struct.set_window_to_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map352=iprot.readMapBegin();
  struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map352.size);
  String _key353;
  double _val354;
  for (int _i355=0; _i355 < _map352.size; ++_i355) {
    _key353=iprot.readString();
    _val354=iprot.readDouble();
    struct.window_to_complete_latencies_ms.put(_key353,_val354);
  }
  iprot.readMapEnd();
}
struct.set_window_to_complete_latencies_ms_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map356=iprot.readMapBegin();
struct.window_to_acked=new HashMap<String,Long>(2 * _map356.size);
String _key357;
long _val358;
for (int _i359=0; _i359 < _map356.size; ++_i359) {
_key357=iprot.readString();
_val358=iprot.readI64();
struct.window_to_acked.put(_key357,_val358);
}
iprot.readMapEnd();
}
struct.set_window_to_acked_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map360=iprot.readMapBegin();
struct.window_to_failed=new HashMap<String,Long>(2 * _map360.size);
String _key361;
long _val362;
for (int _i363=0; _i363 < _map360.size; ++_i363) {
_key361=iprot.readString();
_val362=iprot.readI64();
struct.window_to_failed.put(_key361,_val362);
}
iprot.readMapEnd();
}
struct.set_window_to_failed_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
