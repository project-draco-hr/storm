{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 513:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map316=iprot.readMapBegin();
          struct.window_to_emitted=new HashMap<String,Long>(2 * _map316.size);
          String _key317;
          long _val318;
          for (int _i319=0; _i319 < _map316.size; ++_i319) {
            _key317=iprot.readString();
            _val318=iprot.readI64();
            struct.window_to_emitted.put(_key317,_val318);
          }
          iprot.readMapEnd();
        }
        struct.set_window_to_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 514:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map320=iprot.readMapBegin();
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map320.size);
      String _key321;
      long _val322;
      for (int _i323=0; _i323 < _map320.size; ++_i323) {
        _key321=iprot.readString();
        _val322=iprot.readI64();
        struct.window_to_transferred.put(_key321,_val322);
      }
      iprot.readMapEnd();
    }
    struct.set_window_to_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 515:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map324=iprot.readMapBegin();
  struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map324.size);
  String _key325;
  double _val326;
  for (int _i327=0; _i327 < _map324.size; ++_i327) {
    _key325=iprot.readString();
    _val326=iprot.readDouble();
    struct.window_to_complete_latencies_ms.put(_key325,_val326);
  }
  iprot.readMapEnd();
}
struct.set_window_to_complete_latencies_ms_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 516:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map328=iprot.readMapBegin();
struct.window_to_acked=new HashMap<String,Long>(2 * _map328.size);
String _key329;
long _val330;
for (int _i331=0; _i331 < _map328.size; ++_i331) {
_key329=iprot.readString();
_val330=iprot.readI64();
struct.window_to_acked.put(_key329,_val330);
}
iprot.readMapEnd();
}
struct.set_window_to_acked_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 517:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map332=iprot.readMapBegin();
struct.window_to_failed=new HashMap<String,Long>(2 * _map332.size);
String _key333;
long _val334;
for (int _i335=0; _i335 < _map332.size; ++_i335) {
_key333=iprot.readString();
_val334=iprot.readI64();
struct.window_to_failed.put(_key333,_val334);
}
iprot.readMapEnd();
}
struct.set_window_to_failed_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
