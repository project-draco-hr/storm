{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map334=iprot.readMapBegin();
          struct.window_to_emitted=new HashMap<String,Long>(2 * _map334.size);
          String _key335;
          long _val336;
          for (int _i337=0; _i337 < _map334.size; ++_i337) {
            _key335=iprot.readString();
            _val336=iprot.readI64();
            struct.window_to_emitted.put(_key335,_val336);
          }
          iprot.readMapEnd();
        }
        struct.set_window_to_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map338=iprot.readMapBegin();
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map338.size);
      String _key339;
      long _val340;
      for (int _i341=0; _i341 < _map338.size; ++_i341) {
        _key339=iprot.readString();
        _val340=iprot.readI64();
        struct.window_to_transferred.put(_key339,_val340);
      }
      iprot.readMapEnd();
    }
    struct.set_window_to_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map342=iprot.readMapBegin();
  struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map342.size);
  String _key343;
  double _val344;
  for (int _i345=0; _i345 < _map342.size; ++_i345) {
    _key343=iprot.readString();
    _val344=iprot.readDouble();
    struct.window_to_complete_latencies_ms.put(_key343,_val344);
  }
  iprot.readMapEnd();
}
struct.set_window_to_complete_latencies_ms_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map346=iprot.readMapBegin();
struct.window_to_acked=new HashMap<String,Long>(2 * _map346.size);
String _key347;
long _val348;
for (int _i349=0; _i349 < _map346.size; ++_i349) {
_key347=iprot.readString();
_val348=iprot.readI64();
struct.window_to_acked.put(_key347,_val348);
}
iprot.readMapEnd();
}
struct.set_window_to_acked_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map350=iprot.readMapBegin();
struct.window_to_failed=new HashMap<String,Long>(2 * _map350.size);
String _key351;
long _val352;
for (int _i353=0; _i353 < _map350.size; ++_i353) {
_key351=iprot.readString();
_val352=iprot.readI64();
struct.window_to_failed.put(_key351,_val352);
}
iprot.readMapEnd();
}
struct.set_window_to_failed_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
