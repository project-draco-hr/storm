{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map374=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_emitted=new HashMap<String,Long>(2 * _map374.size);
      String _key375;
      long _val376;
      for (int _i377=0; _i377 < _map374.size; ++_i377) {
        _key375=iprot.readString();
        _val376=iprot.readI64();
        struct.window_to_emitted.put(_key375,_val376);
      }
    }
    struct.set_window_to_emitted_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map378=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map378.size);
      String _key379;
      long _val380;
      for (int _i381=0; _i381 < _map378.size; ++_i381) {
        _key379=iprot.readString();
        _val380=iprot.readI64();
        struct.window_to_transferred.put(_key379,_val380);
      }
    }
    struct.set_window_to_transferred_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map382=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map382.size);
      String _key383;
      double _val384;
      for (int _i385=0; _i385 < _map382.size; ++_i385) {
        _key383=iprot.readString();
        _val384=iprot.readDouble();
        struct.window_to_complete_latencies_ms.put(_key383,_val384);
      }
    }
    struct.set_window_to_complete_latencies_ms_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map386=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_acked=new HashMap<String,Long>(2 * _map386.size);
      String _key387;
      long _val388;
      for (int _i389=0; _i389 < _map386.size; ++_i389) {
        _key387=iprot.readString();
        _val388=iprot.readI64();
        struct.window_to_acked.put(_key387,_val388);
      }
    }
    struct.set_window_to_acked_isSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map390=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_failed=new HashMap<String,Long>(2 * _map390.size);
      String _key391;
      long _val392;
      for (int _i393=0; _i393 < _map390.size; ++_i393) {
        _key391=iprot.readString();
        _val392=iprot.readI64();
        struct.window_to_failed.put(_key391,_val392);
      }
    }
    struct.set_window_to_failed_isSet(true);
  }
}
