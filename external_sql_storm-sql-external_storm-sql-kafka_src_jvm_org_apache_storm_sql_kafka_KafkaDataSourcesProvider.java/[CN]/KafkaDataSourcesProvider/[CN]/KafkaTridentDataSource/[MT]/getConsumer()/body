{
  Preconditions.checkNotNull(producerProperties,"Writable Kafka Table " + topic + " must contain producer config");
  Properties props=new Properties();
  try {
    ObjectMapper mapper=new ObjectMapper();
    @SuppressWarnings("unchecked") HashMap<String,Object> map=mapper.readValue(producerProperties,HashMap.class);
    @SuppressWarnings("unchecked") HashMap<String,Object> producerConfig=(HashMap<String,Object>)map.get("producer");
    props.putAll(producerConfig);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Preconditions.checkState(props.containsKey("bootstrap.servers"),"Writable Kafka Table " + topic + " must contain \"bootstrap.servers\" config");
  JsonSerializer serializer=new JsonSerializer(fields);
  SqlKafkaMapper mapper=new SqlKafkaMapper(primaryKeyIndex,serializer);
  TridentKafkaStateFactory stateFactory=new TridentKafkaStateFactory().withKafkaTopicSelector(new DefaultTopicSelector(topic)).withProducerProperties(props).withTridentTupleToKafkaMapper(mapper);
  TridentKafkaUpdater stateUpdater=new TridentKafkaUpdater();
  return new SimpleSqlTridentConsumer(stateFactory,stateUpdater);
}
