{
  TServerTransport serverTransport=null;
  try {
    TSaslServerTransport.Factory factory=new TSaslServerTransport.Factory();
    serverTransport=new TServerSocket(_port);
    if ((_loginConfigurationFile == null) || (_loginConfigurationFile.length() == 0)) {
      factory.addServerDefinition(AuthUtils.ANONYMOUS,AuthUtils.SERVICE,"localhost",null,null);
      LOG.info("Starting SASL ANONYMOUS server at port:" + _port);
      _server=new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(new SaslProcessor(_processor)).transportFactory(factory).minWorkerThreads(64).maxWorkerThreads(64).protocolFactory(new TBinaryProtocol.Factory()));
    }
 else {
      Configuration auth_conf=AuthUtils.getConfiguration(_loginConfigurationFile);
      CallbackHandler auth_callback_handler=new SaslServerCallbackHandler(auth_conf);
      Login login=new Login(AuthUtils.LoginContextServer,auth_callback_handler);
      Subject subject=login.getSubject();
      if (!subject.getPrivateCredentials(KerberosTicket.class).isEmpty()) {
        String principal=AuthUtils.get(auth_conf,AuthUtils.LoginContextServer,"principal");
        LOG.debug("principal:" + principal);
        KerberosName serviceKerberosName=new KerberosName(principal);
        String serviceName=serviceKerberosName.getServiceName();
        String hostName=serviceKerberosName.getHostName();
        Map<String,String> props=new TreeMap<String,String>();
        props.put(Sasl.QOP,"auth");
        props.put(Sasl.SERVER_AUTH,"false");
        factory.addServerDefinition(AuthUtils.KERBEROS,serviceName,hostName,props,auth_callback_handler);
        LOG.info("Starting KERBEROS server at port:" + _port);
        TUGIAssumingTransportFactory wrapFactory=new TUGIAssumingTransportFactory(factory,subject);
        _server=new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(new SaslProcessor(_processor)).minWorkerThreads(64).maxWorkerThreads(64).transportFactory(wrapFactory).protocolFactory(new TBinaryProtocol.Factory()));
      }
 else {
        factory.addServerDefinition(AuthUtils.DIGEST,AuthUtils.SERVICE,"localhost",null,auth_callback_handler);
        LOG.info("Starting DIGEST server at port:" + _port);
        _server=new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(new SaslProcessor(_processor)).minWorkerThreads(64).maxWorkerThreads(64).transportFactory(factory).protocolFactory(new TBinaryProtocol.Factory()));
      }
    }
    _server.serve();
  }
 catch (  Exception ex) {
    LOG.error("ThriftServer is being stopped due to: " + ex,ex);
    if (_server != null)     _server.stop();
    System.exit(1);
  }
}
