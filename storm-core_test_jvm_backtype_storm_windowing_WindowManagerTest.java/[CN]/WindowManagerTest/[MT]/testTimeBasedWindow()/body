{
  EvictionPolicy<Integer> evictionPolicy=new TimeEvictionPolicy<Integer>(new Duration(1,TimeUnit.SECONDS).value);
  windowManager.setEvictionPolicy(evictionPolicy);
  windowManager.setTriggerPolicy(new TimeTriggerPolicy<Integer>(new Duration(1,TimeUnit.DAYS).value,windowManager,evictionPolicy));
  long now=System.currentTimeMillis();
  for (  int i : seq(1,50)) {
    windowManager.add(i,now - 1000);
  }
  for (  int i : seq(51,WindowManager.EXPIRE_EVENTS_THRESHOLD)) {
    windowManager.add(i,now);
  }
  assertEquals(50,listener.onExpiryEvents.size());
  for (  int i : seq(WindowManager.EXPIRE_EVENTS_THRESHOLD + 1,WindowManager.EXPIRE_EVENTS_THRESHOLD + 100)) {
    windowManager.add(i,now - 1000);
  }
  evictionPolicy.setContext(now + 100);
  windowManager.onTrigger();
  assertEquals(100,listener.onExpiryEvents.size());
  assertEquals(seq(WindowManager.EXPIRE_EVENTS_THRESHOLD + 1,WindowManager.EXPIRE_EVENTS_THRESHOLD + 100),listener.onExpiryEvents);
  List<Integer> activationsEvents=seq(51,WindowManager.EXPIRE_EVENTS_THRESHOLD);
  assertEquals(seq(51,WindowManager.EXPIRE_EVENTS_THRESHOLD),listener.onActivationEvents);
  assertEquals(seq(51,WindowManager.EXPIRE_EVENTS_THRESHOLD),listener.onActivationNewEvents);
  List<Integer> expiredList=seq(1,50);
  expiredList.addAll(seq(WindowManager.EXPIRE_EVENTS_THRESHOLD + 1,WindowManager.EXPIRE_EVENTS_THRESHOLD + 100));
  assertEquals(expiredList,listener.onActivationExpiredEvents);
  listener.clear();
  List<Integer> newEvents=seq(WindowManager.EXPIRE_EVENTS_THRESHOLD + 101,WindowManager.EXPIRE_EVENTS_THRESHOLD + 200);
  for (  int i : newEvents) {
    windowManager.add(i,now);
  }
  activationsEvents.addAll(newEvents);
  evictionPolicy.setContext(now + 200);
  windowManager.onTrigger();
  assertTrue(listener.onExpiryEvents.isEmpty());
  assertEquals(activationsEvents,listener.onActivationEvents);
  assertEquals(newEvents,listener.onActivationNewEvents);
}
