{
  int partitions=(Integer)coordinatorMeta;
  TreeMap<Integer,Integer> allocationsMap=Utils.integerDivided(partitions,_numTasks);
  List<Integer> allocations=new ArrayList<Integer>();
  for (  Integer amt : allocationsMap.descendingKeySet()) {
    for (int i=0; i < allocationsMap.get(amt); i++) {
      allocations.add(amt);
    }
  }
  int startPartition=0;
  for (int i=0; i < _index; i++) {
    startPartition+=allocations.get(i);
  }
  for (int i=startPartition; i < startPartition + allocations.get(_index); i+=1) {
    if (!_partitionStates.containsKey(i)) {
      _partitionStates.put(i,new RotatingTransactionalState(_state,"" + i));
    }
    RotatingTransactionalState state=_partitionStates.get(i);
    final int partition=i;
    Object meta=state.getStateOrCreate(tx.getTransactionId(),new RotatingTransactionalState.StateInitializer(){
      @Override public Object init(      BigInteger txid,      Object lastState){
        return _emitter.emitPartitionBatchNew(tx,collector,partition,lastState);
      }
    }
);
    if (meta != null) {
      _emitter.emitPartitionBatch(tx,collector,partition,meta);
    }
  }
}
