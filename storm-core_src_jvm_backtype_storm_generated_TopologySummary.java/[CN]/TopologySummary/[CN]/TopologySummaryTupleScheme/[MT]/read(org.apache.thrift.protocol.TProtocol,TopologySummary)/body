{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.id=iprot.readString();
  struct.set_id_isSet(true);
  struct.name=iprot.readString();
  struct.set_name_isSet(true);
  struct.num_tasks=iprot.readI32();
  struct.set_num_tasks_isSet(true);
  struct.num_executors=iprot.readI32();
  struct.set_num_executors_isSet(true);
  struct.num_workers=iprot.readI32();
  struct.set_num_workers_isSet(true);
  struct.uptime_secs=iprot.readI32();
  struct.set_uptime_secs_isSet(true);
  struct.status=iprot.readString();
  struct.set_status_isSet(true);
  BitSet incoming=iprot.readBitSet(9);
  if (incoming.get(0)) {
    struct.sched_status=iprot.readString();
    struct.set_sched_status_isSet(true);
  }
  if (incoming.get(1)) {
    struct.owner=iprot.readString();
    struct.set_owner_isSet(true);
  }
  if (incoming.get(2)) {
    struct.replication_count=iprot.readI32();
    struct.set_replication_count_isSet(true);
  }
  if (incoming.get(3)) {
    struct.requested_memonheap=iprot.readDouble();
    struct.set_requested_memonheap_isSet(true);
  }
  if (incoming.get(4)) {
    struct.requested_memoffheap=iprot.readDouble();
    struct.set_requested_memoffheap_isSet(true);
  }
  if (incoming.get(5)) {
    struct.requested_cpu=iprot.readDouble();
    struct.set_requested_cpu_isSet(true);
  }
  if (incoming.get(6)) {
    struct.assigned_memonheap=iprot.readDouble();
    struct.set_assigned_memonheap_isSet(true);
  }
  if (incoming.get(7)) {
    struct.assigned_memoffheap=iprot.readDouble();
    struct.set_assigned_memoffheap_isSet(true);
  }
  if (incoming.get(8)) {
    struct.assigned_cpu=iprot.readDouble();
    struct.set_assigned_cpu_isSet(true);
  }
}
