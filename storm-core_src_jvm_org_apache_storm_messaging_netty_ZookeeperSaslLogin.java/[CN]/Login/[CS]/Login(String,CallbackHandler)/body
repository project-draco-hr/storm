{
  this.callbackHandler=callbackHandler;
  login=login(loginContextName);
  this.loginContextName=loginContextName;
  subject=login.getSubject();
  isKrbTicket=!subject.getPrivateCredentials(KerberosTicket.class).isEmpty();
  AppConfigurationEntry entries[]=Configuration.getConfiguration().getAppConfigurationEntry(loginContextName);
  for (  AppConfigurationEntry entry : entries) {
    if (entry.getOptions().get("useTicketCache") != null) {
      String val=(String)entry.getOptions().get("useTicketCache");
      if (val.equals("true")) {
        isUsingTicketCache=true;
      }
    }
    if (entry.getOptions().get("keyTab") != null) {
      keytabFile=(String)entry.getOptions().get("keyTab");
      isUsingKeytab=true;
    }
    if (entry.getOptions().get("principal") != null) {
      principal=(String)entry.getOptions().get("principal");
    }
    break;
  }
  if (!isKrbTicket) {
    return;
  }
  t=new Thread(new Runnable(){
    public void run(){
      LOG.info("TGT refresh thread started.");
      while (true) {
        KerberosTicket tgt=getTGT();
        long now=System.currentTimeMillis();
        long nextRefresh;
        Date nextRefreshDate;
        if (tgt == null) {
          nextRefresh=now + MIN_TIME_BEFORE_RELOGIN;
          nextRefreshDate=new Date(nextRefresh);
          LOG.warn("No TGT found: will try again at " + nextRefreshDate);
        }
 else {
          nextRefresh=getRefreshTime(tgt);
          long expiry=tgt.getEndTime().getTime();
          Date expiryDate=new Date(expiry);
          if ((isUsingTicketCache) && (tgt.getEndTime().equals(tgt.getRenewTill()))) {
            LOG.error("The TGT cannot be renewed beyond the next expiry date: " + expiryDate + "."+ "This process will not be able to authenticate new SASL connections after that "+ "time (for example, it will not be authenticate a new connection with a Zookeeper "+ "Quorum member).  Ask your system administrator to either increase the "+ "'renew until' time by doing : 'modprinc -maxrenewlife "+ principal+ "' within "+ "kadmin, or instead, to generate a keytab for "+ principal+ ". Because the TGT's "+ "expiry cannot be further extended by refreshing, exiting refresh thread now.");
            return;
          }
          if ((nextRefresh > expiry) || ((now + MIN_TIME_BEFORE_RELOGIN) > expiry)) {
            nextRefresh=now;
          }
 else {
            if (nextRefresh < (now + MIN_TIME_BEFORE_RELOGIN)) {
              Date until=new Date(nextRefresh);
              Date newuntil=new Date(now + MIN_TIME_BEFORE_RELOGIN);
              LOG.warn("TGT refresh thread time adjusted from : " + until + " to : "+ newuntil+ " since "+ "the former is sooner than the minimum refresh interval ("+ MIN_TIME_BEFORE_RELOGIN / 1000 + " seconds) from now.");
            }
            nextRefresh=Math.max(nextRefresh,now + MIN_TIME_BEFORE_RELOGIN);
          }
          nextRefreshDate=new Date(nextRefresh);
          if (nextRefresh > expiry) {
            LOG.error("next refresh: " + nextRefreshDate + " is later than expiry "+ expiryDate+ ". This may indicate a clock skew problem. Check that this host and the KDC's "+ "hosts' clocks are in sync. Exiting refresh thread.");
            return;
          }
        }
        if (now == nextRefresh) {
          LOG.info("refreshing now because expiry is before next scheduled refresh time.");
        }
 else         if (now < nextRefresh) {
          Date until=new Date(nextRefresh);
          LOG.info("TGT refresh sleeping until: " + until.toString());
          try {
            Thread.sleep(nextRefresh - now);
          }
 catch (          InterruptedException ie) {
            LOG.warn("TGT renewal thread has been interrupted and will exit.");
            break;
          }
        }
 else {
          LOG.error("nextRefresh:" + nextRefreshDate + " is in the past: exiting refresh thread. Check"+ " clock sync between this host and KDC - (KDC's clock is likely ahead of this host)."+ " Manual intervention will be required for this client to successfully authenticate."+ " Exiting refresh thread.");
          break;
        }
        if (isUsingTicketCache) {
          String cmd="/usr/bin/kinit";
          if (System.getProperty("zookeeper.kinit") != null) {
            cmd=System.getProperty("zookeeper.kinit");
          }
          String kinitArgs="-R";
          int retry=1;
          while (retry >= 0) {
            try {
              LOG.debug("running ticket cache refresh command: " + cmd + " "+ kinitArgs);
              Shell.execCommand(cmd,kinitArgs);
              break;
            }
 catch (            Exception e) {
              if (retry > 0) {
                --retry;
                try {
                  Thread.sleep(10 * 1000);
                }
 catch (                InterruptedException ie) {
                  LOG.error("Interrupted while renewing TGT, exiting Login thread");
                  return;
                }
              }
 else {
                LOG.warn("Could not renew TGT due to problem running shell command: '" + cmd + " "+ kinitArgs+ "'"+ "; exception was:"+ e+ ". Exiting refresh thread.",e);
                return;
              }
            }
          }
        }
        try {
          int retry=1;
          while (retry >= 0) {
            try {
              reLogin();
              break;
            }
 catch (            LoginException le) {
              if (retry > 0) {
                --retry;
                try {
                  Thread.sleep(10 * 1000);
                }
 catch (                InterruptedException e) {
                  LOG.error("Interrupted during login retry after LoginException:",le);
                  throw le;
                }
              }
 else {
                LOG.error("Could not refresh TGT for principal: " + principal + ".",le);
              }
            }
          }
        }
 catch (        LoginException le) {
          LOG.error("Failed to refresh TGT: refresh thread exiting now.",le);
          break;
        }
      }
    }
  }
);
  t.setDaemon(true);
}
