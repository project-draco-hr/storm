{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.topology_id=iprot.readString();
        struct.set_topology_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
    struct.time_stamp=iprot.readI64();
    struct.set_time_stamp_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list680=iprot.readListBegin();
  struct.users=new ArrayList<String>(_list680.size);
  String _elem681;
  for (int _i682=0; _i682 < _list680.size; ++_i682) {
    _elem681=iprot.readString();
    struct.users.add(_elem681);
  }
  iprot.readListEnd();
}
struct.set_users_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list683=iprot.readListBegin();
struct.groups=new ArrayList<String>(_list683.size);
String _elem684;
for (int _i685=0; _i685 < _list683.size; ++_i685) {
_elem684=iprot.readString();
struct.groups.add(_elem684);
}
iprot.readListEnd();
}
struct.set_groups_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
