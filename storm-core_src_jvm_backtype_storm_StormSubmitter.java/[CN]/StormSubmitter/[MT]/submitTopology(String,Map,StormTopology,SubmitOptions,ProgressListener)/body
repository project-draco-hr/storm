{
  if (!Utils.isValidConf(stormConf)) {
    throw new IllegalArgumentException("Storm conf is not valid. Must be json-serializable");
  }
  stormConf=new HashMap(stormConf);
  stormConf.putAll(Utils.readCommandLineOpts());
  Map conf=Utils.readStormConfig();
  conf.putAll(stormConf);
  stormConf.putAll(prepareZookeeperAuthentication(conf));
  Map<String,String> passedCreds=new HashMap<String,String>();
  if (opts != null) {
    Credentials tmpCreds=opts.get_creds();
    if (tmpCreds != null) {
      passedCreds=tmpCreds.get_creds();
    }
  }
  Map<String,String> fullCreds=populateCredentials(conf,passedCreds);
  if (!fullCreds.isEmpty()) {
    if (opts == null) {
      opts=new SubmitOptions(TopologyInitialStatus.ACTIVE);
    }
    opts.set_creds(new Credentials(fullCreds));
  }
  try {
    if (localNimbus != null) {
      LOG.info("Submitting topology " + name + " in local mode");
      if (opts != null) {
        localNimbus.submitTopologyWithOpts(name,stormConf,topology,opts);
      }
 else {
        localNimbus.submitTopology(name,stormConf,topology);
      }
    }
 else {
      String serConf=JSONValue.toJSONString(stormConf);
      NimbusClient client=NimbusClient.getConfiguredClient(conf);
      if (topologyNameExists(conf,name)) {
        throw new RuntimeException("Topology with name `" + name + "` already exists on cluster");
      }
      String jar=submitJar(conf,progressListener);
      try {
        LOG.info("Submitting topology " + name + " in distributed mode with conf "+ serConf);
        if (opts != null) {
          client.getClient().submitTopologyWithOpts(name,jar,serConf,topology,opts);
        }
 else {
          client.getClient().submitTopology(name,jar,serConf,topology);
        }
      }
 catch (      InvalidTopologyException e) {
        LOG.warn("Topology submission exception: " + e.get_msg());
        throw e;
      }
catch (      AlreadyAliveException e) {
        LOG.warn("Topology already alive exception",e);
        throw e;
      }
 finally {
        client.close();
      }
    }
    LOG.info("Finished submitting topology: " + name);
  }
 catch (  TException e) {
    throw new RuntimeException(e);
  }
}
