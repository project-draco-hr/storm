{
  LOG.debug("\n\n\nRerunning ResourceAwareScheduler...");
  initialize(topologies,cluster);
  LOG.info("Cluster scheduling:\n{}",ResourceUtils.printScheduling(cluster,topologies));
  LOG.info("Nodes:\n{}",this.schedulingState.nodes);
  for (  User user : getUserMap().values()) {
    LOG.info(user.getDetailedInfo());
  }
  ISchedulingPriorityStrategy schedulingPrioritystrategy=null;
  while (true) {
    if (schedulingPrioritystrategy == null) {
      try {
        schedulingPrioritystrategy=(ISchedulingPriorityStrategy)Utils.newInstance((String)this.conf.get(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY));
      }
 catch (      RuntimeException ex) {
        LOG.error(String.format("failed to create instance of priority strategy: %s with error: %s! No topologies will be scheduled.",this.conf.get(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY),ex.getMessage()),ex);
        break;
      }
    }
    TopologyDetails td;
    try {
      schedulingPrioritystrategy.prepare(this.schedulingState);
      td=schedulingPrioritystrategy.getNextTopologyToSchedule();
    }
 catch (    Exception ex) {
      LOG.error(String.format("Exception thrown when running priority strategy %s. No topologies will be scheduled! Error: %s",schedulingPrioritystrategy.getClass().getName(),ex.getMessage()),ex.getStackTrace());
      break;
    }
    if (td == null) {
      break;
    }
    scheduleTopology(td);
    LOG.debug("Nodes after scheduling:\n{}",this.schedulingState.nodes);
  }
  updateChanges(cluster,topologies);
}
