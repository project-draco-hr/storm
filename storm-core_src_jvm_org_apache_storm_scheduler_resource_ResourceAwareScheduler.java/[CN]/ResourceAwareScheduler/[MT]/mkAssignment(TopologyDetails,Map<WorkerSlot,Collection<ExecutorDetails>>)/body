{
  if (schedulerAssignmentMap != null) {
    double requestedMemOnHeap=td.getTotalRequestedMemOnHeap();
    double requestedMemOffHeap=td.getTotalRequestedMemOffHeap();
    double requestedCpu=td.getTotalRequestedCpu();
    double assignedMemOnHeap=0.0;
    double assignedMemOffHeap=0.0;
    double assignedCpu=0.0;
    Set<String> nodesUsed=new HashSet<String>();
    for (    Map.Entry<WorkerSlot,Collection<ExecutorDetails>> workerToTasksEntry : schedulerAssignmentMap.entrySet()) {
      WorkerSlot targetSlot=workerToTasksEntry.getKey();
      Collection<ExecutorDetails> execsNeedScheduling=workerToTasksEntry.getValue();
      RAS_Node targetNode=this.schedulingState.nodes.getNodeById(targetSlot.getNodeId());
      targetSlot=allocateResourceToSlot(td,execsNeedScheduling,targetSlot);
      targetNode.assign(targetSlot,td,execsNeedScheduling);
      LOG.debug("ASSIGNMENT    TOPOLOGY: {}  TASKS: {} To Node: {} on Slot: {}",td.getName(),execsNeedScheduling,targetNode.getHostname(),targetSlot.getPort());
      for (      ExecutorDetails exec : execsNeedScheduling) {
        targetNode.consumeResourcesforTask(exec,td);
      }
      if (!nodesUsed.contains(targetNode.getId())) {
        nodesUsed.add(targetNode.getId());
      }
      assignedMemOnHeap+=targetSlot.getAllocatedMemOnHeap();
      assignedMemOffHeap+=targetSlot.getAllocatedMemOffHeap();
      assignedCpu+=targetSlot.getAllocatedCpu();
    }
    Double[] resources={requestedMemOnHeap,requestedMemOffHeap,requestedCpu,assignedMemOnHeap,assignedMemOffHeap,assignedCpu};
    LOG.debug("setTopologyResources for {}: requested on-heap mem, off-heap mem, cpu: {} {} {} " + "assigned on-heap mem, off-heap mem, cpu: {} {} {}",td.getId(),requestedMemOnHeap,requestedMemOffHeap,requestedCpu,assignedMemOnHeap,assignedMemOffHeap,assignedCpu);
    this.schedulingState.cluster.setTopologyResources(td.getId(),resources);
    return true;
  }
 else {
    LOG.warn("schedulerAssignmentMap for topo {} is null. This shouldn't happen!",td.getName());
    return false;
  }
}
