{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(is_set_time_secs()).compareTo(other.is_set_time_secs());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (is_set_time_secs()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.time_secs,other.time_secs);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(is_set_topology_id()).compareTo(other.is_set_topology_id());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (is_set_topology_id()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.topology_id,other.topology_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(is_set_executors()).compareTo(other.is_set_executors());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (is_set_executors()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.executors,other.executors);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(is_set_port()).compareTo(other.is_set_port());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (is_set_port()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.port,other.port);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
