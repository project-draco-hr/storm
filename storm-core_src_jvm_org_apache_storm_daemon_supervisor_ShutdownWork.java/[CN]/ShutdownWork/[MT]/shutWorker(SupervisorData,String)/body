{
  LOG.info("Shutting down {}:{}",supervisorData.getSupervisorId(),workerId);
  Map conf=supervisorData.getConf();
  Collection<String> pids=Utils.readDirContents(ConfigUtils.workerPidsRoot(conf,workerId));
  Integer shutdownSleepSecs=Utils.getInt(conf.get(Config.SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS));
  Boolean asUser=Utils.getBoolean(conf.get(Config.SUPERVISOR_RUN_WORKER_AS_USER),false);
  String user=ConfigUtils.getWorkerUser(conf,workerId);
  String threadPid=supervisorData.getWorkerThreadPidsAtom().get(workerId);
  if (StringUtils.isNotBlank(threadPid)) {
    ProcessSimulator.killProcess(threadPid);
  }
  for (  String pid : pids) {
    if (asUser) {
      List<String> commands=new ArrayList<>();
      commands.add("signal");
      commands.add(pid);
      commands.add("15");
      String logPrefix="kill - 15 " + pid;
      SupervisorUtils.workerLauncherAndWait(conf,user,commands,null,logPrefix);
    }
 else {
      Utils.killProcessWithSigTerm(pid);
    }
  }
  if (pids.size() > 0) {
    LOG.info("Sleep {} seconds for execution of cleanup threads on worker.",shutdownSleepSecs);
    Time.sleepSecs(shutdownSleepSecs);
  }
  for (  String pid : pids) {
    if (asUser) {
      List<String> commands=new ArrayList<>();
      commands.add("signal");
      commands.add(pid);
      commands.add("9");
      String logPrefix="kill - 9 " + pid;
      SupervisorUtils.workerLauncherAndWait(conf,user,commands,null,logPrefix);
    }
 else {
      Utils.forceKillProcess(pid);
    }
    String path=ConfigUtils.workerPidPath(conf,workerId,pid);
    if (asUser) {
      SupervisorUtils.rmrAsUser(conf,workerId,path);
    }
 else {
      try {
        LOG.debug("Removing path {}",path);
        new File(path).delete();
      }
 catch (      Exception e) {
      }
    }
  }
  tryCleanupWorker(conf,supervisorData,workerId);
  LOG.info("Shut down {}:{}",supervisorData.getSupervisorId(),workerId);
}
