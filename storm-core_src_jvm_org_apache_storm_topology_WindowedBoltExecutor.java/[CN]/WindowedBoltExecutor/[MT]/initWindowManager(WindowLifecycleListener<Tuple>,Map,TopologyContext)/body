{
  WindowManager<Tuple> manager=new WindowManager<>(lifecycleListener);
  Duration windowLengthDuration=null;
  Count windowLengthCount=null;
  Duration slidingIntervalDuration=null;
  Count slidingIntervalCount=null;
  if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_WINDOW_LENGTH_COUNT)) {
    windowLengthCount=new Count(((Number)stormConf.get(Config.TOPOLOGY_BOLTS_WINDOW_LENGTH_COUNT)).intValue());
  }
 else   if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_WINDOW_LENGTH_DURATION_MS)) {
    windowLengthDuration=new Duration(((Number)stormConf.get(Config.TOPOLOGY_BOLTS_WINDOW_LENGTH_DURATION_MS)).intValue(),TimeUnit.MILLISECONDS);
  }
  if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_SLIDING_INTERVAL_COUNT)) {
    slidingIntervalCount=new Count(((Number)stormConf.get(Config.TOPOLOGY_BOLTS_SLIDING_INTERVAL_COUNT)).intValue());
  }
 else   if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_SLIDING_INTERVAL_DURATION_MS)) {
    slidingIntervalDuration=new Duration(((Number)stormConf.get(Config.TOPOLOGY_BOLTS_SLIDING_INTERVAL_DURATION_MS)).intValue(),TimeUnit.MILLISECONDS);
  }
 else {
    slidingIntervalCount=new Count(1);
  }
  if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_TUPLE_TIMESTAMP_FIELD_NAME)) {
    tupleTsFieldName=(String)stormConf.get(Config.TOPOLOGY_BOLTS_TUPLE_TIMESTAMP_FIELD_NAME);
    if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_TUPLE_TIMESTAMP_MAX_LAG_MS)) {
      maxLagMs=((Number)stormConf.get(Config.TOPOLOGY_BOLTS_TUPLE_TIMESTAMP_MAX_LAG_MS)).intValue();
    }
 else {
      maxLagMs=DEFAULT_MAX_LAG_MS;
    }
    int watermarkInterval;
    if (stormConf.containsKey(Config.TOPOLOGY_BOLTS_WATERMARK_EVENT_INTERVAL_MS)) {
      watermarkInterval=((Number)stormConf.get(Config.TOPOLOGY_BOLTS_WATERMARK_EVENT_INTERVAL_MS)).intValue();
    }
 else {
      watermarkInterval=DEFAULT_WATERMARK_EVENT_INTERVAL_MS;
    }
    waterMarkEventGenerator=new WaterMarkEventGenerator<>(manager,watermarkInterval,maxLagMs,getComponentStreams(context));
  }
  validate(stormConf,windowLengthCount,windowLengthDuration,slidingIntervalCount,slidingIntervalDuration);
  evictionPolicy=getEvictionPolicy(windowLengthCount,windowLengthDuration,manager);
  triggerPolicy=getTriggerPolicy(slidingIntervalCount,slidingIntervalDuration,manager,evictionPolicy);
  manager.setEvictionPolicy(evictionPolicy);
  manager.setTriggerPolicy(triggerPolicy);
  return manager;
}
