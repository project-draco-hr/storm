{
  String path="/pulsepath";
  String dataString="pulse data";
  Pacemaker handler=new Pacemaker(new ConcurrentHashMap(),false);
  HBPulse hbPulse=new HBPulse();
  hbPulse.set_id(path);
  hbPulse.set_details(Utils.javaSerialize(dataString));
  messageWithRandId(HBServerMessageType.SEND_PULSE,HBMessageData.pulse(hbPulse));
  HBMessage sendResponse=handler.handleMessage(hbMessage,true);
  Assert.assertEquals(mid,sendResponse.get_message_id());
  Assert.assertEquals(HBServerMessageType.SEND_PULSE_RESPONSE,sendResponse.get_type());
  Assert.assertNull(sendResponse.get_data());
  messageWithRandId(HBServerMessageType.GET_PULSE,HBMessageData.path(path));
  HBMessage response=handler.handleMessage(hbMessage,true);
  Assert.assertEquals(mid,response.get_message_id());
  Assert.assertEquals(HBServerMessageType.GET_PULSE_RESPONSE,response.get_type());
  Assert.assertEquals(dataString,Utils.javaDeserialize(response.get_data().get_pulse().get_details(),String.class));
}
