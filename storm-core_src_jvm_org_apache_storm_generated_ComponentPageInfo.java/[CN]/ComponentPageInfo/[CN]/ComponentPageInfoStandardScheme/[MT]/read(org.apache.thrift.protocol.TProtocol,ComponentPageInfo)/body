{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.component_id=iprot.readString();
        struct.set_component_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.component_type=org.apache.storm.generated.ComponentType.findByValue(iprot.readI32());
    struct.set_component_type_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_id=iprot.readString();
struct.set_topology_id_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_name=iprot.readString();
struct.set_topology_name_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_executors=iprot.readI32();
struct.set_num_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_tasks=iprot.readI32();
struct.set_num_tasks_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map472=iprot.readMapBegin();
struct.window_to_stats=new HashMap<String,ComponentAggregateStats>(2 * _map472.size);
String _key473;
ComponentAggregateStats _val474;
for (int _i475=0; _i475 < _map472.size; ++_i475) {
_key473=iprot.readString();
_val474=new ComponentAggregateStats();
_val474.read(iprot);
struct.window_to_stats.put(_key473,_val474);
}
iprot.readMapEnd();
}
struct.set_window_to_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map476=iprot.readMapBegin();
struct.gsid_to_input_stats=new HashMap<GlobalStreamId,ComponentAggregateStats>(2 * _map476.size);
GlobalStreamId _key477;
ComponentAggregateStats _val478;
for (int _i479=0; _i479 < _map476.size; ++_i479) {
_key477=new GlobalStreamId();
_key477.read(iprot);
_val478=new ComponentAggregateStats();
_val478.read(iprot);
struct.gsid_to_input_stats.put(_key477,_val478);
}
iprot.readMapEnd();
}
struct.set_gsid_to_input_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map480=iprot.readMapBegin();
struct.sid_to_output_stats=new HashMap<String,ComponentAggregateStats>(2 * _map480.size);
String _key481;
ComponentAggregateStats _val482;
for (int _i483=0; _i483 < _map480.size; ++_i483) {
_key481=iprot.readString();
_val482=new ComponentAggregateStats();
_val482.read(iprot);
struct.sid_to_output_stats.put(_key481,_val482);
}
iprot.readMapEnd();
}
struct.set_sid_to_output_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list484=iprot.readListBegin();
struct.exec_stats=new ArrayList<ExecutorAggregateStats>(_list484.size);
ExecutorAggregateStats _elem485;
for (int _i486=0; _i486 < _list484.size; ++_i486) {
_elem485=new ExecutorAggregateStats();
_elem485.read(iprot);
struct.exec_stats.add(_elem485);
}
iprot.readListEnd();
}
struct.set_exec_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list487=iprot.readListBegin();
struct.errors=new ArrayList<ErrorInfo>(_list487.size);
ErrorInfo _elem488;
for (int _i489=0; _i489 < _list487.size; ++_i489) {
_elem488=new ErrorInfo();
_elem488.read(iprot);
struct.errors.add(_elem488);
}
iprot.readListEnd();
}
struct.set_errors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.eventlog_host=iprot.readString();
struct.set_eventlog_host_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.eventlog_port=iprot.readI32();
struct.set_eventlog_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.debug_options=new DebugOptions();
struct.debug_options.read(iprot);
struct.set_debug_options_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_status=iprot.readString();
struct.set_topology_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
