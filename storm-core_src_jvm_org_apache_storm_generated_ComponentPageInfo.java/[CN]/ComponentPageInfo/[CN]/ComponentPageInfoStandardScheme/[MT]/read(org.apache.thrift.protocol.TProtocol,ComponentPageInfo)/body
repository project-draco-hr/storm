{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.component_id=iprot.readString();
        struct.set_component_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.component_type=org.apache.storm.generated.ComponentType.findByValue(iprot.readI32());
    struct.set_component_type_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_id=iprot.readString();
struct.set_topology_id_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_name=iprot.readString();
struct.set_topology_name_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_executors=iprot.readI32();
struct.set_num_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_tasks=iprot.readI32();
struct.set_num_tasks_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map482=iprot.readMapBegin();
struct.window_to_stats=new HashMap<String,ComponentAggregateStats>(2 * _map482.size);
String _key483;
ComponentAggregateStats _val484;
for (int _i485=0; _i485 < _map482.size; ++_i485) {
_key483=iprot.readString();
_val484=new ComponentAggregateStats();
_val484.read(iprot);
struct.window_to_stats.put(_key483,_val484);
}
iprot.readMapEnd();
}
struct.set_window_to_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map486=iprot.readMapBegin();
struct.gsid_to_input_stats=new HashMap<GlobalStreamId,ComponentAggregateStats>(2 * _map486.size);
GlobalStreamId _key487;
ComponentAggregateStats _val488;
for (int _i489=0; _i489 < _map486.size; ++_i489) {
_key487=new GlobalStreamId();
_key487.read(iprot);
_val488=new ComponentAggregateStats();
_val488.read(iprot);
struct.gsid_to_input_stats.put(_key487,_val488);
}
iprot.readMapEnd();
}
struct.set_gsid_to_input_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map490=iprot.readMapBegin();
struct.sid_to_output_stats=new HashMap<String,ComponentAggregateStats>(2 * _map490.size);
String _key491;
ComponentAggregateStats _val492;
for (int _i493=0; _i493 < _map490.size; ++_i493) {
_key491=iprot.readString();
_val492=new ComponentAggregateStats();
_val492.read(iprot);
struct.sid_to_output_stats.put(_key491,_val492);
}
iprot.readMapEnd();
}
struct.set_sid_to_output_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list494=iprot.readListBegin();
struct.exec_stats=new ArrayList<ExecutorAggregateStats>(_list494.size);
ExecutorAggregateStats _elem495;
for (int _i496=0; _i496 < _list494.size; ++_i496) {
_elem495=new ExecutorAggregateStats();
_elem495.read(iprot);
struct.exec_stats.add(_elem495);
}
iprot.readListEnd();
}
struct.set_exec_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list497=iprot.readListBegin();
struct.errors=new ArrayList<ErrorInfo>(_list497.size);
ErrorInfo _elem498;
for (int _i499=0; _i499 < _list497.size; ++_i499) {
_elem498=new ErrorInfo();
_elem498.read(iprot);
struct.errors.add(_elem498);
}
iprot.readListEnd();
}
struct.set_errors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.eventlog_host=iprot.readString();
struct.set_eventlog_host_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.eventlog_port=iprot.readI32();
struct.set_eventlog_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.debug_options=new DebugOptions();
struct.debug_options.read(iprot);
struct.set_debug_options_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_status=iprot.readString();
struct.set_topology_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map500=iprot.readMapBegin();
struct.resources_map=new HashMap<String,Double>(2 * _map500.size);
String _key501;
double _val502;
for (int _i503=0; _i503 < _map500.size; ++_i503) {
_key501=iprot.readString();
_val502=iprot.readDouble();
struct.resources_map.put(_key501,_val502);
}
iprot.readMapEnd();
}
struct.set_resources_map_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
