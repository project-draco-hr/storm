{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.component_id=iprot.readString();
        struct.set_component_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.component_type=org.apache.storm.generated.ComponentType.findByValue(iprot.readI32());
    struct.set_component_type_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_id=iprot.readString();
struct.set_topology_id_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_name=iprot.readString();
struct.set_topology_name_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_executors=iprot.readI32();
struct.set_num_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_tasks=iprot.readI32();
struct.set_num_tasks_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map422=iprot.readMapBegin();
struct.window_to_stats=new HashMap<String,ComponentAggregateStats>(2 * _map422.size);
String _key423;
ComponentAggregateStats _val424;
for (int _i425=0; _i425 < _map422.size; ++_i425) {
_key423=iprot.readString();
_val424=new ComponentAggregateStats();
_val424.read(iprot);
struct.window_to_stats.put(_key423,_val424);
}
iprot.readMapEnd();
}
struct.set_window_to_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map426=iprot.readMapBegin();
struct.gsid_to_input_stats=new HashMap<GlobalStreamId,ComponentAggregateStats>(2 * _map426.size);
GlobalStreamId _key427;
ComponentAggregateStats _val428;
for (int _i429=0; _i429 < _map426.size; ++_i429) {
_key427=new GlobalStreamId();
_key427.read(iprot);
_val428=new ComponentAggregateStats();
_val428.read(iprot);
struct.gsid_to_input_stats.put(_key427,_val428);
}
iprot.readMapEnd();
}
struct.set_gsid_to_input_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map430=iprot.readMapBegin();
struct.sid_to_output_stats=new HashMap<String,ComponentAggregateStats>(2 * _map430.size);
String _key431;
ComponentAggregateStats _val432;
for (int _i433=0; _i433 < _map430.size; ++_i433) {
_key431=iprot.readString();
_val432=new ComponentAggregateStats();
_val432.read(iprot);
struct.sid_to_output_stats.put(_key431,_val432);
}
iprot.readMapEnd();
}
struct.set_sid_to_output_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list434=iprot.readListBegin();
struct.exec_stats=new ArrayList<ExecutorAggregateStats>(_list434.size);
ExecutorAggregateStats _elem435;
for (int _i436=0; _i436 < _list434.size; ++_i436) {
_elem435=new ExecutorAggregateStats();
_elem435.read(iprot);
struct.exec_stats.add(_elem435);
}
iprot.readListEnd();
}
struct.set_exec_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list437=iprot.readListBegin();
struct.errors=new ArrayList<ErrorInfo>(_list437.size);
ErrorInfo _elem438;
for (int _i439=0; _i439 < _list437.size; ++_i439) {
_elem438=new ErrorInfo();
_elem438.read(iprot);
struct.errors.add(_elem438);
}
iprot.readListEnd();
}
struct.set_errors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.eventlog_host=iprot.readString();
struct.set_eventlog_host_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.eventlog_port=iprot.readI32();
struct.set_eventlog_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.debug_options=new DebugOptions();
struct.debug_options.read(iprot);
struct.set_debug_options_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_status=iprot.readString();
struct.set_topology_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
