{
  Map stormConf=ConfigUtils.readSupervisorStormConfGivenPath(conf,stormconfPath);
  Map<String,Map<String,Object>> blobstoreMap=(Map<String,Map<String,Object>>)stormConf.get(Config.TOPOLOGY_BLOBSTORE_MAP);
  String user=(String)stormConf.get(Config.TOPOLOGY_SUBMITTER_USER);
  String topoName=(String)stormConf.get(Config.TOPOLOGY_NAME);
  File userDir=localizer.getLocalUserFileCacheDir(user);
  List<LocalResource> localResourceList=SupervisorUtils.blobstoreMapToLocalresources(blobstoreMap);
  if (localResourceList.size() > 0) {
    if (!userDir.exists()) {
      FileUtils.forceMkdir(userDir);
    }
    try {
      List<LocalizedResource> localizedResources=localizer.getBlobs(localResourceList,user,topoName,userDir);
      setupBlobPermission(conf,user,userDir.toString());
      for (      LocalizedResource localizedResource : localizedResources) {
        File rsrcFilePath=new File(localizedResource.getFilePath());
        String keyName=rsrcFilePath.getName();
        String blobSymlinkTargetName=new File(localizedResource.getCurrentSymlinkPath()).getName();
        String symlinkName=null;
        if (blobstoreMap != null) {
          Map<String,Object> blobInfo=blobstoreMap.get(keyName);
          if (blobInfo != null && blobInfo.containsKey("localname")) {
            symlinkName=(String)blobInfo.get("localname");
          }
 else {
            symlinkName=keyName;
          }
        }
        Utils.createSymlink(tmpRoot,rsrcFilePath.getParent(),symlinkName,blobSymlinkTargetName);
      }
    }
 catch (    AuthorizationException authExp) {
      LOG.error("AuthorizationException error {}",authExp);
    }
catch (    KeyNotFoundException knf) {
      LOG.error("KeyNotFoundException error {}",knf);
    }
  }
}
