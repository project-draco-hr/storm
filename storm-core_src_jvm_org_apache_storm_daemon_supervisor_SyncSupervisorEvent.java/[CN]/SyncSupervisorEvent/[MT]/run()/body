{
  try {
    Map conf=supervisorData.getConf();
    Runnable syncCallback=new EventManagerPushCallback(this,syncSupEventManager);
    List<String> stormIds=stormClusterState.assignments(syncCallback);
    Map<String,Map<String,Object>> assignmentsSnapshot=getAssignmentsSnapshot(stormClusterState,stormIds,supervisorData.getAssignmentVersions().get(),syncCallback);
    Map<String,List<ProfileRequest>> stormIdToProfilerActions=getProfileActions(stormClusterState,stormIds);
    Set<String> allDownloadedTopologyIds=SupervisorUtils.readDownLoadedStormIds(conf);
    Map<String,String> stormcodeMap=readStormCodeLocations(assignmentsSnapshot);
    Map<Integer,LocalAssignment> existingAssignment=localState.getLocalAssignmentsMap();
    if (existingAssignment == null) {
      existingAssignment=new HashMap<>();
    }
    Map<Integer,LocalAssignment> allAssignment=readAssignments(assignmentsSnapshot,existingAssignment,supervisorData.getAssignmentId(),supervisorData.getSyncRetry());
    Map<Integer,LocalAssignment> newAssignment=new HashMap<>();
    Set<String> assignedStormIds=new HashSet<>();
    for (    Map.Entry<Integer,LocalAssignment> entry : allAssignment.entrySet()) {
      if (supervisorData.getiSupervisor().confirmAssigned(entry.getKey())) {
        newAssignment.put(entry.getKey(),entry.getValue());
        assignedStormIds.add(entry.getValue().get_topology_id());
      }
    }
    Set<String> srashStormIds=verifyDownloadedFiles(conf,supervisorData.getLocalizer(),assignedStormIds,allDownloadedTopologyIds);
    Set<String> downloadedStormIds=new HashSet<>();
    downloadedStormIds.addAll(allDownloadedTopologyIds);
    downloadedStormIds.removeAll(srashStormIds);
    LOG.debug("Synchronizing supervisor");
    LOG.debug("Storm code map: {}",stormcodeMap);
    LOG.debug("All assignment: {}",allAssignment);
    LOG.debug("New assignment: {}",newAssignment);
    LOG.debug("Assigned Storm Ids {}",assignedStormIds);
    LOG.debug("All Downloaded Ids {}",allDownloadedTopologyIds);
    LOG.debug("Checked Downloaded Ids {}",srashStormIds);
    LOG.debug("Downloaded Ids {}",downloadedStormIds);
    LOG.debug("Storm Ids Profiler Actions {}",stormIdToProfilerActions);
    for (    Map.Entry<String,String> entry : stormcodeMap.entrySet()) {
      String stormId=entry.getKey();
      if (!downloadedStormIds.contains(stormId) && assignedStormIds.contains(stormId)) {
        LOG.info("Downloading code for storm id {}.",stormId);
        try {
          downloadStormCode(conf,stormId,entry.getValue(),supervisorData.getLocalizer());
        }
 catch (        Exception e) {
          if (Utils.exceptionCauseIsInstanceOf(NimbusLeaderNotFoundException.class,e)) {
            LOG.warn("Nimbus leader was not available.",e);
          }
 else           if (Utils.exceptionCauseIsInstanceOf(TTransportException.class,e)) {
            LOG.warn("There was a connection problem with nimbus.",e);
          }
 else {
            throw e;
          }
        }
        LOG.info("Finished downloading code for storm id {}",stormId);
      }
    }
    LOG.debug("Writing new assignment {}",newAssignment);
    Set<Integer> killWorkers=new HashSet<>();
    killWorkers.addAll(existingAssignment.keySet());
    killWorkers.removeAll(newAssignment.keySet());
    for (    Integer port : killWorkers) {
      supervisorData.getiSupervisor().killedWorker(port);
    }
    killExistingWorkersWithChangeInComponents(supervisorData,existingAssignment,newAssignment);
    supervisorData.getiSupervisor().assigned(newAssignment.keySet());
    localState.setLocalAssignmentsMap(newAssignment);
    supervisorData.setAssignmentVersions(assignmentsSnapshot);
    supervisorData.setStormIdToProfileActions(stormIdToProfilerActions);
    Map<Long,LocalAssignment> convertNewAssignment=new HashMap<>();
    for (    Map.Entry<Integer,LocalAssignment> entry : newAssignment.entrySet()) {
      convertNewAssignment.put(entry.getKey().longValue(),entry.getValue());
    }
    supervisorData.setCurrAssignment(convertNewAssignment);
    if (Utils.isOnWindows()) {
      shutdownDisallowedWorkers();
    }
    for (    String stormId : allDownloadedTopologyIds) {
      if (!stormcodeMap.containsKey(stormId)) {
        LOG.info("Removing code for storm id {}.",stormId);
        rmTopoFiles(conf,stormId,supervisorData.getLocalizer(),true);
      }
    }
    syncProcessManager.add(syncProcesses);
  }
 catch (  Exception e) {
    LOG.error("Failed to Sync Supervisor",e);
    throw new RuntimeException(e);
  }
}
