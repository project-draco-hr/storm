{
  String host=(String)config.get(Config.PACEMAKER_HOST);
  int port=(int)config.get(Config.PACEMAKER_PORT);
  topo_name=(String)config.get(Config.TOPOLOGY_NAME);
  if (topo_name == null) {
    topo_name="pacemaker-client";
  }
  String auth=(String)config.get(Config.PACEMAKER_AUTH_METHOD);
  ThriftNettyClientCodec.AuthMethod authMethod;
  if (auth.equals("DIGEST")) {
    Configuration login_conf=AuthUtils.GetConfiguration(config);
    authMethod=ThriftNettyClientCodec.AuthMethod.DIGEST;
    secret=AuthUtils.makeDigestPayload(login_conf,AuthUtils.LOGIN_CONTEXT_PACEMAKER_DIGEST);
    if (secret == null) {
      LOG.error("Can't start pacemaker server without digest secret.");
      throw new RuntimeException("Can't start pacemaker server without digest secret.");
    }
  }
 else   if (auth.equals("KERBEROS")) {
    authMethod=ThriftNettyClientCodec.AuthMethod.KERBEROS;
  }
 else {
    if (!auth.equals("NONE")) {
      LOG.warn("Invalid auth scheme: '{}'. Falling back to 'NONE'",auth);
    }
    authMethod=ThriftNettyClientCodec.AuthMethod.NONE;
  }
  closing=new AtomicBoolean(false);
  channelRef=new AtomicReference<Channel>(null);
  setupMessaging();
  ThreadFactory bossFactory=new NettyRenameThreadFactory("client-boss");
  ThreadFactory workerFactory=new NettyRenameThreadFactory("client-worker");
  NioClientSocketChannelFactory factory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory));
  bootstrap=new ClientBootstrap(factory);
  bootstrap.setOption("tcpNoDelay",true);
  bootstrap.setOption("sendBufferSize",5242880);
  bootstrap.setOption("keepAlive",true);
  remote_addr=new InetSocketAddress(host,port);
  ChannelPipelineFactory pipelineFactory=new ThriftNettyClientCodec(this,config,authMethod).pipelineFactory();
  bootstrap.setPipelineFactory(pipelineFactory);
  bootstrap.connect(remote_addr);
}
