{
  try {
    if (options.getKerberosPrincipal() == null && options.getKerberosKeytab() == null) {
      kerberosEnabled=false;
    }
 else     if (options.getKerberosPrincipal() != null && options.getKerberosKeytab() != null) {
      kerberosEnabled=true;
    }
 else {
      throw new IllegalArgumentException("To enable Kerberos, need to set both KerberosPrincipal " + " & KerberosKeytab");
    }
    if (kerberosEnabled) {
      try {
        ugi=HiveUtils.authenticate(options.getKerberosKeytab(),options.getKerberosPrincipal());
      }
 catch (      HiveUtils.AuthenticationFailed ex) {
        LOG.error("Hive Kerberos authentication failed " + ex.getMessage(),ex);
        throw new IllegalArgumentException(ex);
      }
    }
    this.collector=collector;
    allWriters=new HashMap<HiveEndPoint,HiveWriter>();
    String timeoutName="hive-bolt-%d";
    this.callTimeoutPool=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setNameFormat(timeoutName).build());
    heartBeatTimer=new Timer();
    setupHeartBeatTimer();
    if (conf.containsKey("topology.message.timeout.secs") && options.getTickTupleInterval() == 0) {
      Integer topologyTimeout=Integer.parseInt(conf.get("topology.message.timeout.secs").toString());
      int tickTupleInterval=(int)(Math.floor(topologyTimeout / 2));
      options.withTickTupleInterval(tickTupleInterval);
      LOG.debug("Setting tick tuple interval to [" + tickTupleInterval + "] based on topology timeout");
    }
  }
 catch (  Exception e) {
    LOG.warn("unable to make connection to hive ",e);
  }
}
