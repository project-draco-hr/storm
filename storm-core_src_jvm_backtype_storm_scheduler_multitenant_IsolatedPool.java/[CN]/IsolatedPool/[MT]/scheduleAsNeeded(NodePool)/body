{
  for (  String topId : _topologyIdToNodes.keySet()) {
    TopologyDetails td=_tds.get(topId);
    Set<Node> allNodes=_topologyIdToNodes.get(topId);
    Number nodesRequested=(Number)td.getConf().get(Config.TOPOLOGY_ISOLATED_MACHINES);
    Integer effectiveNodesRequested=null;
    if (nodesRequested != null) {
      effectiveNodesRequested=Math.min(td.getExecutors().size(),+nodesRequested.intValue());
    }
    if (_cluster.needsScheduling(td) || (effectiveNodesRequested != null && allNodes.size() != effectiveNodesRequested)) {
      LOG.debug("Scheduling topology {}",topId);
      int slotsToUse=0;
      if (effectiveNodesRequested == null) {
        slotsToUse=getNodesForNotIsolatedTop(td,allNodes,lesserPools);
      }
 else {
        slotsToUse=getNodesForIsolatedTop(td,allNodes,lesserPools,effectiveNodesRequested);
      }
      if (slotsToUse <= 0) {
        continue;
      }
      RoundRobinSlotScheduler slotSched=new RoundRobinSlotScheduler(td,slotsToUse,_cluster);
      LOG.debug("Nodes sorted by free space {}",allNodes);
      while (true) {
        Node n=findBestNode(allNodes);
        if (n == null) {
          LOG.error("No nodes to use to assign topology {}",td.getName());
          break;
        }
        if (!slotSched.assignSlotTo(n)) {
          break;
        }
      }
    }
    Set<Node> found=_topologyIdToNodes.get(topId);
    int nc=found == null ? 0 : found.size();
    _cluster.setStatus(topId,"Scheduled Isolated on " + nc + " Nodes");
  }
}
