{
  for (  String topId : _topologyIdToNodes.keySet()) {
    TopologyDetails td=_tds.get(topId);
    if (_cluster.needsScheduling(td)) {
      LOG.debug("Scheduling topology {}",topId);
      Set<Node> allNodes=_topologyIdToNodes.get(topId);
      Number nodesRequested=(Number)td.getConf().get(Config.TOPOLOGY_ISOLATED_MACHINES);
      int slotsToUse=0;
      if (nodesRequested == null) {
        slotsToUse=getNodesForNotIsolatedTop(td,allNodes,lesserPools);
      }
 else {
        slotsToUse=getNodesForIsolatedTop(td,allNodes,lesserPools,nodesRequested.intValue());
      }
      if (slotsToUse <= 0) {
        continue;
      }
      RoundRobinSlotScheduler slotSched=new RoundRobinSlotScheduler(td,slotsToUse,_cluster);
      LinkedList<Node> sortedNodes=new LinkedList<Node>(allNodes);
      Collections.sort(sortedNodes,Node.FREE_NODE_COMPARATOR_DEC);
      LOG.debug("Nodes sorted by free space {}",sortedNodes);
      while (true) {
        Node n=sortedNodes.remove();
        if (!slotSched.assignSlotTo(n)) {
          break;
        }
        int freeSlots=n.totalSlotsFree();
        for (int i=0; i < sortedNodes.size(); i++) {
          if (freeSlots >= sortedNodes.get(i).totalSlotsFree()) {
            sortedNodes.add(i,n);
            n=null;
            break;
          }
        }
        if (n != null) {
          sortedNodes.add(n);
        }
      }
    }
    Set<Node> found=_topologyIdToNodes.get(topId);
    int nc=found == null ? 0 : found.size();
    _cluster.setStatus(topId,"Scheduled Isolated on " + nc + " Nodes");
  }
}
