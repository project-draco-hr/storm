{
  TestConfig config=new TestConfig();
  Collection<Object> passCases=new LinkedList<Object>();
  Collection<Object> failCases=new LinkedList<Object>();
  Map<Object,Object> passCase1=new HashMap<Object,Object>();
  passCase1.put("aaa",5);
  passCase1.put("bbb",100);
  passCase1.put("ccc",Integer.MAX_VALUE);
  passCases.add(passCase1);
  passCases.add(null);
  for (  Object value : passCases) {
    config.put(TestConfig.TEST_MAP_CONFIG_2,value);
    ConfigValidation.validateFields(config,TestConfig.class);
  }
  Map<Object,Object> failCase1=new HashMap<Object,Object>();
  failCase1.put("aaa",5);
  failCase1.put(5,6);
  failCase1.put("ccc",7);
  Map<Object,Object> failCase2=new HashMap<Object,Object>();
  failCase2.put("aaa","str");
  failCase2.put("bbb",6);
  failCase2.put("ccc",7);
  Map<Object,Object> failCase3=new HashMap<Object,Object>();
  failCase3.put("aaa",-1);
  failCase3.put("bbb",6);
  failCase3.put("ccc",7);
  Map<Object,Object> failCase4=new HashMap<Object,Object>();
  failCase4.put("aaa",1);
  failCase4.put("bbb",6);
  failCase4.put("ccc",7.4);
  failCases.add(failCase1);
  failCases.add(failCase2);
  failCases.add(failCase3);
  failCases.add(failCase4);
  for (  Object value : failCases) {
    try {
      config.put(TestConfig.TEST_MAP_CONFIG_2,value);
      ConfigValidation.validateFields(config,TestConfig.class);
      Assert.fail("Expected Exception not Thrown for value: " + value);
    }
 catch (    IllegalArgumentException Ex) {
    }
  }
}
