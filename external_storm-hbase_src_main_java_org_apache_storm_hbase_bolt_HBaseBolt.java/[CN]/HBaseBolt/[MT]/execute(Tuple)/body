{
  boolean flush=false;
  try {
    if (TupleUtils.isTick(tuple)) {
      LOG.debug("TICK received! current batch status [{}/{}]",tupleBatch.size(),batchSize);
      collector.ack(tuple);
      flush=true;
    }
 else {
      byte[] rowKey=this.mapper.rowKey(tuple);
      ColumnList cols=this.mapper.columns(tuple);
      List<Mutation> mutations=hBaseClient.constructMutationReq(rowKey,cols,writeToWAL ? Durability.SYNC_WAL : Durability.SKIP_WAL);
      batchMutations.addAll(mutations);
      tupleBatch.add(tuple);
      if (tupleBatch.size() >= batchSize) {
        flush=true;
      }
    }
    if (flush && !tupleBatch.isEmpty()) {
      this.hBaseClient.batchMutate(batchMutations);
      LOG.debug("acknowledging tuples after batchMutate");
      for (      Tuple t : tupleBatch) {
        collector.ack(t);
      }
      tupleBatch.clear();
      batchMutations.clear();
    }
  }
 catch (  Exception e) {
    this.collector.reportError(e);
    for (    Tuple t : tupleBatch) {
      collector.fail(t);
    }
    tupleBatch.clear();
    batchMutations.clear();
  }
}
