{
  if (this.rotationPolicy == null) {
    throw new IllegalStateException("RotationPolicy must be specified.");
  }
 else   if (this.rotationPolicy instanceof FileSizeRotationPolicy) {
    long rotationBytes=((FileSizeRotationPolicy)rotationPolicy).getMaxBytes();
    LOG.warn("FileSizeRotationPolicy specified with {} bytes.",rotationBytes);
    LOG.warn("Recovery will fail if data files cannot be copied within topology.message.timeout.secs.");
    LOG.warn("Ensure that the data files does not grow too big with the FileSizeRotationPolicy.");
  }
 else   if (this.rotationPolicy instanceof TimedRotationPolicy) {
    LOG.warn("TimedRotationPolicy specified with interval {} ms.",((TimedRotationPolicy)rotationPolicy).getInterval());
    LOG.warn("Recovery will fail if data files cannot be copied within topology.message.timeout.secs.");
    LOG.warn("Ensure that the data files does not grow too big with the TimedRotationPolicy.");
  }
  if (this.fsUrl == null) {
    throw new IllegalStateException("File system URL must be specified.");
  }
  this.fileNameFormat.prepare(conf,partitionIndex,numPartitions);
  this.hdfsConfig=new Configuration();
  Map<String,Object> map=(Map<String,Object>)conf.get(this.configKey);
  if (map != null) {
    for (    String key : map.keySet()) {
      this.hdfsConfig.set(key,String.valueOf(map.get(key)));
    }
  }
  try {
    HdfsSecurityUtil.login(conf,hdfsConfig);
    doPrepare(conf,partitionIndex,numPartitions);
    this.currentFile=createOutputFile();
  }
 catch (  Exception e) {
    throw new RuntimeException("Error preparing HdfsState: " + e.getMessage(),e);
  }
  rotationPolicy.start();
}
