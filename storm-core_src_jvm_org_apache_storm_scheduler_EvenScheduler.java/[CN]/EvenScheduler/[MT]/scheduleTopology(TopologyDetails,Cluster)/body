{
  List<WorkerSlot> availableSlots=cluster.getAvailableSlots();
  Set<ExecutorDetails> allExecutors=topology.getExecutors();
  Map<WorkerSlot,List<ExecutorDetails>> aliveAssigned=getAliveAssignedWorkerSlotExecutors(cluster,topology.getId());
  int totalSlotsToUse=Math.min(topology.getNumWorkers(),availableSlots.size() + aliveAssigned.size());
  List<WorkerSlot> sortedList=sortSlots(availableSlots);
  if (sortedList == null || sortedList.size() < (totalSlotsToUse - aliveAssigned.size())) {
    LOG.error("Available slots are not enough for topology: {}",topology.getName());
    return new HashMap<ExecutorDetails,WorkerSlot>();
  }
  List<WorkerSlot> reassignSlots=sortedList.subList(0,totalSlotsToUse - aliveAssigned.size());
  Set<ExecutorDetails> aliveExecutors=new HashSet<ExecutorDetails>();
  for (  List<ExecutorDetails> list : aliveAssigned.values()) {
    aliveExecutors.addAll(list);
  }
  Set<ExecutorDetails> reassignExecutors=Sets.difference(allExecutors,aliveExecutors);
  Map<ExecutorDetails,WorkerSlot> reassignment=new HashMap<ExecutorDetails,WorkerSlot>();
  if (reassignSlots.size() == 0) {
    return reassignment;
  }
  List<ExecutorDetails> executors=new ArrayList<ExecutorDetails>(reassignExecutors);
  Collections.sort(executors,new Comparator<ExecutorDetails>(){
    @Override public int compare(    ExecutorDetails o1,    ExecutorDetails o2){
      return o1.getStartTask() - o2.getStartTask();
    }
  }
);
  for (int i=0; i < executors.size(); i++) {
    reassignment.put(executors.get(i),reassignSlots.get(i % reassignSlots.size()));
  }
  if (reassignment.size() != 0) {
    LOG.info("Available slots: {}",availableSlots.toString());
  }
  return reassignment;
}
