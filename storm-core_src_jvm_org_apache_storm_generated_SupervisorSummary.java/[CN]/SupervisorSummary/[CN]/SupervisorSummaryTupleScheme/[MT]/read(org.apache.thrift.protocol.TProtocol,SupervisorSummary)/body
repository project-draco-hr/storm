{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.host=iprot.readString();
  struct.set_host_isSet(true);
  struct.uptime_secs=iprot.readI32();
  struct.set_uptime_secs_isSet(true);
  struct.num_workers=iprot.readI32();
  struct.set_num_workers_isSet(true);
  struct.num_used_workers=iprot.readI32();
  struct.set_num_used_workers_isSet(true);
  struct.supervisor_id=iprot.readString();
  struct.set_supervisor_id_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
    struct.version=iprot.readString();
    struct.set_version_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map104=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.total_resources=new HashMap<String,Double>(2 * _map104.size);
      String _key105;
      double _val106;
      for (int _i107=0; _i107 < _map104.size; ++_i107) {
        _key105=iprot.readString();
        _val106=iprot.readDouble();
        struct.total_resources.put(_key105,_val106);
      }
    }
    struct.set_total_resources_isSet(true);
  }
  if (incoming.get(2)) {
    struct.used_mem=iprot.readDouble();
    struct.set_used_mem_isSet(true);
  }
  if (incoming.get(3)) {
    struct.used_cpu=iprot.readDouble();
    struct.set_used_cpu_isSet(true);
  }
}
