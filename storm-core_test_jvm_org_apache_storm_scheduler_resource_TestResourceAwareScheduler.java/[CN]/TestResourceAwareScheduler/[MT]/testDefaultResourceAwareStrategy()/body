{
  int spoutParallelism=1;
  int boltParallelism=2;
  TopologyBuilder builder=new TopologyBuilder();
  builder.setSpout("spout",new TestUtilsForResourceAwareScheduler.TestSpout(),spoutParallelism);
  builder.setBolt("bolt-1",new TestUtilsForResourceAwareScheduler.TestBolt(),boltParallelism).shuffleGrouping("spout");
  builder.setBolt("bolt-2",new TestUtilsForResourceAwareScheduler.TestBolt(),boltParallelism).shuffleGrouping("bolt-1");
  builder.setBolt("bolt-3",new TestUtilsForResourceAwareScheduler.TestBolt(),boltParallelism).shuffleGrouping("bolt-2");
  StormTopology stormToplogy=builder.createTopology();
  Config conf=new Config();
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,150.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1500.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(4,4,resourceMap);
  conf.putAll(Utils.readDefaultConfig());
  conf.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,org.apache.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  conf.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,org.apache.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  conf.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,org.apache.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  conf.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,50.0);
  conf.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,250);
  conf.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,250);
  conf.put(Config.TOPOLOGY_PRIORITY,0);
  conf.put(Config.TOPOLOGY_NAME,"testTopology");
  conf.put(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB,Double.MAX_VALUE);
  TopologyDetails topo=new TopologyDetails("testTopology-id",conf,stormToplogy,0,TestUtilsForResourceAwareScheduler.genExecsAndComps(stormToplogy,spoutParallelism,boltParallelism),this.currentTime);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  topoMap.put(topo.getId(),topo);
  Topologies topologies=new Topologies(topoMap);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),conf);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  rs.prepare(conf);
  rs.schedule(topologies,cluster);
  Map<String,List<String>> nodeToComps=new HashMap<String,List<String>>();
  for (  Map.Entry<ExecutorDetails,WorkerSlot> entry : cluster.getAssignments().get("testTopology-id").getExecutorToSlot().entrySet()) {
    WorkerSlot ws=entry.getValue();
    ExecutorDetails exec=entry.getKey();
    if (!nodeToComps.containsKey(ws.getNodeId())) {
      nodeToComps.put(ws.getNodeId(),new LinkedList<String>());
    }
    nodeToComps.get(ws.getNodeId()).add(topo.getExecutorToComponent().get(exec));
  }
  List<String> node1=new LinkedList<>();
  node1.add("spout");
  node1.add("bolt-1");
  node1.add("bolt-2");
  Assert.assertTrue("Check DefaultResourceAwareStrategy scheduling",checkDefaultStrategyScheduling(nodeToComps,node1));
  List<String> node2=new LinkedList<>();
  node2.add("bolt-3");
  node2.add("bolt-1");
  node2.add("bolt-2");
  Assert.assertTrue("Check DefaultResourceAwareStrategy scheduling",checkDefaultStrategyScheduling(nodeToComps,node2));
  List<String> node3=new LinkedList<>();
  node3.add("bolt-3");
  Assert.assertTrue("Check DefaultResourceAwareStrategy scheduling",checkDefaultStrategyScheduling(nodeToComps,node3));
  Assert.assertEquals("only three nodes should be used",3,nodeToComps.size());
}
