{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap1=new HashMap<>();
  resourceMap1.put(Config.SUPERVISOR_CPU_CAPACITY,800.0);
  resourceMap1.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,4096.0);
  Map<String,Number> resourceMap2=new HashMap<>();
  resourceMap2.put(Config.SUPERVISOR_CPU_CAPACITY,200.0);
  resourceMap2.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1024.0);
  Map<String,SupervisorDetails> supMap=new HashMap<String,SupervisorDetails>();
  for (int i=0; i < 2; i++) {
    List<Number> ports=new LinkedList<Number>();
    for (int j=0; j < 4; j++) {
      ports.add(j);
    }
    SupervisorDetails sup=new SupervisorDetails("sup-" + i,"host-" + i,null,ports,(Map)(i == 0 ? resourceMap1 : resourceMap2));
    supMap.put(sup.getId(),sup);
  }
  TopologyBuilder builder1=new TopologyBuilder();
  builder1.setSpout("wordSpout1",new TestWordSpout(),1).setCPULoad(300.0).setMemoryLoad(2000.0,48.0);
  StormTopology stormTopology1=builder1.createTopology();
  Config config1=new Config();
  config1.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap1=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology1,1,0);
  TopologyDetails topology1=new TopologyDetails("topology1",config1,stormTopology1,1,executorMap1,0);
  TopologyBuilder builder2=new TopologyBuilder();
  builder2.setSpout("wordSpout2",new TestWordSpout(),4).setCPULoad(100.0).setMemoryLoad(500.0,12.0);
  StormTopology stormTopology2=builder2.createTopology();
  Config config2=new Config();
  config2.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap2=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology2,4,0);
  TopologyDetails topology2=new TopologyDetails("topology2",config2,stormTopology2,1,executorMap2,0);
  TopologyBuilder builder3=new TopologyBuilder();
  builder3.setSpout("wordSpout3",new TestWordSpout(),4).setCPULoad(20.0).setMemoryLoad(200.0,56.0);
  StormTopology stormTopology3=builder3.createTopology();
  Config config3=new Config();
  config3.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap3=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology3,4,0);
  TopologyDetails topology3=new TopologyDetails("topology3",config2,stormTopology3,1,executorMap3,0);
  TopologyBuilder builder4=new TopologyBuilder();
  builder4.setSpout("wordSpout4",new TestWordSpout(),12).setCPULoad(30.0).setMemoryLoad(100.0,0.0);
  StormTopology stormTopology4=builder4.createTopology();
  Config config4=new Config();
  config4.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap4=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology4,12,0);
  TopologyDetails topology4=new TopologyDetails("topology4",config4,stormTopology4,1,executorMap4,0);
  TopologyBuilder builder5=new TopologyBuilder();
  builder5.setSpout("wordSpout5",new TestWordSpout(),40).setCPULoad(25.0).setMemoryLoad(100.0,28.0);
  StormTopology stormTopology5=builder5.createTopology();
  Config config5=new Config();
  config5.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap5=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology5,40,0);
  TopologyDetails topology5=new TopologyDetails("topology5",config5,stormTopology5,1,executorMap5,0);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config1);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  Map<String,TopologyDetails> topoMap=new HashMap<>();
  topoMap.put(topology1.getId(),topology1);
  topoMap.put(topology2.getId(),topology2);
  topoMap.put(topology3.getId(),topology3);
  Topologies topologies=new Topologies(topoMap);
  rs.prepare(config1);
  rs.schedule(topologies,cluster);
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology1.getId()));
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology2.getId()));
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology3.getId()));
  Map<SupervisorDetails,Double> superToCpu=new HashMap<>();
  Map<SupervisorDetails,Double> superToMem=new HashMap<>();
  TestUtilsForResourceAwareScheduler.getSupervisorToResourceUsage(cluster,topologies,superToCpu,superToMem);
  final Double EPSILON=0.0001;
  for (  SupervisorDetails supervisor : supMap.values()) {
    Double cpuAvailable=supervisor.getTotalCPU();
    Double memAvailable=supervisor.getTotalMemory();
    Double cpuUsed=superToCpu.get(supervisor);
    Double memUsed=superToMem.get(supervisor);
    Assert.assertTrue((Math.abs(memAvailable - memUsed) < EPSILON) || (Math.abs(cpuAvailable - cpuUsed) < EPSILON));
  }
  cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config1);
  topoMap=new HashMap<>();
  topoMap.put(topology1.getId(),topology1);
  topoMap.put(topology2.getId(),topology2);
  topoMap.put(topology4.getId(),topology4);
  topologies=new Topologies(topoMap);
  rs.prepare(config1);
  rs.schedule(topologies,cluster);
  int numTopologiesAssigned=0;
  if (cluster.getStatusMap().get(topology1.getId()).equals("Running - Fully Scheduled by DefaultResourceAwareStrategy")) {
    numTopologiesAssigned++;
  }
  if (cluster.getStatusMap().get(topology2.getId()).equals("Running - Fully Scheduled by DefaultResourceAwareStrategy")) {
    numTopologiesAssigned++;
  }
  if (cluster.getStatusMap().get(topology4.getId()).equals("Running - Fully Scheduled by DefaultResourceAwareStrategy")) {
    numTopologiesAssigned++;
  }
  Assert.assertEquals(2,numTopologiesAssigned);
  cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config1);
  topoMap=new HashMap<>();
  topoMap.put(topology5.getId(),topology5);
  topologies=new Topologies(topoMap);
  rs.prepare(config1);
  rs.schedule(topologies,cluster);
  superToCpu=new HashMap<>();
  superToMem=new HashMap<>();
  TestUtilsForResourceAwareScheduler.getSupervisorToResourceUsage(cluster,topologies,superToCpu,superToMem);
  for (  SupervisorDetails supervisor : supMap.values()) {
    Double cpuAvailable=supervisor.getTotalCPU();
    Double memAvailable=supervisor.getTotalMemory();
    Double cpuUsed=superToCpu.get(supervisor);
    Double memUsed=superToMem.get(supervisor);
    Assert.assertEquals(cpuAvailable,cpuUsed,0.0001);
    Assert.assertEquals(memAvailable,memUsed,0.0001);
  }
}
