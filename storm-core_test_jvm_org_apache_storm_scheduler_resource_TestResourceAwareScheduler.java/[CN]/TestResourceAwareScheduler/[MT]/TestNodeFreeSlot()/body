{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,100.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1000.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(4,4,resourceMap);
  Config config=new Config();
  config.putAll(Utils.readDefaultConfig());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,org.apache.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,org.apache.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,org.apache.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  config.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,100.0);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,500);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,500);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  TopologyDetails topo1=TestUtilsForResourceAwareScheduler.getTopology("topo-1",config,1,0,2,0,currentTime - 2,29);
  TopologyDetails topo2=TestUtilsForResourceAwareScheduler.getTopology("topo-2",config,1,0,2,0,currentTime - 2,10);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  topoMap.put(topo1.getId(),topo1);
  topoMap.put(topo2.getId(),topo2);
  Topologies topologies=new Topologies(topoMap);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  Map<String,RAS_Node> nodes=RAS_Nodes.getAllNodesFrom(cluster,topologies);
  for (  SchedulerAssignment entry : cluster.getAssignments().values()) {
    for (    WorkerSlot ws : entry.getSlots()) {
      double memoryBefore=nodes.get(ws.getNodeId()).getAvailableMemoryResources();
      double cpuBefore=nodes.get(ws.getNodeId()).getAvailableCpuResources();
      double memoryUsedByWorker=nodes.get(ws.getNodeId()).getMemoryUsedByWorker(ws);
      Assert.assertEquals("Check if memory used by worker is calculated correctly",1000.0,memoryUsedByWorker,0.001);
      double cpuUsedByWorker=nodes.get(ws.getNodeId()).getCpuUsedByWorker(ws);
      Assert.assertEquals("Check if CPU used by worker is calculated correctly",100.0,cpuUsedByWorker,0.001);
      nodes.get(ws.getNodeId()).free(ws);
      double memoryAfter=nodes.get(ws.getNodeId()).getAvailableMemoryResources();
      double cpuAfter=nodes.get(ws.getNodeId()).getAvailableCpuResources();
      Assert.assertEquals("Check if free correctly frees amount of memory",memoryBefore + memoryUsedByWorker,memoryAfter,0.001);
      Assert.assertEquals("Check if free correctly frees amount of memory",cpuBefore + cpuUsedByWorker,cpuAfter,0.001);
      Assert.assertFalse("Check if worker was removed from assignments",entry.getSlotToExecutors().containsKey(ws));
    }
  }
}
