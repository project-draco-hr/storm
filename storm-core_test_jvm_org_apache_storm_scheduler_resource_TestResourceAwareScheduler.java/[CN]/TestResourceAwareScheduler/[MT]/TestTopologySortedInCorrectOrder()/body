{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,100.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1024.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(20,4,resourceMap);
  Config config=new Config();
  config.putAll(Utils.readDefaultConfig());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,org.apache.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,org.apache.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,org.apache.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  config.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,10.0);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,128.0);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,0.0);
  config.put(Config.TOPOLOGY_SUBMITTER_USER,TOPOLOGY_SUBMITTER);
  Map<String,Map<String,Number>> resourceUserPool=new HashMap<String,Map<String,Number>>();
  resourceUserPool.put("jerry",new HashMap<String,Number>());
  resourceUserPool.get("jerry").put("cpu",1000);
  resourceUserPool.get("jerry").put("memory",8192.0);
  resourceUserPool.put("bobby",new HashMap<String,Number>());
  resourceUserPool.get("bobby").put("cpu",10000.0);
  resourceUserPool.get("bobby").put("memory",32768);
  resourceUserPool.put("derek",new HashMap<String,Number>());
  resourceUserPool.get("derek").put("cpu",5000.0);
  resourceUserPool.get("derek").put("memory",16384.0);
  config.put(Config.RESOURCE_AWARE_SCHEDULER_USER_POOLS,resourceUserPool);
  TopologyDetails topo1=TestUtilsForResourceAwareScheduler.getTopology("topo-1",config,5,15,1,1,currentTime - 2,20);
  TopologyDetails topo2=TestUtilsForResourceAwareScheduler.getTopology("topo-2",config,5,15,1,1,currentTime - 8,30);
  TopologyDetails topo3=TestUtilsForResourceAwareScheduler.getTopology("topo-3",config,5,15,1,1,currentTime - 16,30);
  TopologyDetails topo4=TestUtilsForResourceAwareScheduler.getTopology("topo-4",config,5,15,1,1,currentTime - 16,20);
  TopologyDetails topo5=TestUtilsForResourceAwareScheduler.getTopology("topo-5",config,5,15,1,1,currentTime - 24,30);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  topoMap.put(topo1.getId(),topo1);
  topoMap.put(topo2.getId(),topo2);
  topoMap.put(topo3.getId(),topo3);
  topoMap.put(topo4.getId(),topo4);
  topoMap.put(topo5.getId(),topo5);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  Topologies topologies=new Topologies(topoMap);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  Set<TopologyDetails> queue=rs.getUser("jerry").getTopologiesPending();
  Assert.assertEquals("check size",queue.size(),0);
  queue=rs.getUser("jerry").getTopologiesRunning();
  Iterator<TopologyDetails> itr=queue.iterator();
  TopologyDetails topo=itr.next();
  LOG.info("{} - {}",topo.getName(),queue);
  Assert.assertEquals("check order",topo.getName(),"topo-4");
  topo=itr.next();
  LOG.info("{} - {}",topo.getName(),queue);
  Assert.assertEquals("check order",topo.getName(),"topo-1");
  topo=itr.next();
  LOG.info("{} - {}",topo.getName(),queue);
  Assert.assertEquals("check order",topo.getName(),"topo-5");
  topo=itr.next();
  LOG.info("{} - {}",topo.getName(),queue);
  Assert.assertEquals("check order",topo.getName(),"topo-3");
  topo=itr.next();
  LOG.info("{} - {}",topo.getName(),queue);
  Assert.assertEquals("check order",topo.getName(),"topo-2");
  TopologyDetails topo6=TestUtilsForResourceAwareScheduler.getTopology("topo-6",config,5,15,1,1,currentTime - 30,10);
  topoMap.put(topo6.getId(),topo6);
  topologies=new Topologies(topoMap);
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  queue=rs.getUser("jerry").getTopologiesRunning();
  itr=queue.iterator();
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-6");
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-4");
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-1");
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-5");
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-3");
  topo=itr.next();
  Assert.assertEquals("check order",topo.getName(),"topo-2");
  queue=rs.getUser("jerry").getTopologiesPending();
  Assert.assertEquals("check size",queue.size(),0);
}
