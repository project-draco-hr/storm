{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,400.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,2000.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(2,4,resourceMap);
  TopologyBuilder builder1=new TopologyBuilder();
  builder1.setSpout("wordSpout1",new TestWordSpout(),1);
  builder1.setSpout("wordSpout2",new TestWordSpout(),1);
  builder1.setBolt("wordCountBolt1",new TestWordCounter(),1).shuffleGrouping("wordSpout1").shuffleGrouping("wordSpout2");
  builder1.setBolt("wordCountBolt2",new TestWordCounter(),1).shuffleGrouping("wordCountBolt1");
  builder1.setBolt("wordCountBolt3",new TestWordCounter(),1).shuffleGrouping("wordCountBolt1");
  builder1.setBolt("wordCountBolt4",new TestWordCounter(),1).shuffleGrouping("wordCountBolt2");
  builder1.setBolt("wordCountBolt5",new TestWordCounter(),1).shuffleGrouping("wordSpout2");
  StormTopology stormTopology1=builder1.createTopology();
  Config config=new Config();
  config.putAll(defaultTopologyConf);
  Map<ExecutorDetails,String> executorMap1=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology1,1,1);
  TopologyDetails topology1=new TopologyDetails("topology1",config,stormTopology1,0,executorMap1,0);
  TopologyBuilder builder2=new TopologyBuilder();
  builder2.setSpout("wordSpoutX",new TestWordSpout(),1);
  builder2.setSpout("wordSpoutY",new TestWordSpout(),1);
  StormTopology stormTopology2=builder2.createTopology();
  Map<ExecutorDetails,String> executorMap2=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology2,1,0);
  TopologyDetails topology2=new TopologyDetails("topology2",config,stormTopology2,0,executorMap2,0);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  Map<String,TopologyDetails> topoMap=new HashMap<>();
  topoMap.put(topology1.getId(),topology1);
  topoMap.put(topology2.getId(),topology2);
  Topologies topologies=new Topologies(topoMap);
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  SchedulerAssignment assignment1=cluster.getAssignmentById(topology1.getId());
  Set<WorkerSlot> assignedSlots1=assignment1.getSlots();
  Set<String> nodesIDs1=new HashSet<>();
  for (  WorkerSlot slot : assignedSlots1) {
    nodesIDs1.add(slot.getNodeId());
  }
  Collection<ExecutorDetails> executors1=assignment1.getExecutors();
  Assert.assertEquals(1,assignedSlots1.size());
  Assert.assertEquals(1,nodesIDs1.size());
  Assert.assertEquals(7,executors1.size());
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology1.getId()));
  SchedulerAssignment assignment2=cluster.getAssignmentById(topology2.getId());
  Set<WorkerSlot> assignedSlots2=assignment2.getSlots();
  Set<String> nodesIDs2=new HashSet<>();
  for (  WorkerSlot slot : assignedSlots2) {
    nodesIDs2.add(slot.getNodeId());
  }
  Collection<ExecutorDetails> executors2=assignment2.getExecutors();
  Assert.assertEquals(1,assignedSlots2.size());
  Assert.assertEquals(1,nodesIDs2.size());
  Assert.assertEquals(2,executors2.size());
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology2.getId()));
}
