{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,400.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,2000.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(2,2,resourceMap);
  TopologyBuilder builder1=new TopologyBuilder();
  builder1.setSpout("wordSpout1",new TestWordSpout(),4);
  StormTopology stormTopology1=builder1.createTopology();
  Config config1=new Config();
  config1.putAll(defaultTopologyConf);
  config1.put(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB,128.0);
  Map<ExecutorDetails,String> executorMap1=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology1,4,0);
  TopologyDetails topology1=new TopologyDetails("topology1",config1,stormTopology1,1,executorMap1,0);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config1);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  Map<String,TopologyDetails> topoMap=new HashMap<>();
  topoMap.put(topology1.getId(),topology1);
  Topologies topologies=new Topologies(topoMap);
  rs.prepare(config1);
  rs.schedule(topologies,cluster);
  Assert.assertEquals("Running - Fully Scheduled by DefaultResourceAwareStrategy",cluster.getStatusMap().get(topology1.getId()));
  Assert.assertEquals(4,cluster.getAssignedNumWorkers(topology1));
  TopologyBuilder builder2=new TopologyBuilder();
  builder2.setSpout("wordSpout2",new TestWordSpout(),5);
  StormTopology stormTopology2=builder2.createTopology();
  Config config2=new Config();
  config2.putAll(defaultTopologyConf);
  config2.put(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB,128.0);
  Map<ExecutorDetails,String> executorMap2=TestUtilsForResourceAwareScheduler.genExecsAndComps(stormTopology2,5,0);
  TopologyDetails topology2=new TopologyDetails("topology2",config2,stormTopology2,1,executorMap2,0);
  cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config2);
  topoMap=new HashMap<>();
  topoMap.put(topology2.getId(),topology2);
  topologies=new Topologies(topoMap);
  rs.prepare(config2);
  rs.schedule(topologies,cluster);
  Assert.assertEquals("Not enough resources to schedule - 0/5 executors scheduled",cluster.getStatusMap().get(topology2.getId()));
  Assert.assertEquals(5,cluster.getUnassignedExecutors(topology2).size());
}
