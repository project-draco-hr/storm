{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,400.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,2000.0);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(5,4,resourceMap);
  Topologies topologies=new Topologies(new HashMap<String,TopologyDetails>());
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),new HashMap());
  Map<String,RAS_Node> nodes=RAS_Nodes.getAllNodesFrom(cluster,topologies);
  Assert.assertEquals(5,nodes.size());
  RAS_Node node=nodes.get("sup-0");
  Assert.assertEquals("sup-0",node.getId());
  Assert.assertTrue(node.isAlive());
  Assert.assertEquals(0,node.getRunningTopologies().size());
  Assert.assertTrue(node.isTotallyFree());
  Assert.assertEquals(4,node.totalSlotsFree());
  Assert.assertEquals(0,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
  TopologyDetails topology1=TestUtilsForResourceAwareScheduler.getTopology("topology1",new HashMap(),1,0,2,0,0,0);
  List<ExecutorDetails> executors11=new ArrayList<>();
  executors11.add(new ExecutorDetails(1,1));
  node.assign(node.getFreeSlots().iterator().next(),topology1,executors11);
  Assert.assertEquals(1,node.getRunningTopologies().size());
  Assert.assertFalse(node.isTotallyFree());
  Assert.assertEquals(3,node.totalSlotsFree());
  Assert.assertEquals(1,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
  List<ExecutorDetails> executors12=new ArrayList<>();
  executors12.add(new ExecutorDetails(2,2));
  node.assign(node.getFreeSlots().iterator().next(),topology1,executors12);
  Assert.assertEquals(1,node.getRunningTopologies().size());
  Assert.assertFalse(node.isTotallyFree());
  Assert.assertEquals(2,node.totalSlotsFree());
  Assert.assertEquals(2,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
  TopologyDetails topology2=TestUtilsForResourceAwareScheduler.getTopology("topology2",new HashMap(),1,0,2,0,0,0);
  List<ExecutorDetails> executors21=new ArrayList<>();
  executors21.add(new ExecutorDetails(1,1));
  node.assign(node.getFreeSlots().iterator().next(),topology2,executors21);
  Assert.assertEquals(2,node.getRunningTopologies().size());
  Assert.assertFalse(node.isTotallyFree());
  Assert.assertEquals(1,node.totalSlotsFree());
  Assert.assertEquals(3,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
  List<ExecutorDetails> executors22=new ArrayList<>();
  executors22.add(new ExecutorDetails(2,2));
  node.assign(node.getFreeSlots().iterator().next(),topology2,executors22);
  Assert.assertEquals(2,node.getRunningTopologies().size());
  Assert.assertFalse(node.isTotallyFree());
  Assert.assertEquals(0,node.totalSlotsFree());
  Assert.assertEquals(4,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
  node.freeAllSlots();
  Assert.assertEquals(0,node.getRunningTopologies().size());
  Assert.assertTrue(node.isTotallyFree());
  Assert.assertEquals(4,node.totalSlotsFree());
  Assert.assertEquals(0,node.totalSlotsUsed());
  Assert.assertEquals(4,node.totalSlots());
}
