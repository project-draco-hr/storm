{
  EvictionPolicy<Integer> evictionPolicy=new CountEvictionPolicy<Integer>(5);
  TriggerPolicy<Integer> triggerPolicy=new CountTriggerPolicy<Integer>(2,windowManager,evictionPolicy);
  triggerPolicy.start();
  windowManager.setEvictionPolicy(evictionPolicy);
  windowManager.setTriggerPolicy(triggerPolicy);
  windowManager.add(1);
  windowManager.add(2);
  assertTrue(listener.onExpiryEvents.isEmpty());
  assertEquals(seq(1,2),listener.onActivationEvents);
  assertEquals(seq(1,2),listener.onActivationNewEvents);
  assertTrue(listener.onActivationExpiredEvents.isEmpty());
  windowManager.add(3);
  windowManager.add(4);
  assertTrue(listener.onExpiryEvents.isEmpty());
  assertEquals(seq(1,4),listener.onActivationEvents);
  assertEquals(seq(3,4),listener.onActivationNewEvents);
  assertTrue(listener.onActivationExpiredEvents.isEmpty());
  windowManager.add(5);
  windowManager.add(6);
  assertEquals(seq(1),listener.onExpiryEvents);
  assertEquals(seq(2,6),listener.onActivationEvents);
  assertEquals(seq(5,6),listener.onActivationNewEvents);
  assertEquals(seq(1),listener.onActivationExpiredEvents);
  listener.clear();
  windowManager.add(7);
  assertTrue(listener.onExpiryEvents.isEmpty());
  windowManager.add(8);
  assertEquals(seq(2,3),listener.onExpiryEvents);
  assertEquals(seq(4,8),listener.onActivationEvents);
  assertEquals(seq(7,8),listener.onActivationNewEvents);
  assertEquals(seq(2,3),listener.onActivationExpiredEvents);
}
