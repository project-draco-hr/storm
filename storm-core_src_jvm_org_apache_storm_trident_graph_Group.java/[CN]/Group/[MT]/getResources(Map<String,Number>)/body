{
  if (defaults == null) {
    defaults=new HashMap<>();
  }
  Map<String,Number> resources=null;
  for (  Node n : nodes) {
    if (resources == null) {
      resources=new HashMap<>(defaults);
      resources.putAll(n.getResources());
    }
 else {
      Map<String,Number> node_res=new HashMap<>(defaults);
      node_res.putAll(n.getResources());
      if (!node_res.keySet().equals(resources.keySet())) {
        StringBuilder ops=new StringBuilder();
        for (        Node nod : nodes) {
          Set<String> resource_keys=new HashSet<>(defaults.keySet());
          resource_keys.addAll(nod.getResources().keySet());
          ops.append("\t[ " + nod.shortString() + ", Resources Set: "+ resource_keys+ " ]\n");
        }
        if (node_res.keySet().containsAll(resources.keySet())) {
          Set<String> diffset=new HashSet<>(node_res.keySet());
          diffset.removeAll(resources.keySet());
          throw new RuntimeException("Found an operation with resources set which are not set in other operations in the group:\n" + "\t[ " + n.shortString() + " ]: "+ diffset+ "\n"+ "Either set these resources in all other operations in the group, add a default setting, or remove the setting from this operation.\n"+ "The group at fault:\n"+ ops);
        }
 else         if (resources.keySet().containsAll(node_res.keySet())) {
          Set<String> diffset=new HashSet<>(resources.keySet());
          diffset.removeAll(node_res.keySet());
          throw new RuntimeException("Found an operation with resources unset which are set in other operations in the group:\n" + "\t[ " + n.shortString() + " ]: "+ diffset+ "\n"+ "Either set these resources in all other operations in the group, add a default setting, or remove the setting from all other operations.\n"+ "The group at fault:\n"+ ops);
        }
      }
      for (      Map.Entry<String,Number> kv : node_res.entrySet()) {
        String key=kv.getKey();
        Number val=kv.getValue();
        Number newval=new Double(val.doubleValue() + resources.get(key).doubleValue());
        resources.put(key,newval);
      }
    }
  }
  return resources;
}
