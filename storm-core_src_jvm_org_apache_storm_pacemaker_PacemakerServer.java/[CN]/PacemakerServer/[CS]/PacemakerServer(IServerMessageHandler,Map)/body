{
  int maxWorkers=(int)config.get(Config.PACEMAKER_MAX_THREADS);
  this.port=(int)config.get(Config.PACEMAKER_PORT);
  this.handler=handler;
  this.topo_name="pacemaker_server";
  String auth=(String)config.get(Config.PACEMAKER_AUTH_METHOD);
  if (auth.equals("DIGEST")) {
    Configuration login_conf=AuthUtils.GetConfiguration(config);
    authMethod=ThriftNettyServerCodec.AuthMethod.DIGEST;
    this.secret=AuthUtils.makeDigestPayload(login_conf,AuthUtils.LOGIN_CONTEXT_PACEMAKER_DIGEST);
    if (this.secret == null) {
      LOG.error("Can't start pacemaker server without digest secret.");
      throw new RuntimeException("Can't start pacemaker server without digest secret.");
    }
  }
 else   if (auth.equals("KERBEROS")) {
    authMethod=ThriftNettyServerCodec.AuthMethod.KERBEROS;
  }
 else   if (auth.equals("NONE")) {
    authMethod=ThriftNettyServerCodec.AuthMethod.NONE;
  }
 else {
    LOG.error("Can't start pacemaker server without proper PACEMAKER_AUTH_METHOD.");
    throw new RuntimeException("Can't start pacemaker server without proper PACEMAKER_AUTH_METHOD.");
  }
  ThreadFactory bossFactory=new NettyRenameThreadFactory("server-boss");
  ThreadFactory workerFactory=new NettyRenameThreadFactory("server-worker");
  NioServerSocketChannelFactory factory;
  if (maxWorkers > 0) {
    factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory),maxWorkers);
  }
 else {
    factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(bossFactory),Executors.newCachedThreadPool(workerFactory));
  }
  bootstrap=new ServerBootstrap(factory);
  bootstrap.setOption("tcpNoDelay",true);
  bootstrap.setOption("sendBufferSize",FIVE_MB_IN_BYTES);
  bootstrap.setOption("keepAlive",true);
  ChannelPipelineFactory pipelineFactory=new ThriftNettyServerCodec(this,config,authMethod).pipelineFactory();
  bootstrap.setPipelineFactory(pipelineFactory);
  Channel channel=bootstrap.bind(new InetSocketAddress(port));
  allChannels.add(channel);
  LOG.info("Bound server to port: {}",Integer.toString(port));
}
