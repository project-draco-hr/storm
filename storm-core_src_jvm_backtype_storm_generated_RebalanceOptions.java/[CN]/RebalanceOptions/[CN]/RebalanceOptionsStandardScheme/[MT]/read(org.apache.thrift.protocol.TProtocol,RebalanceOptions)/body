{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
        struct.wait_secs=iprot.readI32();
        struct.set_wait_secs_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.num_workers=iprot.readI32();
    struct.set_num_workers_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map460=iprot.readMapBegin();
  struct.num_executors=new HashMap<String,Integer>(2 * _map460.size);
  String _key461;
  int _val462;
  for (int _i463=0; _i463 < _map460.size; ++_i463) {
    _key461=iprot.readString();
    _val462=iprot.readI32();
    struct.num_executors.put(_key461,_val462);
  }
  iprot.readMapEnd();
}
struct.set_num_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
