{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.storm_id=iprot.readString();
        struct.set_storm_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map426=iprot.readMapBegin();
      struct.executor_stats=new HashMap<ExecutorInfo,ExecutorStats>(2 * _map426.size);
      ExecutorInfo _key427;
      ExecutorStats _val428;
      for (int _i429=0; _i429 < _map426.size; ++_i429) {
        _key427=new ExecutorInfo();
        _key427.read(iprot);
        _val428=new ExecutorStats();
        _val428.read(iprot);
        struct.executor_stats.put(_key427,_val428);
      }
      iprot.readMapEnd();
    }
    struct.set_executor_stats_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.time_secs=iprot.readI32();
struct.set_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
