{
  Map<String,RAS_Node> nodeIdToNode=new HashMap<String,RAS_Node>();
  Map<String,Map<String,Map<String,Collection<ExecutorDetails>>>> assignmentRelationshipMap=new HashMap<String,Map<String,Map<String,Collection<ExecutorDetails>>>>();
  Map<String,Map<String,WorkerSlot>> workerIdToWorker=new HashMap<String,Map<String,WorkerSlot>>();
  for (  SchedulerAssignment assignment : cluster.getAssignments().values()) {
    String topId=assignment.getTopologyId();
    for (    Map.Entry<WorkerSlot,Collection<ExecutorDetails>> entry : assignment.getSlotToExecutors().entrySet()) {
      WorkerSlot slot=entry.getKey();
      String nodeId=slot.getNodeId();
      Collection<ExecutorDetails> execs=entry.getValue();
      if (!assignmentRelationshipMap.containsKey(nodeId)) {
        assignmentRelationshipMap.put(nodeId,new HashMap<String,Map<String,Collection<ExecutorDetails>>>());
        workerIdToWorker.put(nodeId,new HashMap<String,WorkerSlot>());
      }
      workerIdToWorker.get(nodeId).put(slot.getId(),slot);
      if (!assignmentRelationshipMap.get(nodeId).containsKey(topId)) {
        assignmentRelationshipMap.get(nodeId).put(topId,new HashMap<String,Collection<ExecutorDetails>>());
      }
      if (!assignmentRelationshipMap.get(nodeId).get(topId).containsKey(slot.getId())) {
        assignmentRelationshipMap.get(nodeId).get(topId).put(slot.getId(),new LinkedList<ExecutorDetails>());
      }
      assignmentRelationshipMap.get(nodeId).get(topId).get(slot.getId()).addAll(execs);
    }
  }
  for (  SupervisorDetails sup : cluster.getSupervisors().values()) {
    for (    int port : sup.getAllPorts()) {
      WorkerSlot worker=new WorkerSlot(sup.getId(),port);
      if (!workerIdToWorker.containsKey(sup.getId())) {
        workerIdToWorker.put(sup.getId(),new HashMap<String,WorkerSlot>());
      }
      if (!workerIdToWorker.get(sup.getId()).containsKey(worker.getId())) {
        workerIdToWorker.get(sup.getId()).put(worker.getId(),worker);
      }
    }
    nodeIdToNode.put(sup.getId(),new RAS_Node(sup.getId(),sup,cluster,topologies,workerIdToWorker.get(sup.getId()),assignmentRelationshipMap.get(sup.getId())));
  }
  for (  Map.Entry<String,Map<String,Map<String,Collection<ExecutorDetails>>>> entry : assignmentRelationshipMap.entrySet()) {
    String nodeId=entry.getKey();
    Map<String,Map<String,Collection<ExecutorDetails>>> assignments=entry.getValue();
    if (!nodeIdToNode.containsKey(nodeId)) {
      LOG.info("Found an assigned slot(s) on a dead supervisor {} with assignments {}",nodeId,assignments);
      nodeIdToNode.put(nodeId,new RAS_Node(nodeId,null,cluster,topologies,workerIdToWorker.get(nodeId),assignments));
    }
  }
  updateAvailableResources(cluster,topologies,nodeIdToNode);
  return nodeIdToNode;
}
