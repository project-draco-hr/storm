{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map276=iprot.readMapBegin();
          struct.emitted=new HashMap<String,Map<String,Long>>(2 * _map276.size);
          String _key277;
          Map<String,Long> _val278;
          for (int _i279=0; _i279 < _map276.size; ++_i279) {
            _key277=iprot.readString();
{
              org.apache.thrift.protocol.TMap _map280=iprot.readMapBegin();
              _val278=new HashMap<String,Long>(2 * _map280.size);
              String _key281;
              long _val282;
              for (int _i283=0; _i283 < _map280.size; ++_i283) {
                _key281=iprot.readString();
                _val282=iprot.readI64();
                _val278.put(_key281,_val282);
              }
              iprot.readMapEnd();
            }
            struct.emitted.put(_key277,_val278);
          }
          iprot.readMapEnd();
        }
        struct.set_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map284=iprot.readMapBegin();
      struct.transferred=new HashMap<String,Map<String,Long>>(2 * _map284.size);
      String _key285;
      Map<String,Long> _val286;
      for (int _i287=0; _i287 < _map284.size; ++_i287) {
        _key285=iprot.readString();
{
          org.apache.thrift.protocol.TMap _map288=iprot.readMapBegin();
          _val286=new HashMap<String,Long>(2 * _map288.size);
          String _key289;
          long _val290;
          for (int _i291=0; _i291 < _map288.size; ++_i291) {
            _key289=iprot.readString();
            _val290=iprot.readI64();
            _val286.put(_key289,_val290);
          }
          iprot.readMapEnd();
        }
        struct.transferred.put(_key285,_val286);
      }
      iprot.readMapEnd();
    }
    struct.set_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.specific=new ExecutorSpecificStats();
struct.specific.read(iprot);
struct.set_specific_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.rate=iprot.readDouble();
struct.set_rate_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
