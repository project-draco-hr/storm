{
  ByteBufferMessageSet msgs=null;
  String topic=config.topic;
  int partitionId=partition.partition;
  FetchRequestBuilder builder=new FetchRequestBuilder();
  FetchRequest fetchRequest=builder.addFetch(topic,partitionId,offset,config.fetchSizeBytes).clientId(config.clientId).maxWait(config.fetchMaxWait).build();
  FetchResponse fetchResponse;
  try {
    fetchResponse=consumer.fetch(fetchRequest);
  }
 catch (  Exception e) {
    if (e instanceof ConnectException || e instanceof SocketTimeoutException || e instanceof IOException|| e instanceof UnresolvedAddressException) {
      LOG.warn("Network error when fetching messages:",e);
      throw new FailedFetchException(e);
    }
 else {
      throw new RuntimeException(e);
    }
  }
  if (fetchResponse.hasError()) {
    KafkaError error=KafkaError.getError(fetchResponse.errorCode(topic,partitionId));
    if (error.equals(KafkaError.OFFSET_OUT_OF_RANGE) && config.useStartOffsetTimeIfOffsetOutOfRange) {
      String msg="Got fetch request with offset out of range: [" + offset + "]; "+ "retrying with default start offset time from configuration. "+ "configured start offset time: ["+ config.startOffsetTime+ "]";
      LOG.warn(msg);
      throw new UpdateOffsetException(msg);
    }
 else {
      String message="Error fetching data from [" + partition + "] for topic ["+ topic+ "]: ["+ error+ "]";
      LOG.error(message);
      throw new FailedFetchException(message);
    }
  }
 else {
    msgs=fetchResponse.messageSet(topic,partitionId);
  }
  return msgs;
}
