{
  boolean ret=false;
  Object id=tup.getValue(0);
synchronized (_tracked) {
    TrackingInfo track=_tracked.get(id);
    try {
      if (track == null || track.failed)       ret=true;
      if (track != null && !track.failed && track.receivedId && (_sourceArgs.isEmpty() || track.reportCount == _numSourceReports && track.expectedTupleCount == track.receivedTuples)) {
        if (_delegate instanceof FinishedCallback) {
          ((FinishedCallback)_delegate).finishedId(id);
        }
        if (!(_sourceArgs.isEmpty() || tup.getSourceStreamId().equals(Constants.COORDINATED_STREAM_ID) || (_idStreamSpec != null && tup.getSourceGlobalStreamid().equals(_idStreamSpec._id)))) {
          throw new IllegalStateException("Coordination condition met on a non-coordinating tuple. Should be impossible");
        }
        Iterator<Integer> outTasks=_countOutTasks.iterator();
        while (outTasks.hasNext()) {
          int task=outTasks.next();
          int numTuples=get(track.taskEmittedTuples,task,0);
          _collector.emitDirect(task,Constants.COORDINATED_STREAM_ID,tup,new Values(id,numTuples));
        }
        track.finished=true;
        _tracked.remove(id);
      }
    }
 catch (    FailedException e) {
      LOG.error("Failed to finish batch",e);
      track.failed=true;
      ret=true;
    }
  }
  return ret;
}
