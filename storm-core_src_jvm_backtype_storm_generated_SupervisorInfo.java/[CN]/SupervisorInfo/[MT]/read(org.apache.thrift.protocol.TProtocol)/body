{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.I64) {
        this.time_secs=iprot.readI64();
        set_time_secs_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.STRING) {
    this.hostname=iprot.readString();
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.assignment_id=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list168=iprot.readListBegin();
this.used_ports=new ArrayList<Long>(_list168.size);
for (int _i169=0; _i169 < _list168.size; ++_i169) {
long _elem170;
_elem170=iprot.readI64();
this.used_ports.add(_elem170);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list171=iprot.readListBegin();
this.meta=new ArrayList<Long>(_list171.size);
for (int _i172=0; _i172 < _list171.size; ++_i172) {
long _elem173;
_elem173=iprot.readI64();
this.meta.add(_elem173);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map174=iprot.readMapBegin();
this.scheduler_meta=new HashMap<String,String>(2 * _map174.size);
for (int _i175=0; _i175 < _map174.size; ++_i175) {
String _key176;
String _val177;
_key176=iprot.readString();
_val177=iprot.readString();
this.scheduler_meta.put(_key176,_val177);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == org.apache.thrift.protocol.TType.I64) {
this.uptime_secs=iprot.readI64();
set_uptime_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
