{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
        struct.time_secs=iprot.readI64();
        struct.set_time_secs_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.hostname=iprot.readString();
    struct.set_hostname_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.assignment_id=iprot.readString();
struct.set_assignment_id_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list452=iprot.readListBegin();
struct.used_ports=new ArrayList<Long>(_list452.size);
long _elem453;
for (int _i454=0; _i454 < _list452.size; ++_i454) {
_elem453=iprot.readI64();
struct.used_ports.add(_elem453);
}
iprot.readListEnd();
}
struct.set_used_ports_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list455=iprot.readListBegin();
struct.meta=new ArrayList<Long>(_list455.size);
long _elem456;
for (int _i457=0; _i457 < _list455.size; ++_i457) {
_elem456=iprot.readI64();
struct.meta.add(_elem456);
}
iprot.readListEnd();
}
struct.set_meta_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map458=iprot.readMapBegin();
struct.scheduler_meta=new HashMap<String,String>(2 * _map458.size);
String _key459;
String _val460;
for (int _i461=0; _i461 < _map458.size; ++_i461) {
_key459=iprot.readString();
_val460=iprot.readString();
struct.scheduler_meta.put(_key459,_val460);
}
iprot.readMapEnd();
}
struct.set_scheduler_meta_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.uptime_secs=iprot.readI64();
struct.set_uptime_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.version=iprot.readString();
struct.set_version_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
