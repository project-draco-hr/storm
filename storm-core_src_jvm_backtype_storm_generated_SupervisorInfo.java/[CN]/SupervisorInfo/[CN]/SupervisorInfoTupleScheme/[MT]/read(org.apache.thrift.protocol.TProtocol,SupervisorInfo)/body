{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.time_secs=iprot.readI64();
  struct.set_time_secs_isSet(true);
  struct.hostname=iprot.readString();
  struct.set_hostname_isSet(true);
  BitSet incoming=iprot.readBitSet(7);
  if (incoming.get(0)) {
    struct.assignment_id=iprot.readString();
    struct.set_assignment_id_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TList _list502=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.used_ports=new ArrayList<Long>(_list502.size);
      long _elem503;
      for (int _i504=0; _i504 < _list502.size; ++_i504) {
        _elem503=iprot.readI64();
        struct.used_ports.add(_elem503);
      }
    }
    struct.set_used_ports_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list505=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.meta=new ArrayList<Long>(_list505.size);
      long _elem506;
      for (int _i507=0; _i507 < _list505.size; ++_i507) {
        _elem506=iprot.readI64();
        struct.meta.add(_elem506);
      }
    }
    struct.set_meta_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map508=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.scheduler_meta=new HashMap<String,String>(2 * _map508.size);
      String _key509;
      String _val510;
      for (int _i511=0; _i511 < _map508.size; ++_i511) {
        _key509=iprot.readString();
        _val510=iprot.readString();
        struct.scheduler_meta.put(_key509,_val510);
      }
    }
    struct.set_scheduler_meta_isSet(true);
  }
  if (incoming.get(4)) {
    struct.uptime_secs=iprot.readI64();
    struct.set_uptime_secs_isSet(true);
  }
  if (incoming.get(5)) {
    struct.version=iprot.readString();
    struct.set_version_isSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map512=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.resources_map=new HashMap<String,Double>(2 * _map512.size);
      String _key513;
      double _val514;
      for (int _i515=0; _i515 < _map512.size; ++_i515) {
        _key513=iprot.readString();
        _val514=iprot.readDouble();
        struct.resources_map.put(_key513,_val514);
      }
    }
    struct.set_resources_map_isSet(true);
  }
}
