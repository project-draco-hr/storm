{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.time_secs=iprot.readI64();
  struct.set_time_secs_isSet(true);
  struct.hostname=iprot.readString();
  struct.set_hostname_isSet(true);
  BitSet incoming=iprot.readBitSet(6);
  if (incoming.get(0)) {
    struct.assignment_id=iprot.readString();
    struct.set_assignment_id_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TList _list486=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.used_ports=new ArrayList<Long>(_list486.size);
      long _elem487;
      for (int _i488=0; _i488 < _list486.size; ++_i488) {
        _elem487=iprot.readI64();
        struct.used_ports.add(_elem487);
      }
    }
    struct.set_used_ports_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list489=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.meta=new ArrayList<Long>(_list489.size);
      long _elem490;
      for (int _i491=0; _i491 < _list489.size; ++_i491) {
        _elem490=iprot.readI64();
        struct.meta.add(_elem490);
      }
    }
    struct.set_meta_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map492=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.scheduler_meta=new HashMap<String,String>(2 * _map492.size);
      String _key493;
      String _val494;
      for (int _i495=0; _i495 < _map492.size; ++_i495) {
        _key493=iprot.readString();
        _val494=iprot.readString();
        struct.scheduler_meta.put(_key493,_val494);
      }
    }
    struct.set_scheduler_meta_isSet(true);
  }
  if (incoming.get(4)) {
    struct.uptime_secs=iprot.readI64();
    struct.set_uptime_secs_isSet(true);
  }
  if (incoming.get(5)) {
    struct.version=iprot.readString();
    struct.set_version_isSet(true);
  }
}
