{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  oprot.writeI64(struct.time_secs);
  oprot.writeString(struct.hostname);
  BitSet optionals=new BitSet();
  if (struct.is_set_assignment_id()) {
    optionals.set(0);
  }
  if (struct.is_set_used_ports()) {
    optionals.set(1);
  }
  if (struct.is_set_meta()) {
    optionals.set(2);
  }
  if (struct.is_set_scheduler_meta()) {
    optionals.set(3);
  }
  if (struct.is_set_uptime_secs()) {
    optionals.set(4);
  }
  if (struct.is_set_version()) {
    optionals.set(5);
  }
  if (struct.is_set_resources_map()) {
    optionals.set(6);
  }
  oprot.writeBitSet(optionals,7);
  if (struct.is_set_assignment_id()) {
    oprot.writeString(struct.assignment_id);
  }
  if (struct.is_set_used_ports()) {
{
      oprot.writeI32(struct.used_ports.size());
      for (      long _iter506 : struct.used_ports) {
        oprot.writeI64(_iter506);
      }
    }
  }
  if (struct.is_set_meta()) {
{
      oprot.writeI32(struct.meta.size());
      for (      long _iter507 : struct.meta) {
        oprot.writeI64(_iter507);
      }
    }
  }
  if (struct.is_set_scheduler_meta()) {
{
      oprot.writeI32(struct.scheduler_meta.size());
      for (      Map.Entry<String,String> _iter508 : struct.scheduler_meta.entrySet()) {
        oprot.writeString(_iter508.getKey());
        oprot.writeString(_iter508.getValue());
      }
    }
  }
  if (struct.is_set_uptime_secs()) {
    oprot.writeI64(struct.uptime_secs);
  }
  if (struct.is_set_version()) {
    oprot.writeString(struct.version);
  }
  if (struct.is_set_resources_map()) {
{
      oprot.writeI32(struct.resources_map.size());
      for (      Map.Entry<String,Double> _iter509 : struct.resources_map.entrySet()) {
        oprot.writeString(_iter509.getKey());
        oprot.writeDouble(_iter509.getValue());
      }
    }
  }
}
