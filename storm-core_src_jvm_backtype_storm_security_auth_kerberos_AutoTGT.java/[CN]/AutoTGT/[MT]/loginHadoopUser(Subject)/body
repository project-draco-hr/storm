{
  Class<?> ugi=null;
  try {
    ugi=Class.forName("org.apache.hadoop.security.UserGroupInformation");
  }
 catch (  ClassNotFoundException e) {
    LOG.info("Hadoop was not found on the class path");
    return;
  }
  try {
    Method isSecEnabled=ugi.getMethod("isSecurityEnabled");
    if (!((Boolean)isSecEnabled.invoke(null))) {
      LOG.warn("Hadoop is on the classpath but not configured for " + "security, if you want security you need to be sure that " + "hadoop.security.authentication=kerberos in core-site.xml "+ "in your jar");
      return;
    }
    try {
      Method login=ugi.getMethod("loginUserFromSubject",Subject.class);
      login.invoke(null,subject);
    }
 catch (    NoSuchMethodException me) {
      String name=getTGT(subject).getClient().toString();
      LOG.warn("The Hadoop client does not have loginUserFromSubject, Trying to hack around it. This may not work...");
      Class<?> confClass=Class.forName("org.apache.hadoop.conf.Configuration");
      Constructor confCons=confClass.getConstructor();
      Object conf=confCons.newInstance();
      Class<?> hknClass=Class.forName("org.apache.hadoop.security.HadoopKerberosName");
      Method hknSetConf=hknClass.getMethod("setConfiguration",confClass);
      hknSetConf.invoke(null,conf);
      Class<?> authMethodClass=Class.forName("org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod");
      Object kerbAuthMethod=null;
      for (      Object authMethod : authMethodClass.getEnumConstants()) {
        if ("KERBEROS".equals(authMethod.toString())) {
          kerbAuthMethod=authMethod;
          break;
        }
      }
      Class<?> userClass=Class.forName("org.apache.hadoop.security.User");
      Constructor userCons=userClass.getConstructor(String.class,authMethodClass,LoginContext.class);
      userCons.setAccessible(true);
      Object user=userCons.newInstance(name,kerbAuthMethod,null);
      subject.getPrincipals().add((Principal)user);
    }
  }
 catch (  Exception e) {
    LOG.warn("Something went wrong while trying to initialize Hadoop through reflection. This version of hadoop may not be compatible.",e);
  }
}
