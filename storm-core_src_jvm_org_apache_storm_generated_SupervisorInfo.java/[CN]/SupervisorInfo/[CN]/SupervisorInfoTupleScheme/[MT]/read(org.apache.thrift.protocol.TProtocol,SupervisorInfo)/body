{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.time_secs=iprot.readI64();
  struct.set_time_secs_isSet(true);
  struct.hostname=iprot.readString();
  struct.set_hostname_isSet(true);
  BitSet incoming=iprot.readBitSet(7);
  if (incoming.get(0)) {
    struct.assignment_id=iprot.readString();
    struct.set_assignment_id_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TList _list576=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.used_ports=new ArrayList<Long>(_list576.size);
      long _elem577;
      for (int _i578=0; _i578 < _list576.size; ++_i578) {
        _elem577=iprot.readI64();
        struct.used_ports.add(_elem577);
      }
    }
    struct.set_used_ports_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list579=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.meta=new ArrayList<Long>(_list579.size);
      long _elem580;
      for (int _i581=0; _i581 < _list579.size; ++_i581) {
        _elem580=iprot.readI64();
        struct.meta.add(_elem580);
      }
    }
    struct.set_meta_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map582=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.scheduler_meta=new HashMap<String,String>(2 * _map582.size);
      String _key583;
      String _val584;
      for (int _i585=0; _i585 < _map582.size; ++_i585) {
        _key583=iprot.readString();
        _val584=iprot.readString();
        struct.scheduler_meta.put(_key583,_val584);
      }
    }
    struct.set_scheduler_meta_isSet(true);
  }
  if (incoming.get(4)) {
    struct.uptime_secs=iprot.readI64();
    struct.set_uptime_secs_isSet(true);
  }
  if (incoming.get(5)) {
    struct.version=iprot.readString();
    struct.set_version_isSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map586=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.resources_map=new HashMap<String,Double>(2 * _map586.size);
      String _key587;
      double _val588;
      for (int _i589=0; _i589 < _map586.size; ++_i589) {
        _key587=iprot.readString();
        _val588=iprot.readDouble();
        struct.resources_map.put(_key587,_val588);
      }
    }
    struct.set_resources_map_isSet(true);
  }
}
