{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.time_secs=iprot.readI64();
  struct.set_time_secs_isSet(true);
  struct.hostname=iprot.readString();
  struct.set_hostname_isSet(true);
  BitSet incoming=iprot.readBitSet(7);
  if (incoming.get(0)) {
    struct.assignment_id=iprot.readString();
    struct.set_assignment_id_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TList _list596=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.used_ports=new ArrayList<Long>(_list596.size);
      long _elem597;
      for (int _i598=0; _i598 < _list596.size; ++_i598) {
        _elem597=iprot.readI64();
        struct.used_ports.add(_elem597);
      }
    }
    struct.set_used_ports_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list599=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.meta=new ArrayList<Long>(_list599.size);
      long _elem600;
      for (int _i601=0; _i601 < _list599.size; ++_i601) {
        _elem600=iprot.readI64();
        struct.meta.add(_elem600);
      }
    }
    struct.set_meta_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map602=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.scheduler_meta=new HashMap<String,String>(2 * _map602.size);
      String _key603;
      String _val604;
      for (int _i605=0; _i605 < _map602.size; ++_i605) {
        _key603=iprot.readString();
        _val604=iprot.readString();
        struct.scheduler_meta.put(_key603,_val604);
      }
    }
    struct.set_scheduler_meta_isSet(true);
  }
  if (incoming.get(4)) {
    struct.uptime_secs=iprot.readI64();
    struct.set_uptime_secs_isSet(true);
  }
  if (incoming.get(5)) {
    struct.version=iprot.readString();
    struct.set_version_isSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map606=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.resources_map=new HashMap<String,Double>(2 * _map606.size);
      String _key607;
      double _val608;
      for (int _i609=0; _i609 < _map606.size; ++_i609) {
        _key607=iprot.readString();
        _val608=iprot.readDouble();
        struct.resources_map.put(_key607,_val608);
      }
    }
    struct.set_resources_map_isSet(true);
  }
}
