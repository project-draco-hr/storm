{
  if (!cmd.hasOption("no-splash")) {
    printSplash();
  }
  boolean dumpYaml=cmd.hasOption("dump-yaml");
  TopologyDef topologyDef=null;
  String filePath=(String)cmd.getArgList().get(0);
  if (cmd.hasOption("resource")) {
    printf("Parsing classpath resource: %s",filePath);
    topologyDef=FluxParser.parseResource(filePath,dumpYaml,true);
  }
 else {
    printf("Parsing file: %s",new File(filePath).getAbsolutePath());
    topologyDef=FluxParser.parseFile(filePath,dumpYaml,true);
  }
  String topologyName=topologyDef.getName();
  Config conf=FluxBuilder.buildConfig(topologyDef);
  ExecutionContext context=new ExecutionContext(topologyDef,conf);
  StormTopology topology=FluxBuilder.buildTopology(context);
  if (!cmd.hasOption("no-detail")) {
    printTopologyInfo(context);
  }
  if (!cmd.hasOption("dry-run")) {
    if (cmd.hasOption("remote")) {
      LOG.info("Running remotely...");
      try {
        StormSubmitter.submitTopologyWithProgressBar(topologyName,conf,topology);
      }
 catch (      Exception e) {
        LOG.warn("Unable to deploy topology tp remote cluster.",e);
      }
    }
 else {
      LOG.info("Running in local mode...");
      String sleepStr=cmd.getOptionValue("sleep");
      Long sleepTime=DEFAULT_LOCAL_SLEEP_TIME;
      if (sleepStr != null) {
        sleepTime=Long.parseLong(sleepStr);
      }
      LOG.debug("Sleep time: {}",sleepTime);
      LocalCluster cluster=new LocalCluster();
      cluster.submitTopology(topologyName,conf,topology);
      Utils.sleep(sleepTime);
      cluster.killTopology(topologyName);
      cluster.shutdown();
    }
  }
}
