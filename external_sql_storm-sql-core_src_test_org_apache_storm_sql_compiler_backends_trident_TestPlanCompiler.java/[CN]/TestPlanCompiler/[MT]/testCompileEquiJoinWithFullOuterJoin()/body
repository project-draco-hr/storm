{
  final int EXPECTED_VALUE_SIZE=8;
  final Map<String,ISqlTridentDataSource> data=new HashMap<>();
  data.put("EMP",new TestUtils.MockSqlTridentJoinDataSourceEmp());
  data.put("DEPT",new TestUtils.MockSqlTridentJoinDataSourceDept());
  String sql="SELECT e.DEPTID, d.DEPTNAME FROM EMP AS e FULL OUTER JOIN DEPT AS d ON e.DEPTID = d.DEPTID WHERE (d.DEPTNAME is null OR e.EMPNAME is null)";
  TestCompilerUtils.CalciteState state=TestCompilerUtils.sqlOverSimpleEquiJoinTables(sql);
  PlanCompiler compiler=new PlanCompiler(data,typeFactory);
  final AbstractTridentProcessor proc=compiler.compileForTest(state.tree());
  final TridentTopology topo=proc.build(data);
  Fields f=proc.outputStream().getOutputFields();
  proc.outputStream().partitionPersist(new TestUtils.MockStateFactory(),f,new TestUtils.MockStateUpdater(),new Fields());
  runTridentTopology(EXPECTED_VALUE_SIZE,proc,topo);
  assertListsAreEqualIgnoringOrder(Lists.newArrayList(new Values(null,"dept-2"),new Values(null,"dept-3"),new Values(null,"dept-4"),new Values(10,null),new Values(11,null),new Values(12,null),new Values(13,null),new Values(14,null)),getCollectedValues());
}
