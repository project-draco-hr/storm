{
  final int EXPECTED_VALUE_SIZE=1;
  final Map<String,ISqlTridentDataSource> data=new HashMap<>();
  data.put("FOO",new TestUtils.MockSqlTridentGroupedDataSource());
  String sql="SELECT GRPID, COUNT(*) AS CNT, MAX(AGE) AS MAX_AGE, MIN(AGE) AS MIN_AGE, AVG(AGE) AS AVG_AGE, MAX(AGE) - MIN(AGE) AS DIFF FROM FOO GROUP BY GRPID";
  TestCompilerUtils.CalciteState state=TestCompilerUtils.sqlOverDummyGroupByTable(sql);
  PlanCompiler compiler=new PlanCompiler(data,typeFactory);
  final AbstractTridentProcessor proc=compiler.compileForTest(state.tree());
  final TridentTopology topo=proc.build(data);
  Fields f=proc.outputStream().getOutputFields();
  proc.outputStream().partitionPersist(new TestUtils.MockStateFactory(),f,new TestUtils.MockStateUpdater(),new Fields());
  runTridentTopology(EXPECTED_VALUE_SIZE,proc,topo);
  Assert.assertArrayEquals(new Values[]{new Values(0,5L,5,1,3,4)},getCollectedValues().toArray());
}
