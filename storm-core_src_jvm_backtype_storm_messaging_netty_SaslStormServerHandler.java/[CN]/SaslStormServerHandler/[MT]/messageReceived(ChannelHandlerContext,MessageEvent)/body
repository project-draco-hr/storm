{
  Object msg=e.getMessage();
  if (msg == null)   return;
  Channel channel=ctx.getChannel();
  if (msg instanceof ControlMessage && ((ControlMessage)e.getMessage()) == ControlMessage.SASL_TOKEN_MESSAGE_REQUEST) {
    SaslNettyServer saslNettyServer=SaslNettyServerState.getSaslNettyServer.get(channel);
    if (saslNettyServer == null) {
      LOG.debug("No saslNettyServer for " + channel + " yet; creating now, with topology token: ");
      try {
        saslNettyServer=new SaslNettyServer(topologyName,token);
      }
 catch (      IOException ioe) {
        LOG.error("Error occurred while creating saslNettyServer on server " + channel.getLocalAddress() + " for client "+ channel.getRemoteAddress());
        throw new IOException(ioe);
      }
      SaslNettyServerState.getSaslNettyServer.set(channel,saslNettyServer);
    }
 else {
      LOG.debug("Found existing saslNettyServer on server:" + channel.getLocalAddress() + " for client "+ channel.getRemoteAddress());
    }
    LOG.debug("processToken:  With nettyServer: " + saslNettyServer + " and token length: "+ token.length);
    SaslMessageToken saslTokenMessageRequest=null;
    saslTokenMessageRequest=new SaslMessageToken(saslNettyServer.response(new byte[0]));
    channel.write(saslTokenMessageRequest);
    return;
  }
  if (msg instanceof SaslMessageToken) {
    SaslNettyServer saslNettyServer=SaslNettyServerState.getSaslNettyServer.get(channel);
    if (saslNettyServer == null) {
      if (saslNettyServer == null) {
        throw new Exception("saslNettyServer was unexpectedly " + "null for channel: " + channel);
      }
    }
    SaslMessageToken saslTokenMessageRequest=new SaslMessageToken(saslNettyServer.response(((SaslMessageToken)msg).getSaslToken()));
    channel.write(saslTokenMessageRequest);
    if (saslNettyServer.isComplete()) {
      LOG.debug("SASL authentication is complete for client with " + "username: " + saslNettyServer.getUserName());
      channel.write(ControlMessage.SASL_COMPLETE_REQUEST);
      LOG.debug("Removing SaslServerHandler from pipeline since SASL " + "authentication is complete.");
      ctx.getPipeline().remove(this);
    }
    return;
  }
 else {
    LOG.warn("Sending upstream an unexpected non-SASL message :  " + msg);
    Channels.fireMessageReceived(ctx,msg);
  }
}
