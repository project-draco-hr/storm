{
  final long initial=10;
  final double mult=2d;
  final long max=20;
  ExponentialBackoffMsgRetryManager manager=buildExponentialBackoffMsgRetryManager(initial,mult,max,Integer.MAX_VALUE);
  manager.failed(TEST_OFFSET);
  Time.advanceTime(initial);
  manager.retryStarted(TEST_OFFSET);
  manager.failed(TEST_OFFSET);
  manager.failed(TEST_OFFSET2);
  Time.advanceTime(initial * 2);
  assertTrue("message " + TEST_OFFSET + "should be ready for retry",manager.shouldReEmitMsg(TEST_OFFSET));
  assertTrue("message " + TEST_OFFSET2 + "should be ready for retry",manager.shouldReEmitMsg(TEST_OFFSET2));
  Long next=manager.nextFailedMessageToRetry();
  assertEquals("expect first message to retry is " + TEST_OFFSET2,TEST_OFFSET2,next);
  Time.advanceTime(initial);
  next=manager.nextFailedMessageToRetry();
  assertEquals("expect first message to retry is " + TEST_OFFSET2,TEST_OFFSET2,next);
  manager.retryStarted(next);
  next=manager.nextFailedMessageToRetry();
  assertEquals("expect message to retry is now " + TEST_OFFSET,TEST_OFFSET,next);
  manager.retryStarted(next);
  next=manager.nextFailedMessageToRetry();
  assertNull("expect no message to retry now",next);
}
