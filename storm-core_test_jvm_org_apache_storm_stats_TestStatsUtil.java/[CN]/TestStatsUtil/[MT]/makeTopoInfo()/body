{
  List<Object> hostPort=new ArrayList<Object>();
  hostPort.add("node1");
  hostPort.add(new Long(1));
  exec2NodePort.put(makeExecutorId(1,1),hostPort);
  nodeHost.put("node1","host1");
  nodeHost.put("node2","host2");
  nodeHost.put("node3","host3");
  List<Integer> exec1=new ArrayList<Integer>();
  exec1.add(1);
  exec1.add(1);
  HashMap<String,Object> exec1Beat=new HashMap<String,Object>();
  exec1Beat.put("uptime",100);
  List<Integer> exec2=new ArrayList<Integer>();
  exec2.add(2);
  exec2.add(4);
  HashMap<String,Object> exec2Beat=new HashMap<String,Object>();
  exec2Beat.put("uptime",200);
  Map<String,Object> beat1=new HashMap<String,Object>();
  beat1.put("heartbeat",exec1Beat);
  Map<String,Object> beat2=new HashMap<String,Object>();
  beat2.put("heartbeat",exec2Beat);
  beats.put(exec1,beat1);
  beats.put(exec2,beat2);
  task2Component.put(1,"my-component");
  task2Component.put(2,"__sys1");
  task2Component.put(3,"__sys2");
  task2Component.put(4,"__sys3");
  task2Component.put(5,"__sys4");
  task2Component.put(6,"__sys4");
  task2Component.put(7,"my-component2");
  WorkerResources ws1=new WorkerResources();
  ws1.set_mem_on_heap(1);
  ws1.set_mem_off_heap(2);
  ws1.set_cpu(3);
  worker2Resources.put(new WorkerSlot("node1",1),ws1);
  WorkerResources ws2=new WorkerResources();
  ws2.set_mem_on_heap(4);
  ws2.set_mem_off_heap(8);
  ws2.set_cpu(12);
  worker2Resources.put(new WorkerSlot("node2",2),ws2);
  WorkerResources ws3=new WorkerResources();
  ws3.set_mem_on_heap(16);
  ws3.set_mem_off_heap(32);
  ws3.set_cpu(48);
  worker2Resources.put(new WorkerSlot("node3",3),ws3);
}
