{
  final Map<String,SupervisorDetails> supMap=new HashMap<String,SupervisorDetails>();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,400.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,8000.0);
  final Map<String,SupervisorDetails> supMapRack1=TestUtilsForResourceAwareScheduler.genSupervisors(10,4,0,resourceMap);
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,200.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,4000.0);
  final Map<String,SupervisorDetails> supMapRack2=TestUtilsForResourceAwareScheduler.genSupervisors(10,4,10,resourceMap);
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,0.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,8000.0);
  final Map<String,SupervisorDetails> supMapRack3=TestUtilsForResourceAwareScheduler.genSupervisors(10,4,20,resourceMap);
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,10.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,8000.0 * 2 + 4000.0);
  final Map<String,SupervisorDetails> supMapRack4=TestUtilsForResourceAwareScheduler.genSupervisors(10,4,30,resourceMap);
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,400.0 + 200.0 + 10.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1000.0);
  final Map<String,SupervisorDetails> supMapRack5=TestUtilsForResourceAwareScheduler.genSupervisors(10,4,40,resourceMap);
  supMap.putAll(supMapRack1);
  supMap.putAll(supMapRack2);
  supMap.putAll(supMapRack3);
  supMap.putAll(supMapRack4);
  supMap.putAll(supMapRack5);
  Config config=new Config();
  config.putAll(Utils.readDefaultConfig());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,org.apache.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,org.apache.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,org.apache.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  config.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT,100.0);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB,500);
  config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB,500);
  config.put(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB,Double.MAX_VALUE);
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  DNSToSwitchMapping TestNetworkTopographyPlugin=new DNSToSwitchMapping(){
    @Override public Map<String,String> resolve(    List<String> names){
      Map<String,String> ret=new HashMap<String,String>();
      for (      SupervisorDetails sup : supMapRack1.values()) {
        ret.put(sup.getHost(),"rack-0");
      }
      for (      SupervisorDetails sup : supMapRack2.values()) {
        ret.put(sup.getHost(),"rack-1");
      }
      for (      SupervisorDetails sup : supMapRack3.values()) {
        ret.put(sup.getHost(),"rack-2");
      }
      for (      SupervisorDetails sup : supMapRack4.values()) {
        ret.put(sup.getHost(),"rack-3");
      }
      for (      SupervisorDetails sup : supMapRack5.values()) {
        ret.put(sup.getHost(),"rack-4");
      }
      return ret;
    }
  }
;
  List<String> supHostnames=new LinkedList<>();
  for (  SupervisorDetails sup : supMap.values()) {
    supHostnames.add(sup.getHost());
  }
  Map<String,List<String>> rackToNodes=new HashMap<>();
  Map<String,String> resolvedSuperVisors=TestNetworkTopographyPlugin.resolve(supHostnames);
  for (  Map.Entry<String,String> entry : resolvedSuperVisors.entrySet()) {
    String hostName=entry.getKey();
    String rack=entry.getValue();
    List<String> nodesForRack=rackToNodes.get(rack);
    if (nodesForRack == null) {
      nodesForRack=new ArrayList<String>();
      rackToNodes.put(rack,nodesForRack);
    }
    nodesForRack.add(hostName);
  }
  cluster.setNetworkTopography(rackToNodes);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  TopologyDetails topo1=TestUtilsForResourceAwareScheduler.getTopology("topo-1",config,8,0,2,0,currentTime - 2,10);
  TopologyDetails topo2=TestUtilsForResourceAwareScheduler.getTopology("topo-2",config,8,0,2,0,currentTime - 2,10);
  topoMap.put(topo1.getId(),topo1);
  Topologies topologies=new Topologies(topoMap);
  DefaultResourceAwareStrategy rs=new DefaultResourceAwareStrategy();
  rs.prepare(new SchedulingState(new HashMap<String,User>(),cluster,topologies,config));
  TreeSet<RackResources> sortedRacks=rs.sortRacks(topo1.getId());
  Assert.assertEquals("# of racks sorted",5,sortedRacks.size());
  Iterator<RackResources> it=sortedRacks.iterator();
  Assert.assertEquals("rack-0 should be ordered first","rack-0",it.next().id);
  Assert.assertEquals("rack-1 should be ordered second","rack-1",it.next().id);
  Assert.assertEquals("rack-4 should be ordered third","rack-4",it.next().id);
  Assert.assertEquals("rack-3 should be ordered fourth","rack-3",it.next().id);
  Assert.assertEquals("rack-2 should be ordered fifth","rack-2",it.next().id);
  SchedulingResult schedulingResult=rs.schedule(topo1);
  for (  Map.Entry<WorkerSlot,Collection<ExecutorDetails>> entry : schedulingResult.getSchedulingResultMap().entrySet()) {
    WorkerSlot ws=entry.getKey();
    Collection<ExecutorDetails> execs=entry.getValue();
    Assert.assertEquals("assert worker scheduled on rack-0","rack-0",resolvedSuperVisors.get(rs.idToNode(ws.getNodeId()).getHostname()));
    cluster.assign(ws,topo1.getId(),execs);
  }
  Assert.assertEquals("All executors in topo-1 scheduled",0,cluster.getUnassignedExecutors(topo1).size());
  topoMap.put(topo2.getId(),topo2);
  topologies=new Topologies(topoMap);
  RAS_Nodes nodes=new RAS_Nodes(cluster,topologies);
  Iterator<ExecutorDetails> executorIterator=topo2.getExecutors().iterator();
  List<String> nodeHostnames=rackToNodes.get("rack-1");
  for (int i=0; i < topo2.getExecutors().size() / 2; i++) {
    String nodeHostname=nodeHostnames.get(i % nodeHostnames.size());
    RAS_Node node=rs.idToNode(rs.NodeHostnameToId(nodeHostname));
    WorkerSlot targetSlot=node.getFreeSlots().iterator().next();
    ExecutorDetails targetExec=executorIterator.next();
    node.assign(targetSlot,topo2,Arrays.asList(targetExec));
    cluster.assign(targetSlot,topo2.getId(),Arrays.asList(targetExec));
  }
  topologies.getById(topo2.getId()).getTotalMemoryResourceList();
  rs=new DefaultResourceAwareStrategy();
  rs.prepare(new SchedulingState(new HashMap<String,User>(),cluster,topologies,config));
  schedulingResult=rs.schedule(topo2);
  for (  Map.Entry<WorkerSlot,Collection<ExecutorDetails>> entry : schedulingResult.getSchedulingResultMap().entrySet()) {
    WorkerSlot ws=entry.getKey();
    Collection<ExecutorDetails> execs=entry.getValue();
    Assert.assertEquals("assert worker scheduled on rack-1","rack-1",resolvedSuperVisors.get(rs.idToNode(ws.getNodeId()).getHostname()));
    cluster.assign(ws,topo2.getId(),execs);
  }
  Assert.assertEquals("All executors in topo-2 scheduled",0,cluster.getUnassignedExecutors(topo1).size());
}
