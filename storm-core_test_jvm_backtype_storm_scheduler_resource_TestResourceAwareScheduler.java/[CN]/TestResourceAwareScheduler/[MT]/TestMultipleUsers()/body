{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,1000.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1024.0 * 10);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(20,4,resourceMap);
  Config config=new Config();
  config.putAll(Utils.readDefaultConfig());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,backtype.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,backtype.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,backtype.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  Map<String,Map<String,Number>> resourceUserPool=new HashMap<String,Map<String,Number>>();
  resourceUserPool.put("jerry",new HashMap<String,Number>());
  resourceUserPool.get("jerry").put("cpu",1000);
  resourceUserPool.get("jerry").put("memory",8192.0);
  resourceUserPool.put("bobby",new HashMap<String,Number>());
  resourceUserPool.get("bobby").put("cpu",10000.0);
  resourceUserPool.get("bobby").put("memory",32768);
  resourceUserPool.put("derek",new HashMap<String,Number>());
  resourceUserPool.get("derek").put("cpu",5000.0);
  resourceUserPool.get("derek").put("memory",16384.0);
  config.put(Config.RESOURCE_AWARE_SCHEDULER_USER_POOLS,resourceUserPool);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  config.put(Config.TOPOLOGY_SUBMITTER_USER,"jerry");
  TopologyDetails topo1=TestUtilsForResourceAwareScheduler.getTopology("topo-1",config,5,15,1,1,currentTime - 2,20);
  TopologyDetails topo2=TestUtilsForResourceAwareScheduler.getTopology("topo-2",config,5,15,1,1,currentTime - 8,29);
  TopologyDetails topo3=TestUtilsForResourceAwareScheduler.getTopology("topo-3",config,5,15,1,1,currentTime - 16,29);
  TopologyDetails topo4=TestUtilsForResourceAwareScheduler.getTopology("topo-4",config,5,15,1,1,currentTime - 16,20);
  TopologyDetails topo5=TestUtilsForResourceAwareScheduler.getTopology("topo-5",config,5,15,1,1,currentTime - 24,29);
  config.put(Config.TOPOLOGY_SUBMITTER_USER,"bobby");
  TopologyDetails topo6=TestUtilsForResourceAwareScheduler.getTopology("topo-6",config,5,15,1,1,currentTime - 2,20);
  TopologyDetails topo7=TestUtilsForResourceAwareScheduler.getTopology("topo-7",config,5,15,1,1,currentTime - 8,29);
  TopologyDetails topo8=TestUtilsForResourceAwareScheduler.getTopology("topo-8",config,5,15,1,1,currentTime - 16,29);
  TopologyDetails topo9=TestUtilsForResourceAwareScheduler.getTopology("topo-9",config,5,15,1,1,currentTime - 16,20);
  TopologyDetails topo10=TestUtilsForResourceAwareScheduler.getTopology("topo-10",config,5,15,1,1,currentTime - 24,29);
  config.put(Config.TOPOLOGY_SUBMITTER_USER,"derek");
  TopologyDetails topo11=TestUtilsForResourceAwareScheduler.getTopology("topo-11",config,5,15,1,1,currentTime - 2,20);
  TopologyDetails topo12=TestUtilsForResourceAwareScheduler.getTopology("topo-12",config,5,15,1,1,currentTime - 8,29);
  TopologyDetails topo13=TestUtilsForResourceAwareScheduler.getTopology("topo-13",config,5,15,1,1,currentTime - 16,29);
  TopologyDetails topo14=TestUtilsForResourceAwareScheduler.getTopology("topo-14",config,5,15,1,1,currentTime - 16,20);
  TopologyDetails topo15=TestUtilsForResourceAwareScheduler.getTopology("topo-15",config,5,15,1,1,currentTime - 24,29);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  topoMap.put(topo1.getId(),topo1);
  topoMap.put(topo2.getId(),topo2);
  topoMap.put(topo3.getId(),topo3);
  topoMap.put(topo4.getId(),topo4);
  topoMap.put(topo5.getId(),topo5);
  topoMap.put(topo6.getId(),topo6);
  topoMap.put(topo7.getId(),topo7);
  topoMap.put(topo8.getId(),topo8);
  topoMap.put(topo9.getId(),topo9);
  topoMap.put(topo10.getId(),topo10);
  topoMap.put(topo11.getId(),topo11);
  topoMap.put(topo12.getId(),topo12);
  topoMap.put(topo13.getId(),topo13);
  topoMap.put(topo14.getId(),topo14);
  topoMap.put(topo15.getId(),topo15);
  Topologies topologies=new Topologies(topoMap);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  for (  TopologyDetails topo : topoMap.values()) {
    Assert.assertTrue(TestUtilsForResourceAwareScheduler.assertStatusSuccess(cluster.getStatusMap().get(topo.getId())));
  }
  for (  User user : rs.getUserMap().values()) {
    Assert.assertEquals(user.getTopologiesPending().size(),0);
    Assert.assertEquals(user.getTopologiesRunning().size(),5);
  }
}
