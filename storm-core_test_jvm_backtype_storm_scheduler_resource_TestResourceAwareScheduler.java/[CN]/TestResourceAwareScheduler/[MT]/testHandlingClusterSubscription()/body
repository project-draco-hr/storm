{
  INimbus iNimbus=new TestUtilsForResourceAwareScheduler.INimbusTest();
  Map<String,Number> resourceMap=new HashMap<String,Number>();
  resourceMap.put(Config.SUPERVISOR_CPU_CAPACITY,200.0);
  resourceMap.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB,1024.0 * 10);
  Map<String,SupervisorDetails> supMap=TestUtilsForResourceAwareScheduler.genSupervisors(1,4,resourceMap);
  Config config=new Config();
  config.putAll(Utils.readDefaultConfig());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_EVICTION_STRATEGY,backtype.storm.scheduler.resource.strategies.eviction.DefaultEvictionStrategy.class.getName());
  config.put(Config.RESOURCE_AWARE_SCHEDULER_PRIORITY_STRATEGY,backtype.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy.class.getName());
  config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY,backtype.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy.class.getName());
  Map<String,Map<String,Number>> resourceUserPool=new HashMap<String,Map<String,Number>>();
  resourceUserPool.put("jerry",new HashMap<String,Number>());
  resourceUserPool.get("jerry").put("cpu",1000);
  resourceUserPool.get("jerry").put("memory",8192.0);
  resourceUserPool.put("bobby",new HashMap<String,Number>());
  resourceUserPool.get("bobby").put("cpu",10000.0);
  resourceUserPool.get("bobby").put("memory",32768);
  resourceUserPool.put("derek",new HashMap<String,Number>());
  resourceUserPool.get("derek").put("cpu",5000.0);
  resourceUserPool.get("derek").put("memory",16384.0);
  config.put(Config.RESOURCE_AWARE_SCHEDULER_USER_POOLS,resourceUserPool);
  Cluster cluster=new Cluster(iNimbus,supMap,new HashMap<String,SchedulerAssignmentImpl>(),config);
  config.put(Config.TOPOLOGY_SUBMITTER_USER,"jerry");
  TopologyDetails topo1=TestUtilsForResourceAwareScheduler.getTopology("topo-1",config,5,15,1,1,Time.currentTimeSecs() - 2,20);
  TopologyDetails topo2=TestUtilsForResourceAwareScheduler.getTopology("topo-2",config,5,15,1,1,Time.currentTimeSecs() - 8,29);
  Map<String,TopologyDetails> topoMap=new HashMap<String,TopologyDetails>();
  topoMap.put(topo1.getId(),topo1);
  topoMap.put(topo2.getId(),topo2);
  Topologies topologies=new Topologies(topoMap);
  ResourceAwareScheduler rs=new ResourceAwareScheduler();
  rs.prepare(config);
  rs.schedule(topologies,cluster);
  int fullyScheduled=0;
  for (  TopologyDetails topo : topoMap.values()) {
    if (TestUtilsForResourceAwareScheduler.assertStatusSuccess(cluster.getStatusMap().get(topo.getId()))) {
      fullyScheduled++;
    }
  }
  Assert.assertEquals("# of Fully scheduled",1,fullyScheduled);
  Assert.assertEquals("# of topologies schedule attempted",1,rs.getUser("jerry").getTopologiesAttempted().size());
  Assert.assertEquals("# of topologies running",1,rs.getUser("jerry").getTopologiesRunning().size());
  Assert.assertEquals("# of topologies schedule pending",0,rs.getUser("jerry").getTopologiesPending().size());
}
