{
  LOG.info("making assignments for topology {}",td);
  if (schedulerAssignmentMap != null) {
    double requestedMemOnHeap=td.getTotalRequestedMemOnHeap();
    double requestedMemOffHeap=td.getTotalRequestedMemOffHeap();
    double requestedCpu=td.getTotalRequestedCpu();
    double assignedMemOnHeap=0.0;
    double assignedMemOffHeap=0.0;
    double assignedCpu=0.0;
    Set<String> nodesUsed=new HashSet<String>();
    int assignedWorkers=schedulerAssignmentMap.keySet().size();
    for (    Map.Entry<WorkerSlot,Collection<ExecutorDetails>> workerToTasksEntry : schedulerAssignmentMap.entrySet()) {
      WorkerSlot targetSlot=workerToTasksEntry.getKey();
      Collection<ExecutorDetails> execsNeedScheduling=workerToTasksEntry.getValue();
      RAS_Node targetNode=this.nodes.getNodeById(targetSlot.getNodeId());
      targetNode.assign(targetSlot,td,execsNeedScheduling);
      LOG.debug("ASSIGNMENT    TOPOLOGY: {}  TASKS: {} To Node: {} on Slot: {}",td.getName(),execsNeedScheduling,targetNode.getHostname(),targetSlot.getPort());
      if (!nodesUsed.contains(targetNode.getId())) {
        nodesUsed.add(targetNode.getId());
      }
      assignedMemOnHeap+=targetSlot.getAllocatedMemOnHeap();
      assignedMemOffHeap+=targetSlot.getAllocatedMemOffHeap();
      assignedCpu+=targetSlot.getAllocatedCpu();
    }
    LOG.debug("Topology: {} assigned to {} nodes on {} workers",td.getId(),nodesUsed.size(),assignedWorkers);
    this.cluster.setStatus(td.getId(),"Fully Scheduled");
    Double[] resources={requestedMemOnHeap,requestedMemOffHeap,requestedCpu,assignedMemOnHeap,assignedMemOffHeap,assignedCpu};
    LOG.debug("setResources for {}: requested on-heap mem, off-heap mem, cpu: {} {} {} " + "assigned on-heap mem, off-heap mem, cpu: {} {} {}",td.getId(),requestedMemOnHeap,requestedMemOffHeap,requestedCpu,assignedMemOnHeap,assignedMemOffHeap,assignedCpu);
    this.cluster.setResources(td.getId(),resources);
    return true;
  }
 else {
    LOG.warn("schedulerAssignmentMap for topo {} is null. This shouldn't happen!",td.getName());
    return false;
  }
  updateSupervisorsResources(cluster,topologies);
}
