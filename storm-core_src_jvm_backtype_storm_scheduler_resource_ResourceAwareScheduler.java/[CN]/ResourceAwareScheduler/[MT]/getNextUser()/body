{
  Double least=Double.POSITIVE_INFINITY;
  User ret=null;
  for (  User user : this.userMap.values()) {
    LOG.info("getNextUser {}",user.getDetailedInfo());
    LOG.info("hasTopologyNeedSchedule: {}",user.hasTopologyNeedSchedule());
    if (user.hasTopologyNeedSchedule()) {
      Double userResourcePoolAverageUtilization=user.getResourcePoolAverageUtilization();
      if (ret != null) {
        LOG.info("current: {}-{} compareUser: {}-{}",ret.getId(),least,user.getId(),userResourcePoolAverageUtilization);
        LOG.info("{} == {}: {}",least,userResourcePoolAverageUtilization,least == userResourcePoolAverageUtilization);
        LOG.info("{} == {}: {}",least,userResourcePoolAverageUtilization,(Math.abs(least - userResourcePoolAverageUtilization) < 0.0001));
      }
      if (least > userResourcePoolAverageUtilization) {
        ret=user;
        least=userResourcePoolAverageUtilization;
      }
 else       if (Math.abs(least - userResourcePoolAverageUtilization) < 0.0001) {
        double currentCpuPercentage=ret.getCPUResourceGuaranteed() / this.cluster.getClusterTotalCPUResource();
        double currentMemoryPercentage=ret.getMemoryResourceGuaranteed() / this.cluster.getClusterTotalMemoryResource();
        double currentAvgPercentage=(currentCpuPercentage + currentMemoryPercentage) / 2.0;
        double userCpuPercentage=user.getCPUResourceGuaranteed() / this.cluster.getClusterTotalCPUResource();
        double userMemoryPercentage=user.getMemoryResourceGuaranteed() / this.cluster.getClusterTotalMemoryResource();
        double userAvgPercentage=(userCpuPercentage + userMemoryPercentage) / 2.0;
        LOG.info("current: {}-{} compareUser: {}-{}",ret.getId(),currentAvgPercentage,user.getId(),userAvgPercentage);
        if (userAvgPercentage > currentAvgPercentage) {
          ret=user;
          least=userResourcePoolAverageUtilization;
        }
      }
    }
  }
  return ret;
}
