{
  Map<String,Object> conf=new HashMap<String,Object>();
  Collection<Object> passCases=new LinkedList<Object>();
  Collection<Object> failCases=new LinkedList<Object>();
  passCases.add(null);
  passCases.add("some string");
  String[] stuff={"some","string","list"};
  passCases.add(Arrays.asList(stuff));
  failCases.add(42);
  Integer[] wrongStuff={1,2,3};
  failCases.add(Arrays.asList(wrongStuff));
  for (  Object value : passCases) {
    conf.put(Config.WORKER_CHILDOPTS,value);
    ConfigValidation.validateFields(conf);
  }
  for (  Object value : failCases) {
    try {
      conf.put(Config.WORKER_CHILDOPTS,value);
      ConfigValidation.validateFields(conf);
      Assert.fail("Expected Exception not Thrown for value: " + value);
    }
 catch (    IllegalArgumentException Ex) {
    }
  }
  conf=new HashMap<String,Object>();
  for (  Object value : passCases) {
    conf.put(Config.TOPOLOGY_WORKER_CHILDOPTS,value);
    ConfigValidation.validateFields(conf);
  }
  for (  Object value : failCases) {
    try {
      conf.put(Config.TOPOLOGY_WORKER_CHILDOPTS,value);
      ConfigValidation.validateFields(conf);
      Assert.fail("Expected Exception not Thrown for value: " + value);
    }
 catch (    IllegalArgumentException Ex) {
    }
  }
}
