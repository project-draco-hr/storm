{
  long time=0l;
  CountStatAndMetric count=new CountStatAndMetric(10,time);
  while (time < TEN_MIN) {
    count.incBy(50);
    time+=THIRTY_SEC / 2;
    count.rotateSched(time);
    count.incBy(50);
    time+=THIRTY_SEC / 2;
    assertEquals(100l,((Long)count.getValueAndReset(time)).longValue());
  }
  long val=100 * TEN_MIN / THIRTY_SEC;
  Map<String,Long> expected=new HashMap<String,Long>();
  expected.put("600",val);
  expected.put("10800",val);
  expected.put("86400",val);
  expected.put(":all-time",val);
  assertEquals(expected,count.getTimeCounts(time));
  while (time < THREE_HOUR) {
    count.incBy(100);
    time+=THIRTY_SEC;
    assertEquals(100l,((Long)count.getValueAndReset(time)).longValue());
  }
  val=100 * THREE_HOUR / THIRTY_SEC;
  expected=new HashMap<String,Long>();
  expected.put("600",100 * TEN_MIN / THIRTY_SEC);
  expected.put("10800",val);
  expected.put("86400",val);
  expected.put(":all-time",val);
  assertEquals(expected,count.getTimeCounts(time));
  while (time < ONE_DAY) {
    count.incBy(100);
    time+=THIRTY_SEC;
    assertEquals(100l,((Long)count.getValueAndReset(time)).longValue());
  }
  val=100 * ONE_DAY / THIRTY_SEC;
  expected=new HashMap<String,Long>();
  expected.put("600",100 * TEN_MIN / THIRTY_SEC);
  expected.put("10800",100 * THREE_HOUR / THIRTY_SEC);
  expected.put("86400",val);
  expected.put(":all-time",val);
  assertEquals(expected,count.getTimeCounts(time));
}
