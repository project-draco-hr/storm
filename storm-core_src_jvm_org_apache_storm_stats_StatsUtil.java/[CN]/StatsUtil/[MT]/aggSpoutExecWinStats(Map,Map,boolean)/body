{
  Map ret=new HashMap();
  Map m=new HashMap();
  for (  Object win : getMapByKey(newStats,ACKED).keySet()) {
    m.put(win,aggSpoutLatAndCount((Map)(getMapByKey(newStats,COMP_LATENCIES)).get(win),(Map)(getMapByKey(newStats,ACKED)).get(win)));
  }
  m=swapMapOrder(m);
  Map win2compLatWgtAvg=getMapByKey(m,COMP_LAT_TOTAL);
  Map win2acked=getMapByKey(m,ACKED);
  Map emitted=getMapByKey(newStats,EMITTED);
  emitted=mergeWithSum(aggregateCountStreams(filterSysStreams(emitted,includeSys)),getMapByKey(accStats,WIN_TO_EMITTED));
  putKV(ret,WIN_TO_EMITTED,emitted);
  Map transferred=getMapByKey(newStats,TRANSFERRED);
  transferred=mergeWithSum(aggregateCountStreams(filterSysStreams(transferred,includeSys)),getMapByKey(accStats,WIN_TO_TRANSFERRED));
  putKV(ret,WIN_TO_TRANSFERRED,transferred);
  putKV(ret,WIN_TO_COMP_LAT_WGT_AVG,mergeWithSum(getMapByKey(accStats,WIN_TO_COMP_LAT_WGT_AVG),win2compLatWgtAvg));
  putKV(ret,WIN_TO_ACKED,mergeWithSum(getMapByKey(accStats,WIN_TO_ACKED),win2acked));
  putKV(ret,WIN_TO_FAILED,mergeWithSum(aggregateCountStreams(getMapByKey(newStats,FAILED)),getMapByKey(accStats,WIN_TO_FAILED)));
  return ret;
}
