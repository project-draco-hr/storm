{
  Map ret=new HashMap();
  putKV(ret,NUM_TASKS,task2comp.size());
  putKV(ret,NUM_WORKERS,((Set)getByKey(accData,WORKERS_SET)).size());
  putKV(ret,NUM_EXECUTORS,exec2nodePort != null ? exec2nodePort.size() : 0);
  Map bolt2stats=getMapByKey(accData,BOLT_TO_STATS);
  Map aggBolt2stats=new HashMap();
  for (  Object o : bolt2stats.entrySet()) {
    Map.Entry e=(Map.Entry)o;
    String id=(String)e.getKey();
    Map m=(Map)e.getValue();
    long executed=getByKeywordOr0(m,EXECUTED).longValue();
    if (executed > 0) {
      double execLatencyTotal=getByKeywordOr0(m,EXEC_LAT_TOTAL).doubleValue();
      putKV(m,EXEC_LATENCY,execLatencyTotal / executed);
      double procLatencyTotal=getByKeywordOr0(m,PROC_LAT_TOTAL).doubleValue();
      putKV(m,PROC_LATENCY,procLatencyTotal / executed);
    }
    remove(m,EXEC_LAT_TOTAL);
    remove(m,PROC_LAT_TOTAL);
    putKV(m,"last-error",getLastError(clusterState,topologyId,id));
    aggBolt2stats.put(id,m);
  }
  putKV(ret,BOLT_TO_STATS,aggBolt2stats);
  Map spout2stats=getMapByKey(accData,SPOUT_TO_STATS);
  Map spoutBolt2stats=new HashMap();
  for (  Object o : spout2stats.entrySet()) {
    Map.Entry e=(Map.Entry)o;
    String id=(String)e.getKey();
    Map m=(Map)e.getValue();
    long acked=getByKeywordOr0(m,ACKED).longValue();
    if (acked > 0) {
      double compLatencyTotal=getByKeywordOr0(m,COMP_LAT_TOTAL).doubleValue();
      putKV(m,COMP_LATENCY,compLatencyTotal / acked);
    }
    remove(m,COMP_LAT_TOTAL);
    putKV(m,"last-error",getLastError(clusterState,topologyId,id));
    spoutBolt2stats.put(id,m);
  }
  putKV(ret,SPOUT_TO_STATS,spoutBolt2stats);
  putKV(ret,WIN_TO_EMITTED,mapKeyStr(getMapByKey(accData,WIN_TO_EMITTED)));
  putKV(ret,WIN_TO_TRANSFERRED,mapKeyStr(getMapByKey(accData,WIN_TO_TRANSFERRED)));
  putKV(ret,WIN_TO_ACKED,mapKeyStr(getMapByKey(accData,WIN_TO_ACKED)));
  putKV(ret,WIN_TO_FAILED,mapKeyStr(getMapByKey(accData,WIN_TO_FAILED)));
  putKV(ret,WIN_TO_COMP_LAT,computeWeightedAveragesPerWindow(accData,WIN_TO_COMP_LAT_WGT_AVG,WIN_TO_ACKED));
  return ret;
}
