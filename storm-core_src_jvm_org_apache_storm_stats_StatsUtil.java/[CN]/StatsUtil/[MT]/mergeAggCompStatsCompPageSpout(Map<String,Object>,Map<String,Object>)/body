{
  Map<String,Object> ret=new HashMap<>();
  Map<String,Map<String,?>> accOut=getMapByKey(accSpoutStats,SID_TO_OUT_STATS);
  Map<String,Map<String,?>> spoutOut=getMapByKey(spoutStats,SID_TO_OUT_STATS);
  int numExecutors=getByKeyOr0(accSpoutStats,NUM_EXECUTORS).intValue();
  putKV(ret,NUM_EXECUTORS,numExecutors + 1);
  putKV(ret,NUM_TASKS,sumOr0(getByKeyOr0(accSpoutStats,NUM_TASKS),getByKeyOr0(spoutStats,NUM_TASKS)));
  putKV(ret,SID_TO_OUT_STATS,fullMergeWithSum(accOut,spoutOut));
  Map executorStats=new HashMap();
  putKV(executorStats,EXECUTOR_ID,getByKey(spoutStats,EXECUTOR_ID));
  putKV(executorStats,UPTIME,getByKey(spoutStats,UPTIME));
  putKV(executorStats,HOST,getByKey(spoutStats,HOST));
  putKV(executorStats,PORT,getByKey(spoutStats,PORT));
  putKV(executorStats,EMITTED,sumStreamsLong(spoutOut,EMITTED));
  putKV(executorStats,TRANSFERRED,sumStreamsLong(spoutOut,TRANSFERRED));
  putKV(executorStats,FAILED,sumStreamsLong(spoutOut,FAILED));
  long acked=sumStreamsLong(spoutOut,ACKED);
  putKV(executorStats,ACKED,acked);
  if (acked > 0) {
    putKV(executorStats,COMP_LATENCY,sumStreamsDouble(spoutOut,COMP_LAT_TOTAL) / acked);
  }
 else {
    putKV(executorStats,COMP_LATENCY,null);
  }
  List executorStatsList=((List)getByKey(accSpoutStats,EXECUTOR_STATS));
  executorStatsList.add(executorStats);
  putKV(ret,EXECUTOR_STATS,executorStatsList);
  return ret;
}
