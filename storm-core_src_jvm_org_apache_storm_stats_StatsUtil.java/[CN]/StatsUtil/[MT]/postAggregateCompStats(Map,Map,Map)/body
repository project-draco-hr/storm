{
  Map ret=new HashMap();
  String compType=((Keyword)getByKeyword(accData,TYPE)).getName();
  Map stats=getMapByKeyword(accData,STATS);
  Integer numTasks=getByKeywordOr0(stats,NUM_TASKS).intValue();
  Integer numExecutors=getByKeywordOr0(stats,NUM_EXECUTORS).intValue();
  Map outStats=getMapByKeyword(stats,SID_TO_OUT_STATS);
  putRawKV(ret,TYPE,keyword(compType));
  putRawKV(ret,NUM_TASKS,numTasks);
  putRawKV(ret,NUM_EXECUTORS,numExecutors);
  putRawKV(ret,EXECUTOR_STATS,getByKeyword(stats,EXECUTOR_STATS));
  putRawKV(ret,WIN_TO_EMITTED,mapKeyStr(getMapByKeyword(accData,WIN_TO_EMITTED)));
  putRawKV(ret,WIN_TO_TRANSFERRED,mapKeyStr(getMapByKeyword(accData,WIN_TO_TRANSFERRED)));
  putRawKV(ret,WIN_TO_ACKED,mapKeyStr(getMapByKeyword(accData,WIN_TO_ACKED)));
  putRawKV(ret,WIN_TO_FAILED,mapKeyStr(getMapByKeyword(accData,WIN_TO_FAILED)));
  if (BOLT.equals(compType)) {
    Map inStats=getMapByKeyword(stats,CID_SID_TO_IN_STATS);
    Map inStats2=new HashMap();
    for (    Object o : inStats.entrySet()) {
      Map.Entry e=(Map.Entry)o;
      Object k=e.getKey();
      Map v=(Map)e.getValue();
      long executed=getByKeywordOr0(v,EXECUTED).longValue();
      if (executed > 0) {
        double executeLatencyTotal=getByKeywordOr0(v,EXEC_LAT_TOTAL).doubleValue();
        double processLatencyTotal=getByKeywordOr0(v,PROC_LAT_TOTAL).doubleValue();
        putRawKV(v,EXEC_LATENCY,executeLatencyTotal / executed);
        putRawKV(v,PROC_LATENCY,processLatencyTotal / executed);
      }
 else {
        putRawKV(v,EXEC_LATENCY,0.0);
        putRawKV(v,PROC_LATENCY,0.0);
      }
      removeByKeyword(v,EXEC_LAT_TOTAL);
      removeByKeyword(v,PROC_LAT_TOTAL);
      inStats2.put(k,v);
    }
    putRawKV(ret,CID_SID_TO_IN_STATS,inStats2);
    putRawKV(ret,SID_TO_OUT_STATS,outStats);
    putRawKV(ret,WIN_TO_EXECUTED,mapKeyStr(getMapByKeyword(accData,WIN_TO_EXECUTED)));
    putRawKV(ret,WIN_TO_EXEC_LAT,computeWeightedAveragesPerWindow(accData,WIN_TO_EXEC_LAT_WGT_AVG,WIN_TO_EXECUTED));
    putRawKV(ret,WIN_TO_PROC_LAT,computeWeightedAveragesPerWindow(accData,WIN_TO_PROC_LAT_WGT_AVG,WIN_TO_EXECUTED));
  }
 else {
    Map outStats2=new HashMap();
    for (    Object o : outStats.entrySet()) {
      Map.Entry e=(Map.Entry)o;
      Object k=e.getKey();
      Map v=(Map)e.getValue();
      long acked=getByKeywordOr0(v,ACKED).longValue();
      if (acked > 0) {
        double compLatencyTotal=getByKeywordOr0(v,COMP_LAT_TOTAL).doubleValue();
        putRawKV(v,COMP_LATENCY,compLatencyTotal / acked);
      }
 else {
        putRawKV(v,COMP_LATENCY,0.0);
      }
      removeByKeyword(v,COMP_LAT_TOTAL);
      outStats2.put(k,v);
    }
    putRawKV(ret,SID_TO_OUT_STATS,outStats2);
    putRawKV(ret,WIN_TO_COMP_LAT,computeWeightedAveragesPerWindow(accData,WIN_TO_COMP_LAT_WGT_AVG,WIN_TO_ACKED));
  }
  return ret;
}
