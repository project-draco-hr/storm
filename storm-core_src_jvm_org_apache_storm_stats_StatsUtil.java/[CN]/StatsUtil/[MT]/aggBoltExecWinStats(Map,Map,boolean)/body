{
  Map ret=new HashMap();
  Map m=new HashMap();
  for (  Object win : getMapByKeyword(newStats,EXECUTED).keySet()) {
    m.put(win,aggBoltLatAndCount((Map)(getMapByKeyword(newStats,EXEC_LATENCIES)).get(win),(Map)(getMapByKeyword(newStats,PROC_LATENCIES)).get(win),(Map)(getMapByKeyword(newStats,EXECUTED)).get(win)));
  }
  m=swapMapOrder(m);
  Map win2execLatWgtAvg=getMapByKeyword(m,EXEC_LAT_TOTAL);
  Map win2procLatWgtAvg=getMapByKeyword(m,PROC_LAT_TOTAL);
  Map win2executed=getMapByKeyword(m,EXECUTED);
  Map emitted=getMapByKeyword(newStats,EMITTED);
  emitted=mergeWithSum(aggregateCountStreams(filterSysStreams(emitted,includeSys)),getMapByKeyword(accStats,WIN_TO_EMITTED));
  putRawKV(ret,WIN_TO_EMITTED,emitted);
  Map transferred=getMapByKeyword(newStats,TRANSFERRED);
  transferred=mergeWithSum(aggregateCountStreams(filterSysStreams(transferred,includeSys)),getMapByKeyword(accStats,WIN_TO_TRANSFERRED));
  putRawKV(ret,WIN_TO_TRANSFERRED,transferred);
  putRawKV(ret,WIN_TO_EXEC_LAT_WGT_AVG,mergeWithSum(getMapByKeyword(accStats,WIN_TO_EXEC_LAT_WGT_AVG),win2execLatWgtAvg));
  putRawKV(ret,WIN_TO_PROC_LAT_WGT_AVG,mergeWithSum(getMapByKeyword(accStats,WIN_TO_PROC_LAT_WGT_AVG),win2procLatWgtAvg));
  putRawKV(ret,WIN_TO_EXECUTED,mergeWithSum(getMapByKeyword(accStats,WIN_TO_EXECUTED),win2executed));
  putRawKV(ret,WIN_TO_ACKED,mergeWithSum(aggregateCountStreams(getMapByKeyword(newStats,ACKED)),getMapByKeyword(accStats,WIN_TO_ACKED)));
  putRawKV(ret,WIN_TO_FAILED,mergeWithSum(aggregateCountStreams(getMapByKeyword(newStats,FAILED)),getMapByKeyword(accStats,WIN_TO_FAILED)));
  return ret;
}
