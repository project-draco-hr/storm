{
  CallbackHandler server_callback_handler=new SaslServerCallbackHandler(login_conf);
  Subject subject=null;
  try {
    Login login=new Login(AuthUtils.LOGIN_CONTEXT_SERVER,server_callback_handler);
    subject=login.getSubject();
  }
 catch (  LoginException ex) {
    LOG.error("Server failed to login in principal:" + ex,ex);
    throw new RuntimeException(ex);
  }
  if (subject.getPrivateCredentials(KerberosTicket.class).isEmpty()) {
    RuntimeException ex=new RuntimeException("Fail to verify user principal with section \"" + AuthUtils.LOGIN_CONTEXT_SERVER + "\" in login configuration file "+ login_conf);
    LOG.error(ex.getMessage(),ex);
    throw ex;
  }
  String principal=AuthUtils.get(login_conf,AuthUtils.LOGIN_CONTEXT_SERVER,"principal");
  LOG.debug("principal:" + principal);
  KerberosName serviceKerberosName=new KerberosName(principal);
  String serviceName=serviceKerberosName.getServiceName();
  String hostName=serviceKerberosName.getHostName();
  Map<String,String> props=new TreeMap<String,String>();
  props.put(Sasl.QOP,"auth");
  props.put(Sasl.SERVER_AUTH,"false");
  TSaslServerTransport.Factory factory=new TSaslServerTransport.Factory();
  factory.addServerDefinition(KERBEROS,serviceName,hostName,props,server_callback_handler);
  TUGIAssumingTransportFactory wrapFactory=new TUGIAssumingTransportFactory(factory,subject);
  LOG.info("SASL GSSAPI transport factory will be used");
  return wrapFactory;
}
