{
  if (!Utils.isValidConf(stormConf)) {
    throw new IllegalArgumentException("Storm conf is not valid. Must be json-serializable");
  }
  stormConf=new HashMap(stormConf);
  stormConf.putAll(Utils.readCommandLineOpts());
  Map conf=Utils.readStormConfig();
  conf.putAll(stormConf);
  stormConf.putAll(prepareZookeeperAuthentication(conf));
  validateConfs(conf,topology);
  Map<String,String> passedCreds=new HashMap<>();
  if (opts != null) {
    Credentials tmpCreds=opts.get_creds();
    if (tmpCreds != null) {
      passedCreds=tmpCreds.get_creds();
    }
  }
  Map<String,String> fullCreds=populateCredentials(conf,passedCreds);
  if (!fullCreds.isEmpty()) {
    if (opts == null) {
      opts=new SubmitOptions(TopologyInitialStatus.ACTIVE);
    }
    opts.set_creds(new Credentials(fullCreds));
  }
  try {
    if (localNimbus != null) {
      LOG.info("Submitting topology " + name + " in local mode");
      if (opts != null) {
        localNimbus.submitTopologyWithOpts(name,stormConf,topology,opts);
      }
 else {
        localNimbus.submitTopology(name,stormConf,topology);
      }
      LOG.info("Finished submitting topology: " + name);
    }
 else {
      String serConf=JSONValue.toJSONString(stormConf);
      if (topologyNameExists(conf,name,asUser)) {
        throw new RuntimeException("Topology with name `" + name + "` already exists on cluster");
      }
      List<String> jarsBlobKeys=Collections.emptyList();
      List<String> artifactsBlobKeys;
      DependencyUploader uploader=new DependencyUploader();
      try {
        uploader.init();
        jarsBlobKeys=uploadDependencyJarsToBlobStore(uploader);
        artifactsBlobKeys=uploadDependencyArtifactsToBlobStore(uploader);
      }
 catch (      Throwable e) {
        uploader.deleteBlobs(jarsBlobKeys);
        uploader.shutdown();
        throw e;
      }
      try {
        setDependencyBlobsToTopology(topology,jarsBlobKeys,artifactsBlobKeys);
        submitTopologyInDistributeMode(name,topology,opts,progressListener,asUser,conf,serConf);
      }
 catch (      AlreadyAliveException|InvalidTopologyException|AuthorizationException e) {
        uploader.deleteBlobs(jarsBlobKeys);
        throw e;
      }
 finally {
        uploader.shutdown();
      }
    }
  }
 catch (  TException e) {
    throw new RuntimeException(e);
  }
  invokeSubmitterHook(name,asUser,conf,topology);
}
