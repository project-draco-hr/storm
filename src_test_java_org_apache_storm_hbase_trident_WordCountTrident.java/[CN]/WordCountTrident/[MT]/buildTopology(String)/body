{
  Fields fields=new Fields("word","count");
  FixedBatchSpout spout=new FixedBatchSpout(fields,4,new Values("storm",1),new Values("trident",1),new Values("needs",1),new Values("javadoc",1));
  spout.setCycle(true);
  TridentHBaseMapper tridentHBaseMapper=new SimpleTridentHBaseMapper().withColumnFamily("cf").withColumnFields(new Fields("word")).withCounterFields(new Fields("count")).withRowKeyField("word");
  HBaseRowToStormValueMapper rowToStormValueMapper=new WordCountRowToStormValueMapper();
  HBaseProjectionCriteria projectionCriteria=new HBaseProjectionCriteria();
  projectionCriteria.addColumn(new HBaseProjectionCriteria.ColumnMetaData("cf","count"));
  HBaseState.Options options=new HBaseState.Options().withConfigKey(hbaseRoot).withDurability(Durability.SYNC_WAL).withMapper(tridentHBaseMapper).withProjectionCriteria(projectionCriteria).withRowToStormValueMapper(rowToStormValueMapper).withTableName("WordCount");
  StateFactory factory=new HBaseStateFactory(options);
  TridentTopology topology=new TridentTopology();
  Stream stream=topology.newStream("spout1",spout);
  stream.partitionPersist(factory,fields,new HBaseUpdater(),new Fields());
  TridentState state=topology.newStaticState(factory);
  stream=stream.stateQuery(state,new Fields("word"),new HBaseQuery(),new Fields("columnName","columnValue"));
  stream.each(new Fields("word","columnValue"),new PrintFunction(),new Fields());
  return topology.build();
}
