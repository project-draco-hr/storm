{
  LocalizedResourceSet lrsrcSet=_userRsrc.get(user);
  ArrayList<LocalizedResource> results=new ArrayList<>();
  ArrayList<Callable<LocalizedResource>> updates=new ArrayList<>();
  if (lrsrcSet == null) {
    return results;
  }
  ClientBlobStore blobstore=null;
  try {
    blobstore=getClientBlobStore();
    for (    LocalResource localResource : localResources) {
      String key=localResource.getBlobName();
      LocalizedResource lrsrc=lrsrcSet.get(key,localResource.shouldUncompress());
      if (lrsrc == null) {
        LOG.warn("blob requested for update doesn't exist: {}",key);
        continue;
      }
 else {
        if (!isLocalizedResourceUpToDate(lrsrc,blobstore) || !isLocalizedResourceDownloaded(lrsrc)) {
          LOG.debug("updating blob: {}",key);
          updates.add(new DownloadBlob(this,_conf,key,new File(lrsrc.getFilePath()),user,lrsrc.isUncompressed(),true));
        }
      }
    }
  }
  finally {
    if (blobstore != null) {
      blobstore.shutdown();
    }
  }
  try {
    List<Future<LocalizedResource>> futures=_updateExecService.invokeAll(updates);
    for (    Future<LocalizedResource> futureRsrc : futures) {
      try {
        LocalizedResource lrsrc=futureRsrc.get();
        LocalizedResourceSet newSet=new LocalizedResourceSet(user);
        LocalizedResourceSet newlrsrcSet=_userRsrc.putIfAbsent(user,newSet);
        if (newlrsrcSet == null) {
          newlrsrcSet=newSet;
        }
        newlrsrcSet.putIfAbsent(lrsrc.getKey(),lrsrc,lrsrc.isUncompressed());
        results.add(lrsrc);
      }
 catch (      ExecutionException e) {
        LOG.error("Error updating blob: ",e);
        if (e.getCause() instanceof AuthorizationException) {
          throw (AuthorizationException)e.getCause();
        }
        if (e.getCause() instanceof KeyNotFoundException) {
          throw (KeyNotFoundException)e.getCause();
        }
      }
    }
  }
 catch (  RejectedExecutionException re) {
    LOG.error("Error updating blobs : ",re);
  }
catch (  InterruptedException ie) {
    throw new IOException("Interrupted Exception",ie);
  }
  return results;
}
