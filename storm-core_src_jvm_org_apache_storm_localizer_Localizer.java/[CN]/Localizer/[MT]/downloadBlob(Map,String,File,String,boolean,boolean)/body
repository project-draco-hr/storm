{
  ClientBlobStore blobstore=null;
  try {
    blobstore=getClientBlobStore();
    long nimbusBlobVersion=Utils.nimbusVersionOfBlob(key,blobstore);
    long oldVersion=Utils.localVersionOfBlob(localFile.toString());
    FileOutputStream out=null;
    PrintWriter writer=null;
    int numTries=0;
    String localizedPath=localFile.toString();
    String localFileWithVersion=Utils.constructBlobWithVersionFileName(localFile.toString(),nimbusBlobVersion);
    String localVersionFile=Utils.constructVersionFileName(localFile.toString());
    String downloadFile=localFileWithVersion;
    if (uncompress) {
      downloadFile=new File(localFile.getParent(),TO_UNCOMPRESS + localFile.getName()).toString();
    }
    while (numTries < _blobDownloadRetries) {
      out=new FileOutputStream(downloadFile);
      numTries++;
      try {
        if (!Utils.canUserReadBlob(blobstore.getBlobMeta(key),user)) {
          throw new AuthorizationException(user + " does not have READ access to " + key);
        }
        InputStreamWithMeta in=blobstore.getBlob(key);
        byte[] buffer=new byte[1024];
        int len;
        while ((len=in.read(buffer)) >= 0) {
          out.write(buffer,0,len);
        }
        out.close();
        in.close();
        if (uncompress) {
          Utils.unpack(new File(downloadFile),new File(localFileWithVersion));
          LOG.debug("uncompressed " + downloadFile + " to: "+ localFileWithVersion);
        }
        LOG.info("Blob: " + key + " updated with new Nimbus-provided version: "+ nimbusBlobVersion+ " local version was: "+ oldVersion);
        writer=new PrintWriter(new BufferedWriter(new FileWriter(localVersionFile,false)));
        writer.println(nimbusBlobVersion);
        writer.close();
        try {
          setBlobPermissions(conf,user,localFileWithVersion);
          setBlobPermissions(conf,user,localVersionFile);
          String tmp_uuid_local=java.util.UUID.randomUUID().toString();
          LOG.debug("Creating a symlink @" + localFile + "."+ tmp_uuid_local+ " , "+ "linking to: "+ localFile+ "."+ nimbusBlobVersion);
          File uuid_symlink=new File(localFile + "." + tmp_uuid_local);
          Files.createSymbolicLink(uuid_symlink.toPath(),Paths.get(Utils.constructBlobWithVersionFileName(localFile.toString(),nimbusBlobVersion)));
          File current_symlink=new File(Utils.constructBlobCurrentSymlinkName(localFile.toString()));
          Files.move(uuid_symlink.toPath(),current_symlink.toPath(),ATOMIC_MOVE);
        }
 catch (        IOException e) {
          try {
            PrintWriter restoreWriter=new PrintWriter(new BufferedWriter(new FileWriter(localVersionFile,false)));
            restoreWriter.println(oldVersion);
            restoreWriter.close();
          }
 catch (          IOException ignore) {
          }
          throw e;
        }
        String oldBlobFile=localFile + "." + oldVersion;
        try {
          if ((oldVersion != -1) && (oldVersion != nimbusBlobVersion)) {
            LOG.info("Removing an old blob file:" + oldBlobFile);
            Files.delete(Paths.get(oldBlobFile));
          }
        }
 catch (        IOException e) {
          LOG.error("Exception removing old blob version: " + oldBlobFile);
        }
        break;
      }
 catch (      AuthorizationException ae) {
        if (out != null) {
          out.close();
        }
        new File(downloadFile).delete();
        throw ae;
      }
catch (      IOException|KeyNotFoundException e) {
        if (out != null) {
          out.close();
        }
        if (writer != null) {
          writer.close();
        }
        new File(downloadFile).delete();
        if (uncompress) {
          try {
            FileUtils.deleteDirectory(new File(localFileWithVersion));
          }
 catch (          IOException ignore) {
          }
        }
        if (!isUpdate) {
          new File(localVersionFile).delete();
        }
        if (numTries < _blobDownloadRetries) {
          LOG.error("Failed to download blob, retrying",e);
        }
 else {
          throw e;
        }
      }
    }
    return new LocalizedResource(key,localizedPath,uncompress);
  }
  finally {
    if (blobstore != null) {
      blobstore.shutdown();
    }
  }
}
