{
  try {
    if (host == null) {
      throw new IllegalArgumentException("host is not set");
    }
    if (port <= 0) {
      throw new IllegalArgumentException("invalid port: " + port);
    }
    TSocket socket=new TSocket(host,port);
    if (timeout != null) {
      socket.setTimeout(timeout);
    }
    final TTransport underlyingTransport=socket;
    String loginConfigurationFile=System.getProperty("java.security.auth.login.config");
    if ((loginConfigurationFile == null) || (loginConfigurationFile.length() == 0)) {
      Map conf=Utils.readStormConfig();
      loginConfigurationFile=(String)conf.get("java.security.auth.login.config");
    }
    if ((loginConfigurationFile == null) || (loginConfigurationFile.length() == 0)) {
      LOG.debug("SASL ANONYMOUS client transport is being established");
      _transport=new TSaslClientTransport(AuthUtils.ANONYMOUS,null,AuthUtils.SERVICE,host,null,null,underlyingTransport);
      _transport.open();
    }
 else {
      LOG.debug("Use jaas login config:" + loginConfigurationFile);
      System.setProperty("java.security.auth.login.config",loginConfigurationFile);
      Configuration auth_conf=Configuration.getConfiguration();
      SaslClientCallbackHandler callback_handler=new SaslClientCallbackHandler(auth_conf);
      Login login=new Login(AuthUtils.LoginContextClient,callback_handler);
      final Subject subject=login.getSubject();
      if (subject.getPrivateCredentials(KerberosTicket.class).isEmpty()) {
        LOG.debug("SASL DIGEST-MD5 client transport is being established");
        _transport=new TSaslClientTransport(AuthUtils.DIGEST,null,AuthUtils.SERVICE,host,null,callback_handler,underlyingTransport);
        _transport.open();
      }
 else {
        final String principal=getPrincipal(subject);
        String serviceName=AuthUtils.get(auth_conf,AuthUtils.LoginContextClient,"serviceName");
        if (serviceName == null) {
          serviceName=default_service_name;
        }
        Map<String,String> props=new TreeMap<String,String>();
        props.put(Sasl.QOP,"auth");
        props.put(Sasl.SERVER_AUTH,"false");
        LOG.debug("SASL GSSAPI client transport is being established");
        _transport=new TSaslClientTransport(AuthUtils.KERBEROS,principal,serviceName,host,props,null,underlyingTransport);
        try {
          Subject.doAs(subject,new PrivilegedExceptionAction<Void>(){
            public Void run(){
              try {
                LOG.debug("do as:" + principal);
                _transport.open();
              }
 catch (              Exception e) {
                LOG.error("Nimbus client failed to open SaslClientTransport to interact with a server during session initiation: " + e);
                e.printStackTrace();
              }
              return null;
            }
          }
);
        }
 catch (        PrivilegedActionException e) {
          LOG.error("Nimbus client experienced a PrivilegedActionException exception while creating a TSaslClientTransport using a JAAS principal context:" + e);
          e.printStackTrace();
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error(e.getMessage());
    throw new RuntimeException(e);
  }
  _protocol=null;
  if (_transport != null)   _protocol=new TBinaryProtocol(_transport);
}
