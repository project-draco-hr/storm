{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map234=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.acked=new HashMap<String,Map<String,Long>>(2 * _map234.size);
    String _key235;
    Map<String,Long> _val236;
    for (int _i237=0; _i237 < _map234.size; ++_i237) {
      _key235=iprot.readString();
{
        org.apache.thrift.protocol.TMap _map238=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
        _val236=new HashMap<String,Long>(2 * _map238.size);
        String _key239;
        long _val240;
        for (int _i241=0; _i241 < _map238.size; ++_i241) {
          _key239=iprot.readString();
          _val240=iprot.readI64();
          _val236.put(_key239,_val240);
        }
      }
      struct.acked.put(_key235,_val236);
    }
  }
  struct.set_acked_isSet(true);
{
    org.apache.thrift.protocol.TMap _map242=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.failed=new HashMap<String,Map<String,Long>>(2 * _map242.size);
    String _key243;
    Map<String,Long> _val244;
    for (int _i245=0; _i245 < _map242.size; ++_i245) {
      _key243=iprot.readString();
{
        org.apache.thrift.protocol.TMap _map246=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
        _val244=new HashMap<String,Long>(2 * _map246.size);
        String _key247;
        long _val248;
        for (int _i249=0; _i249 < _map246.size; ++_i249) {
          _key247=iprot.readString();
          _val248=iprot.readI64();
          _val244.put(_key247,_val248);
        }
      }
      struct.failed.put(_key243,_val244);
    }
  }
  struct.set_failed_isSet(true);
{
    org.apache.thrift.protocol.TMap _map250=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.complete_ms_avg=new HashMap<String,Map<String,Double>>(2 * _map250.size);
    String _key251;
    Map<String,Double> _val252;
    for (int _i253=0; _i253 < _map250.size; ++_i253) {
      _key251=iprot.readString();
{
        org.apache.thrift.protocol.TMap _map254=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
        _val252=new HashMap<String,Double>(2 * _map254.size);
        String _key255;
        double _val256;
        for (int _i257=0; _i257 < _map254.size; ++_i257) {
          _key255=iprot.readString();
          _val256=iprot.readDouble();
          _val252.put(_key255,_val256);
        }
      }
      struct.complete_ms_avg.put(_key251,_val252);
    }
  }
  struct.set_complete_ms_avg_isSet(true);
}
