{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.id != null) {
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeString(struct.id);
    oprot.writeFieldEnd();
  }
  if (struct.name != null) {
    if (struct.is_set_name()) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(struct.name);
      oprot.writeFieldEnd();
    }
  }
  if (struct.is_set_uptime_secs()) {
    oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
    oprot.writeI32(struct.uptime_secs);
    oprot.writeFieldEnd();
  }
  if (struct.status != null) {
    if (struct.is_set_status()) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(struct.status);
      oprot.writeFieldEnd();
    }
  }
  if (struct.is_set_num_tasks()) {
    oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
    oprot.writeI32(struct.num_tasks);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_num_workers()) {
    oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
    oprot.writeI32(struct.num_workers);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_num_executors()) {
    oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
    oprot.writeI32(struct.num_executors);
    oprot.writeFieldEnd();
  }
  if (struct.topology_conf != null) {
    if (struct.is_set_topology_conf()) {
      oprot.writeFieldBegin(TOPOLOGY_CONF_FIELD_DESC);
      oprot.writeString(struct.topology_conf);
      oprot.writeFieldEnd();
    }
  }
  if (struct.id_to_spout_agg_stats != null) {
    if (struct.is_set_id_to_spout_agg_stats()) {
      oprot.writeFieldBegin(ID_TO_SPOUT_AGG_STATS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,struct.id_to_spout_agg_stats.size()));
        for (        Map.Entry<String,ComponentAggregateStats> _iter410 : struct.id_to_spout_agg_stats.entrySet()) {
          oprot.writeString(_iter410.getKey());
          _iter410.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.id_to_bolt_agg_stats != null) {
    if (struct.is_set_id_to_bolt_agg_stats()) {
      oprot.writeFieldBegin(ID_TO_BOLT_AGG_STATS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,struct.id_to_bolt_agg_stats.size()));
        for (        Map.Entry<String,ComponentAggregateStats> _iter411 : struct.id_to_bolt_agg_stats.entrySet()) {
          oprot.writeString(_iter411.getKey());
          _iter411.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.sched_status != null) {
    if (struct.is_set_sched_status()) {
      oprot.writeFieldBegin(SCHED_STATUS_FIELD_DESC);
      oprot.writeString(struct.sched_status);
      oprot.writeFieldEnd();
    }
  }
  if (struct.topology_stats != null) {
    if (struct.is_set_topology_stats()) {
      oprot.writeFieldBegin(TOPOLOGY_STATS_FIELD_DESC);
      struct.topology_stats.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.owner != null) {
    if (struct.is_set_owner()) {
      oprot.writeFieldBegin(OWNER_FIELD_DESC);
      oprot.writeString(struct.owner);
      oprot.writeFieldEnd();
    }
  }
  if (struct.debug_options != null) {
    if (struct.is_set_debug_options()) {
      oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
      struct.debug_options.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.is_set_replication_count()) {
    oprot.writeFieldBegin(REPLICATION_COUNT_FIELD_DESC);
    oprot.writeI32(struct.replication_count);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_requested_memonheap()) {
    oprot.writeFieldBegin(REQUESTED_MEMONHEAP_FIELD_DESC);
    oprot.writeDouble(struct.requested_memonheap);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_requested_memoffheap()) {
    oprot.writeFieldBegin(REQUESTED_MEMOFFHEAP_FIELD_DESC);
    oprot.writeDouble(struct.requested_memoffheap);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_requested_cpu()) {
    oprot.writeFieldBegin(REQUESTED_CPU_FIELD_DESC);
    oprot.writeDouble(struct.requested_cpu);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_assigned_memonheap()) {
    oprot.writeFieldBegin(ASSIGNED_MEMONHEAP_FIELD_DESC);
    oprot.writeDouble(struct.assigned_memonheap);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_assigned_memoffheap()) {
    oprot.writeFieldBegin(ASSIGNED_MEMOFFHEAP_FIELD_DESC);
    oprot.writeDouble(struct.assigned_memoffheap);
    oprot.writeFieldEnd();
  }
  if (struct.is_set_assigned_cpu()) {
    oprot.writeFieldBegin(ASSIGNED_CPU_FIELD_DESC);
    oprot.writeDouble(struct.assigned_cpu);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
