{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.id=iprot.readString();
        struct.set_id_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.name=iprot.readString();
    struct.set_name_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.uptime_secs=iprot.readI32();
struct.set_uptime_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.status=iprot.readString();
struct.set_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_tasks=iprot.readI32();
struct.set_num_tasks_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_workers=iprot.readI32();
struct.set_num_workers_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.num_executors=iprot.readI32();
struct.set_num_executors_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.topology_conf=iprot.readString();
struct.set_topology_conf_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map384=iprot.readMapBegin();
struct.id_to_spout_agg_stats=new HashMap<String,ComponentAggregateStats>(2 * _map384.size);
String _key385;
ComponentAggregateStats _val386;
for (int _i387=0; _i387 < _map384.size; ++_i387) {
_key385=iprot.readString();
_val386=new ComponentAggregateStats();
_val386.read(iprot);
struct.id_to_spout_agg_stats.put(_key385,_val386);
}
iprot.readMapEnd();
}
struct.set_id_to_spout_agg_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map388=iprot.readMapBegin();
struct.id_to_bolt_agg_stats=new HashMap<String,ComponentAggregateStats>(2 * _map388.size);
String _key389;
ComponentAggregateStats _val390;
for (int _i391=0; _i391 < _map388.size; ++_i391) {
_key389=iprot.readString();
_val390=new ComponentAggregateStats();
_val390.read(iprot);
struct.id_to_bolt_agg_stats.put(_key389,_val390);
}
iprot.readMapEnd();
}
struct.set_id_to_bolt_agg_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.sched_status=iprot.readString();
struct.set_sched_status_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.topology_stats=new TopologyStats();
struct.topology_stats.read(iprot);
struct.set_topology_stats_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.owner=iprot.readString();
struct.set_owner_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.debug_options=new DebugOptions();
struct.debug_options.read(iprot);
struct.set_debug_options_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.replication_count=iprot.readI32();
struct.set_replication_count_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
