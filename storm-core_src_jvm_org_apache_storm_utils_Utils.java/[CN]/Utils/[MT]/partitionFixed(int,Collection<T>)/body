{
  List<List<T>> ret=new ArrayList<>();
  if (maxNumChunks == 0 || coll == null) {
    return ret;
  }
  Map<Integer,Integer> parts=integerDivided(coll.size(),maxNumChunks);
  List<Integer> sortedKeys=new ArrayList<Integer>(parts.keySet());
  Collections.sort(sortedKeys,Collections.reverseOrder());
  Iterator<T> it=coll.iterator();
  for (  Integer chunkSize : sortedKeys) {
    if (!it.hasNext()) {
      break;
    }
    Integer times=parts.get(chunkSize);
    for (int i=0; i < times; i++) {
      if (!it.hasNext()) {
        break;
      }
      List<T> chunkList=new ArrayList<>();
      for (int j=0; j < chunkSize; j++) {
        if (!it.hasNext()) {
          break;
        }
        chunkList.add(it.next());
      }
      ret.add(chunkList);
    }
  }
  return ret;
}
