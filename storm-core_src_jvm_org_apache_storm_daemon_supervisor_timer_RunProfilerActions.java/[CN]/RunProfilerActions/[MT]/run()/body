{
  Map<String,List<ProfileRequest>> stormIdToActions=supervisorData.getStormIdToProfilerActions().get();
  try {
    for (    Map.Entry<String,List<ProfileRequest>> entry : stormIdToActions.entrySet()) {
      String stormId=entry.getKey();
      List<ProfileRequest> requests=entry.getValue();
      if (requests != null) {
        for (        ProfileRequest profileRequest : requests) {
          if (profileRequest.get_nodeInfo().get_node().equals(hostName)) {
            boolean stop=System.currentTimeMillis() > profileRequest.get_time_stamp();
            Long port=profileRequest.get_nodeInfo().get_port().iterator().next();
            String targetDir=ConfigUtils.workerArtifactsRoot(conf,stormId,port.intValue());
            Map stormConf=ConfigUtils.readSupervisorStormConf(conf,stormId);
            String user=null;
            if (stormConf.get(Config.TOPOLOGY_SUBMITTER_USER) != null) {
              user=(String)(stormConf.get(Config.TOPOLOGY_SUBMITTER_USER));
            }
            Map<String,String> env=null;
            if (stormConf.get(Config.TOPOLOGY_ENVIRONMENT) != null) {
              env=(Map<String,String>)stormConf.get(Config.TOPOLOGY_ENVIRONMENT);
            }
 else {
              env=new HashMap<String,String>();
            }
            String str=ConfigUtils.workerArtifactsPidPath(conf,stormId,port.intValue());
            StringBuilder stringBuilder=new StringBuilder();
            String workerPid=null;
            try (FileReader reader=new FileReader(str);BufferedReader br=new BufferedReader(reader)){
              workerPid=br.readLine().trim();
            }
             ProfileAction profileAction=profileRequest.get_action();
            String logPrefix="ProfilerAction process " + stormId + ":"+ port+ " PROFILER_ACTION: "+ profileAction+ " ";
            List<String> command=mkCommand(profileAction,stop,workerPid,targetDir);
            try {
              ActionExitCallback actionExitCallback=new ActionExitCallback(stormId,profileRequest,logPrefix,stop);
              launchProfilerActionForWorker(user,targetDir,command,env,actionExitCallback,logPrefix);
            }
 catch (            IOException e) {
              LOG.error("Error in processing ProfilerAction '{}' for {}:{}, will retry later",profileAction,stormId,port);
            }
catch (            RuntimeException e) {
              LOG.error("Error in processing ProfilerAction '{}' for {}:{}, will retry later",profileAction,stormId,port);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Error running profiler actions, will retry again later");
  }
}
