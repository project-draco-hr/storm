{
  try {
    if (UserGroupInformation.isSecurityEnabled()) {
      final Configuration configuration=new Configuration();
      HdfsSecurityUtil.login(conf,configuration);
      final String topologySubmitterUser=(String)conf.get(Config.TOPOLOGY_SUBMITTER_PRINCIPAL);
      final String hdfsUser=(String)conf.get(HdfsSecurityUtil.STORM_USER_NAME_KEY);
      final URI nameNodeURI=conf.containsKey(TOPOLOGY_HDFS_URI) ? new URI(conf.get(TOPOLOGY_HDFS_URI).toString()) : FileSystem.getDefaultUri(configuration);
      UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
      final UserGroupInformation proxyUser=UserGroupInformation.createProxyUser(topologySubmitterUser,ugi);
      Credentials creds=(Credentials)proxyUser.doAs(new PrivilegedAction<Object>(){
        @Override public Object run(){
          try {
            FileSystem fileSystem=FileSystem.get(nameNodeURI,configuration);
            Credentials credential=proxyUser.getCredentials();
            fileSystem.addDelegationTokens(hdfsUser,credential);
            return credential;
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      ByteArrayOutputStream bao=new ByteArrayOutputStream();
      ObjectOutputStream out=new ObjectOutputStream(bao);
      creds.write(out);
      out.flush();
      out.close();
      return bao.toByteArray();
    }
 else {
      throw new RuntimeException("Security is not enabled for HDFS");
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException("Failed to get delegation tokens.",ex);
  }
}
