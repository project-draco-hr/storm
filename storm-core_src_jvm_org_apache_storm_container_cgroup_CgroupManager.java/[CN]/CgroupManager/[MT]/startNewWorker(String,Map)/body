{
  Number cpuNum=(Number)resourcesMap.get("cpu");
  Number totalMem=null;
  if (resourcesMap.get("memory") != null) {
    totalMem=(Number)resourcesMap.get("memory");
  }
  CgroupCommon workerGroup=new CgroupCommon(workerId,hierarchy,this.rootCgroup);
  this.center.create(workerGroup);
  if (cpuNum != null) {
    CpuCore cpuCore=(CpuCore)workerGroup.getCores().get(SubSystemType.cpu);
    try {
      cpuCore.setCpuShares(cpuNum.intValue());
    }
 catch (    IOException e) {
      throw new RuntimeException("Cannot set cpu.shares! Exception: " + e);
    }
  }
  if (totalMem != null) {
    MemoryCore memCore=(MemoryCore)workerGroup.getCores().get(SubSystemType.memory);
    try {
      memCore.setPhysicalUsageLimit(Long.valueOf(totalMem.longValue() * 1024 * 1024));
    }
 catch (    IOException e) {
      throw new RuntimeException("Cannot set memory.limit_in_bytes! Exception: " + e);
    }
  }
  StringBuilder sb=new StringBuilder();
  sb.append(this.conf.get(Config.STORM_CGROUP_CGEXEC_CMD)).append(" -g ");
  Iterator<SubSystemType> it=this.hierarchy.getSubSystems().iterator();
  while (it.hasNext()) {
    sb.append(it.next().toString());
    if (it.hasNext()) {
      sb.append(",");
    }
 else {
      sb.append(":");
    }
  }
  sb.append(workerGroup.getName());
  return sb.toString();
}
