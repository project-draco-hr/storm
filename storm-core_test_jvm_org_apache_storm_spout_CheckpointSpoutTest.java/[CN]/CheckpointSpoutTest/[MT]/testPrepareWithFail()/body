{
  Map<String,Object> stormConf=new HashMap<>();
  KeyValueState<String,CheckPointState> state=(KeyValueState<String,CheckPointState>)StateFactory.getState("__state",stormConf,mockTopologyContext);
  CheckPointState txState=new CheckPointState(-1,COMMITTED);
  state.put("__state",txState);
  spout.open(mockTopologyContext,mockOutputCollector,0,state);
  ArgumentCaptor<String> stream=ArgumentCaptor.forClass(String.class);
  ArgumentCaptor<Values> values=ArgumentCaptor.forClass(Values.class);
  ArgumentCaptor<Object> msgId=ArgumentCaptor.forClass(Object.class);
  spout.nextTuple();
  spout.ack(-1L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.ack(0L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.ack(0L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.fail(1L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.fail(1L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.ack(1L);
  Utils.sleep(10);
  spout.nextTuple();
  spout.ack(0L);
  Utils.sleep(10);
  spout.nextTuple();
  Mockito.verify(mockOutputCollector,Mockito.times(8)).emit(stream.capture(),values.capture(),msgId.capture());
  Values expectedTuple=new Values(1L,Action.PREPARE);
  assertEquals(CheckpointSpout.CHECKPOINT_STREAM_ID,stream.getValue());
  assertEquals(expectedTuple,values.getValue());
  assertEquals(1L,msgId.getValue());
}
