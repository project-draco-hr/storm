{
  final int port=8080;
  final String topoId="test_topology";
  final String workerId="worker_id";
  final String user="me";
  final String stormLocal=asAbsPath("tmp","testing");
  final File workerArtifacts=asAbsFile(stormLocal,topoId,String.valueOf(port));
  final File logMetadataFile=new File(workerArtifacts,"worker.yaml");
  final File workerUserFile=asAbsFile(stormLocal,"workers-users",workerId);
  final File workerRoot=asAbsFile(stormLocal,"workers",workerId);
  final File distRoot=asAbsFile(stormLocal,"supervisor","stormdist",topoId);
  final Map<String,Object> topoConf=new HashMap<>();
  final List<String> topoUsers=Arrays.asList("t-user-a","t-user-b");
  final List<String> logUsers=Arrays.asList("l-user-a","l-user-b");
  final List<String> topoGroups=Arrays.asList("t-group-a","t-group-b");
  final List<String> logGroups=Arrays.asList("l-group-a","l-group-b");
  topoConf.put(Config.TOPOLOGY_SUBMITTER_USER,user);
  topoConf.put(Config.LOGS_GROUPS,logGroups);
  topoConf.put(Config.TOPOLOGY_GROUPS,topoGroups);
  topoConf.put(Config.LOGS_USERS,logUsers);
  topoConf.put(Config.TOPOLOGY_USERS,topoUsers);
  final Map<String,Object> superConf=new HashMap<>();
  superConf.put(Config.STORM_LOCAL_DIR,stormLocal);
  superConf.put(Config.STORM_WORKERS_ARTIFACTS_DIR,stormLocal);
  final StringWriter yamlDump=new StringWriter();
  AdvancedFSOps ops=mock(AdvancedFSOps.class);
  when(ops.doRequiredTopoFilesExist(superConf,topoId)).thenReturn(true);
  when(ops.fileExists(workerArtifacts)).thenReturn(true);
  when(ops.fileExists(workerRoot)).thenReturn(true);
  when(ops.getWriter(logMetadataFile)).thenReturn(yamlDump);
  LocalAssignment la=new LocalAssignment();
  la.set_topology_id(topoId);
  MockContainer mc=new MockContainer(ContainerType.LAUNCH,superConf,"SUPERVISOR",8080,la,null,workerId,topoConf,ops);
  mc.setup();
  verify(ops).forceMkdir(new File(workerRoot,"pids"));
  verify(ops).forceMkdir(new File(workerRoot,"tmp"));
  verify(ops).forceMkdir(new File(workerRoot,"heartbeats"));
  verify(ops).fileExists(workerArtifacts);
  verify(ops).getWriter(logMetadataFile);
  String yamlResult=yamlDump.toString();
  Yaml yaml=new Yaml();
  Map<String,Object> result=(Map<String,Object>)yaml.load(yamlResult);
  assertEquals(workerId,result.get("worker-id"));
  assertEquals(user,result.get(Config.TOPOLOGY_SUBMITTER_USER));
  HashSet<String> allowedUsers=new HashSet<>(topoUsers);
  allowedUsers.addAll(logUsers);
  assertEquals(allowedUsers,new HashSet<String>((List<String>)result.get(Config.LOGS_USERS)));
  HashSet<String> allowedGroups=new HashSet<>(topoGroups);
  allowedGroups.addAll(logGroups);
  assertEquals(allowedGroups,new HashSet<String>((List<String>)result.get(Config.LOGS_GROUPS)));
  verify(ops).dump(workerUserFile,user);
  verify(ops).createSymlink(new File(workerRoot,"artifacts"),workerArtifacts);
  verify(ops).createSymlink(new File(workerRoot,"resources"),new File(distRoot,"resources"));
}
