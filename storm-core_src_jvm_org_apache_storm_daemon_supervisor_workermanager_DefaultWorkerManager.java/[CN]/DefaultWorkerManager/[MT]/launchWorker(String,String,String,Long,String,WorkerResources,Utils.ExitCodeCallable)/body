{
  try {
    String stormHome=ConfigUtils.concatIfNotNull(System.getProperty("storm.home"));
    String stormOptions=ConfigUtils.concatIfNotNull(System.getProperty("storm.options"));
    String stormConfFile=ConfigUtils.concatIfNotNull(System.getProperty("storm.conf.file"));
    String workerTmpDir=ConfigUtils.workerTmpRoot(conf,workerId);
    String stormLogDir=ConfigUtils.getLogDir();
    String stormLogConfDir=(String)(conf.get(Config.STORM_LOG4J2_CONF_DIR));
    String stormLog4j2ConfDir;
    if (StringUtils.isNotBlank(stormLogConfDir)) {
      if (Utils.isAbsolutePath(stormLogConfDir)) {
        stormLog4j2ConfDir=stormLogConfDir;
      }
 else {
        stormLog4j2ConfDir=stormHome + Utils.FILE_PATH_SEPARATOR + stormLogConfDir;
      }
    }
 else {
      stormLog4j2ConfDir=stormHome + Utils.FILE_PATH_SEPARATOR + "log4j2";
    }
    String stormRoot=ConfigUtils.supervisorStormDistRoot(conf,stormId);
    String jlp=jlp(stormRoot,conf);
    String stormJar=ConfigUtils.supervisorStormJarPath(stormRoot);
    Map stormConf=ConfigUtils.readSupervisorStormConf(conf,stormId);
    String workerClassPath=getWorkerClassPath(stormJar,stormConf);
    Object topGcOptsObject=stormConf.get(Config.TOPOLOGY_WORKER_GC_CHILDOPTS);
    List<String> topGcOpts=new ArrayList<>();
    if (topGcOptsObject instanceof String) {
      topGcOpts.add((String)topGcOptsObject);
    }
 else     if (topGcOptsObject instanceof List) {
      topGcOpts.addAll((List<String>)topGcOptsObject);
    }
    int memOnheap=0;
    if (resources.get_mem_on_heap() > 0) {
      memOnheap=(int)Math.ceil(resources.get_mem_on_heap());
    }
 else {
      memOnheap=Utils.getInt(stormConf.get(Config.WORKER_HEAP_MEMORY_MB),768);
    }
    int memoffheap=(int)Math.ceil(resources.get_mem_off_heap());
    int cpu=(int)Math.ceil(resources.get_cpu());
    List<String> gcOpts=null;
    if (topGcOpts.size() > 0) {
      gcOpts=substituteChildopts(topGcOpts,workerId,stormId,port,memOnheap);
    }
 else {
      gcOpts=substituteChildopts(conf.get(Config.WORKER_GC_CHILDOPTS),workerId,stormId,port,memOnheap);
    }
    Object topoWorkerLogwriterObject=stormConf.get(Config.TOPOLOGY_WORKER_LOGWRITER_CHILDOPTS);
    List<String> topoWorkerLogwriterChildopts=new ArrayList<>();
    if (topoWorkerLogwriterObject instanceof String) {
      topoWorkerLogwriterChildopts.add((String)topoWorkerLogwriterObject);
    }
 else     if (topoWorkerLogwriterObject instanceof List) {
      topoWorkerLogwriterChildopts.addAll((List<String>)topoWorkerLogwriterObject);
    }
    String user=(String)stormConf.get(Config.TOPOLOGY_SUBMITTER_USER);
    String logfileName="worker.log";
    String workersArtifacets=ConfigUtils.workerArtifactsRoot(conf);
    String loggingSensitivity=(String)stormConf.get(Config.TOPOLOGY_LOGGING_SENSITIVITY);
    if (loggingSensitivity == null) {
      loggingSensitivity="S3";
    }
    List<String> workerChildopts=substituteChildopts(conf.get(Config.WORKER_CHILDOPTS),workerId,stormId,port,memOnheap);
    List<String> topWorkerChildopts=substituteChildopts(stormConf.get(Config.TOPOLOGY_WORKER_CHILDOPTS),workerId,stormId,port,memOnheap);
    List<String> workerProfilerChildopts=null;
    if (Utils.getBoolean(conf.get(Config.WORKER_PROFILER_ENABLED),false)) {
      workerProfilerChildopts=substituteChildopts(conf.get(Config.WORKER_PROFILER_CHILDOPTS),workerId,stormId,port,memOnheap);
    }
 else {
      workerProfilerChildopts=new ArrayList<>();
    }
    Map<String,String> topEnvironment=new HashMap<String,String>();
    Map<String,String> environment=(Map<String,String>)stormConf.get(Config.TOPOLOGY_ENVIRONMENT);
    if (environment != null) {
      topEnvironment.putAll(environment);
    }
    topEnvironment.put("LD_LIBRARY_PATH",jlp);
    String log4jConfigurationFile=null;
    if (System.getProperty("os.name").startsWith("Windows") && !stormLog4j2ConfDir.startsWith("file:")) {
      log4jConfigurationFile="file:///" + stormLog4j2ConfDir;
    }
 else {
      log4jConfigurationFile=stormLog4j2ConfDir;
    }
    log4jConfigurationFile=log4jConfigurationFile + Utils.FILE_PATH_SEPARATOR + "worker.xml";
    List<String> commandList=new ArrayList<>();
    commandList.add(SupervisorUtils.javaCmd("java"));
    commandList.add("-cp");
    commandList.add(workerClassPath);
    commandList.addAll(topoWorkerLogwriterChildopts);
    commandList.add("-Dlogfile.name=" + logfileName);
    commandList.add("-Dstorm.home=" + stormHome);
    commandList.add("-Dworkers.artifacts=" + workersArtifacets);
    commandList.add("-Dstorm.id=" + stormId);
    commandList.add("-Dworker.id=" + workerId);
    commandList.add("-Dworker.port=" + port);
    commandList.add("-Dstorm.log.dir=" + stormLogDir);
    commandList.add("-Dlog4j.configurationFile=" + log4jConfigurationFile);
    commandList.add("-DLog4jContextSelector=org.apache.logging.log4j.core.selector.BasicContextSelector");
    commandList.add("org.apache.storm.LogWriter");
    commandList.add(SupervisorUtils.javaCmd("java"));
    commandList.add("-server");
    commandList.addAll(workerChildopts);
    commandList.addAll(topWorkerChildopts);
    commandList.addAll(gcOpts);
    commandList.addAll(workerProfilerChildopts);
    commandList.add("-Djava.library.path=" + jlp);
    commandList.add("-Dlogfile.name=" + logfileName);
    commandList.add("-Dstorm.home=" + stormHome);
    commandList.add("-Dworkers.artifacts=" + workersArtifacets);
    commandList.add("-Dstorm.conf.file=" + stormConfFile);
    commandList.add("-Dstorm.options=" + stormOptions);
    commandList.add("-Dstorm.log.dir=" + stormLogDir);
    commandList.add("-Djava.io.tmpdir=" + workerTmpDir);
    commandList.add("-Dlogging.sensitivity=" + loggingSensitivity);
    commandList.add("-Dlog4j.configurationFile=" + log4jConfigurationFile);
    commandList.add("-DLog4jContextSelector=org.apache.logging.log4j.core.selector.BasicContextSelector");
    commandList.add("-Dstorm.id=" + stormId);
    commandList.add("-Dworker.id=" + workerId);
    commandList.add("-Dworker.port=" + port);
    commandList.add("-cp");
    commandList.add(workerClassPath);
    commandList.add("org.apache.storm.daemon.worker");
    commandList.add(stormId);
    commandList.add(assignmentId);
    commandList.add(String.valueOf(port));
    commandList.add(workerId);
    if (resourceIsolationManager != null) {
      int cGroupMem=(int)(Math.ceil((double)conf.get(Config.STORM_CGROUP_MEMORY_LIMIT_TOLERANCE_MARGIN_MB)));
      int memoryValue=memoffheap + memOnheap + cGroupMem;
      int cpuValue=cpu;
      Map<String,Number> map=new HashMap<>();
      map.put("cpu",cpuValue);
      map.put("memory",memoryValue);
      resourceIsolationManager.reserveResourcesForWorker(workerId,map);
      commandList=resourceIsolationManager.getLaunchCommand(workerId,commandList);
    }
    LOG.info("Launching worker with command: {}. ",Utils.shellCmd(commandList));
    String logPrefix="Worker Process " + workerId;
    String workerDir=ConfigUtils.workerRoot(conf,workerId);
    if (runWorkerAsUser) {
      List<String> args=new ArrayList<>();
      args.add("worker");
      args.add(workerDir);
      args.add(Utils.writeScript(workerDir,commandList,topEnvironment));
      List<String> commandPrefix=null;
      if (resourceIsolationManager != null)       commandPrefix=resourceIsolationManager.getLaunchCommandPrefix(workerId);
      SupervisorUtils.processLauncher(conf,user,commandPrefix,args,null,logPrefix,workerExitCallback,new File(workerDir));
    }
 else {
      Utils.launchProcess(commandList,topEnvironment,logPrefix,workerExitCallback,new File(workerDir));
    }
  }
 catch (  IOException e) {
    throw Utils.wrapInRuntime(e);
  }
  return null;
}
