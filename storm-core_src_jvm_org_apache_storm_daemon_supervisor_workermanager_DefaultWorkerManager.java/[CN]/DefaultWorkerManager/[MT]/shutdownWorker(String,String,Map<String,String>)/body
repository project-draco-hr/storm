{
  try {
    LOG.info("Shutting down {}:{}",supervisorId,workerId);
    Collection<String> pids=Utils.readDirContents(ConfigUtils.workerPidsRoot(conf,workerId));
    Integer shutdownSleepSecs=Utils.getInt(conf.get(Config.SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS));
    String user=ConfigUtils.getWorkerUser(conf,workerId);
    String threadPid=workerThreadPids.get(workerId);
    if (StringUtils.isNotBlank(threadPid)) {
      ProcessSimulator.killProcess(threadPid);
    }
    for (    String pid : pids) {
      if (runWorkerAsUser) {
        List<String> commands=new ArrayList<>();
        commands.add("signal");
        commands.add(pid);
        commands.add("15");
        String logPrefix="kill -15 " + pid;
        SupervisorUtils.processLauncherAndWait(conf,user,commands,null,logPrefix);
      }
 else {
        Utils.killProcessWithSigTerm(pid);
      }
    }
    if (pids.size() > 0) {
      LOG.info("Sleep {} seconds for execution of cleanup threads on worker.",shutdownSleepSecs);
      Time.sleepSecs(shutdownSleepSecs);
    }
    for (    String pid : pids) {
      if (runWorkerAsUser) {
        List<String> commands=new ArrayList<>();
        commands.add("signal");
        commands.add(pid);
        commands.add("9");
        String logPrefix="kill -9 " + pid;
        SupervisorUtils.processLauncherAndWait(conf,user,commands,null,logPrefix);
      }
 else {
        Utils.forceKillProcess(pid);
      }
      String path=ConfigUtils.workerPidPath(conf,workerId,pid);
      if (runWorkerAsUser) {
        SupervisorUtils.rmrAsUser(conf,workerId,path);
      }
 else {
        try {
          LOG.debug("Removing path {}",path);
          new File(path).delete();
        }
 catch (        Exception e) {
        }
      }
    }
    LOG.info("Shut down {}:{}",supervisorId,workerId);
  }
 catch (  Exception e) {
    throw Utils.wrapInRuntime(e);
  }
  return null;
}
