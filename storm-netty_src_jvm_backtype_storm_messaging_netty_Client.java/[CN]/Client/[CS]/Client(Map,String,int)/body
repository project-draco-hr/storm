{
  message_queue=new LinkedBlockingQueue<Object>();
  retries=new AtomicInteger(0);
  channelRef=new AtomicReference<Channel>(null);
  being_closed=new AtomicBoolean(false);
  buffer_size=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_BUFFER_SIZE));
  max_retries=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES));
  base_sleep_ms=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MIN_SLEEP_MS));
  max_sleep_ms=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MAX_SLEEP_MS));
  int maxWorkers=Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS));
  if (maxWorkers > 0) {
    factory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool(),maxWorkers);
  }
 else {
    factory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());
  }
  bootstrap=new ClientBootstrap(factory);
  bootstrap.setOption("tcpNoDelay",true);
  bootstrap.setOption("sendBufferSize",buffer_size);
  bootstrap.setOption("keepAlive",true);
  bootstrap.setPipelineFactory(new StormClientPipelineFactory(this));
  remote_addr=new InetSocketAddress(host,port);
  bootstrap.connect(remote_addr);
}
