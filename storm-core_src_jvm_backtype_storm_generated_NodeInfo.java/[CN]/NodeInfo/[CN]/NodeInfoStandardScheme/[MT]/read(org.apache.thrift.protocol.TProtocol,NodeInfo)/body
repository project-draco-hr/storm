{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.node=iprot.readString();
        struct.set_node_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
      org.apache.thrift.protocol.TSet _set516=iprot.readSetBegin();
      struct.port=new HashSet<Long>(2 * _set516.size);
      long _elem517;
      for (int _i518=0; _i518 < _set516.size; ++_i518) {
        _elem517=iprot.readI64();
        struct.port.add(_elem517);
      }
      iprot.readSetEnd();
    }
    struct.set_port_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
