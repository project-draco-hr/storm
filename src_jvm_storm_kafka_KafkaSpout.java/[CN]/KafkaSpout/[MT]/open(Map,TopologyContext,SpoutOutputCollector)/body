{
  _collector=collector;
  Map stateConf=new HashMap(conf);
  List<String> zkServers=_spoutConfig.zkServers;
  if (zkServers == null) {
    zkServers=(List<String>)conf.get(Config.STORM_ZOOKEEPER_SERVERS);
  }
  Integer zkPort=_spoutConfig.zkPort;
  if (zkPort == null) {
    zkPort=((Number)conf.get(Config.STORM_ZOOKEEPER_PORT)).intValue();
  }
  stateConf.put(Config.TRANSACTIONAL_ZOOKEEPER_SERVERS,zkServers);
  stateConf.put(Config.TRANSACTIONAL_ZOOKEEPER_PORT,zkPort);
  stateConf.put(Config.TRANSACTIONAL_ZOOKEEPER_ROOT,_spoutConfig.zkRoot);
  _state=new ZkState(stateConf);
  _connections=new DynamicPartitionConnections(_spoutConfig,KafkaUtils.makeBrokerReader(conf,_spoutConfig));
  int totalTasks=context.getComponentTasks(context.getThisComponentId()).size();
  if (_spoutConfig.hosts instanceof StaticHosts) {
    _coordinator=new StaticCoordinator(_connections,conf,_spoutConfig,_state,context.getThisTaskIndex(),totalTasks,_uuid);
  }
 else {
    _coordinator=new ZkCoordinator(_connections,conf,_spoutConfig,_state,context.getThisTaskIndex(),totalTasks,_uuid);
  }
  context.registerMetric("kafkaOffset",new IMetric(){
    KafkaUtils.KafkaOffsetMetric _kafkaOffsetMetric=new KafkaUtils.KafkaOffsetMetric(_spoutConfig.topic,_connections);
    @Override public Object getValueAndReset(){
      List<PartitionManager> pms=_coordinator.getMyManagedPartitions();
      Set<Partition> latestPartitions=new HashSet();
      for (      PartitionManager pm : pms) {
        latestPartitions.add(pm.getPartition());
      }
      _kafkaOffsetMetric.refreshPartitions(latestPartitions);
      for (      PartitionManager pm : pms) {
        _kafkaOffsetMetric.setLatestEmittedOffset(pm.getPartition(),pm.lastCompletedOffset());
      }
      return _kafkaOffsetMetric.getValueAndReset();
    }
  }
,60);
  context.registerMetric("kafkaPartition",new IMetric(){
    @Override public Object getValueAndReset(){
      List<PartitionManager> pms=_coordinator.getMyManagedPartitions();
      Map concatMetricsDataMaps=new HashMap();
      for (      PartitionManager pm : pms) {
        concatMetricsDataMaps.putAll(pm.getMetricsDataMap());
      }
      return concatMetricsDataMaps;
    }
  }
,60);
}
