{
  final long pid=100;
  final String topoId="test_topology";
  final int port=8080;
  final String workerId="worker-id";
  final String stormLocal=ContainerTest.asAbsPath("tmp","testing");
  final String topoRoot=ContainerTest.asAbsPath(stormLocal,topoId,String.valueOf(port));
  final File workerArtifactsPid=ContainerTest.asAbsFile(topoRoot,"worker.pid");
  final Map<String,Object> superConf=new HashMap<>();
  superConf.put(Config.STORM_LOCAL_DIR,stormLocal);
  superConf.put(Config.STORM_WORKERS_ARTIFACTS_DIR,stormLocal);
  LocalAssignment la=new LocalAssignment();
  la.set_topology_id(topoId);
  AdvancedFSOps ops=mock(AdvancedFSOps.class);
  when(ops.doRequiredTopoFilesExist(superConf,topoId)).thenReturn(true);
  when(ops.slurpString(workerArtifactsPid)).thenReturn(String.valueOf(pid));
  LocalState ls=mock(LocalState.class);
  MockBasicContainer mc=new MockBasicContainer(ContainerType.LAUNCH,superConf,"SUPERVISOR",port,la,null,ls,workerId,new HashMap<>(),ops,"profile");
  ProfileRequest req=new ProfileRequest();
  req.set_action(ProfileAction.JMAP_DUMP);
  mc.runProfiling(req,false);
  assertEquals(1,mc.profileCmds.size());
  CommandRun cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"jmap",topoRoot),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
  req.set_action(ProfileAction.JSTACK_DUMP);
  mc.runProfiling(req,false);
  assertEquals(1,mc.profileCmds.size());
  cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"jstack",topoRoot),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
  req.set_action(ProfileAction.JVM_RESTART);
  mc.runProfiling(req,false);
  assertEquals(1,mc.profileCmds.size());
  cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"kill"),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
  req.set_action(ProfileAction.JPROFILE_DUMP);
  mc.runProfiling(req,false);
  assertEquals(1,mc.profileCmds.size());
  cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"dump",topoRoot),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
  req.set_action(ProfileAction.JPROFILE_STOP);
  mc.runProfiling(req,false);
  assertEquals(1,mc.profileCmds.size());
  cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"start"),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
  req.set_action(ProfileAction.JPROFILE_STOP);
  mc.runProfiling(req,true);
  assertEquals(1,mc.profileCmds.size());
  cmd=mc.profileCmds.get(0);
  mc.profileCmds.clear();
  assertEquals(Arrays.asList("profile",String.valueOf(pid),"stop",topoRoot),cmd.cmd);
  assertEquals(new File(topoRoot),cmd.pwd);
}
