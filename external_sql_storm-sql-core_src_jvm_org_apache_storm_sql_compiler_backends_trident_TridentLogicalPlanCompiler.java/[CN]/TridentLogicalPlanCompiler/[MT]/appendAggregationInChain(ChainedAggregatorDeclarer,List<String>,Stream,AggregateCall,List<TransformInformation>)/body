{
  String outputField=call.getName();
  String aggregationName=call.getAggregation().getName();
  if (call.getArgList().size() != 1) {
    if (aggregationName.toUpperCase().equals("COUNT")) {
      if (call.getArgList().size() > 0) {
        throw new IllegalArgumentException("COUNT should have one or no(a.k.a '*') argument");
      }
    }
 else {
      throw new IllegalArgumentException("Aggregate call should have one argument");
    }
  }
switch (aggregationName.toUpperCase()) {
case "COUNT":
    appendCountFunctionToChain(chainedDeclarer,groupByFieldNames,inputStream,call,outputField);
  break;
case "MAX":
appendMaxFunctionToChain(chainedDeclarer,groupByFieldNames,inputStream,call,outputField);
break;
case "MIN":
appendMinFunctionToChain(chainedDeclarer,groupByFieldNames,inputStream,call,outputField);
break;
case "SUM":
appendSumFunctionToChain(chainedDeclarer,groupByFieldNames,inputStream,call,outputField);
break;
case "AVG":
appendAvgFunctionToChain(chainedDeclarer,groupByFieldNames,inputStream,call,outputField,transformsAfterChained);
break;
default :
throw new UnsupportedOperationException("Not supported function: " + aggregationName.toUpperCase());
}
}
