{
  SchemaPlus schema=Frameworks.createRootSchema(true);
  JavaTypeFactory typeFactory=new JavaTypeFactoryImpl(RelDataTypeSystem.DEFAULT);
  StreamableTable streamableTable=new CompilerUtil.TableBuilderInfo(typeFactory).field("ID",SqlTypeName.INTEGER).field("MAPFIELD",SqlTypeName.ANY).field("NESTEDMAPFIELD",SqlTypeName.ANY).field("ARRAYFIELD",SqlTypeName.ANY).build();
  Table table=streamableTable.stream();
  schema.add("FOO",table);
  schema.add("BAR",table);
  schema.add("MYPLUS",ScalarFunctionImpl.create(MyPlus.class,"eval"));
  List<SqlOperatorTable> sqlOperatorTables=new ArrayList<>();
  sqlOperatorTables.add(SqlStdOperatorTable.instance());
  sqlOperatorTables.add(new CalciteCatalogReader(CalciteSchema.from(schema),false,Collections.<String>emptyList(),typeFactory));
  SqlOperatorTable chainedSqlOperatorTable=new ChainedSqlOperatorTable(sqlOperatorTables);
  FrameworkConfig config=Frameworks.newConfigBuilder().defaultSchema(schema).operatorTable(chainedSqlOperatorTable).build();
  Planner planner=Frameworks.getPlanner(config);
  SqlNode parse=planner.parse(sql);
  SqlNode validate=planner.validate(parse);
  RelNode tree=planner.convert(validate);
  System.out.println(RelOptUtil.toString(tree,SqlExplainLevel.ALL_ATTRIBUTES));
  return new CalciteState(schema,tree);
}
