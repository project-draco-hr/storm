{
  topo.submitSuccessfully();
  final int minSpoutEmits=1000 + windowSize;
  final int minBoltEmits=5;
  String boltName=testable.getBoltName();
  String spoutName=testable.getSpoutName();
  topo.waitForProgress(minSpoutEmits,spoutName,180);
  topo.waitForProgress(minBoltEmits,boltName,180);
  List<TopoWrap.ExecutorURL> boltUrls=topo.getLogUrls(boltName);
  log.info(boltUrls.toString());
  final List<LogData> allBoltData=topo.getLogData(boltName);
  final List<LogData> allSpoutData=topo.getLogData(spoutName);
  Assert.assertTrue(allBoltData.size() >= minBoltEmits,"Expecting min " + minBoltEmits + " bolt emits, found: "+ allBoltData.size()+ " \n\t"+ allBoltData);
  final int numberOfWindows=allBoltData.size() - windowSize / slideSize;
  for (int i=0; i < numberOfWindows; ++i) {
    log.info("Comparing window: " + (i + 1) + " of "+ numberOfWindows);
    final int toIndex=(i + 1) * slideSize;
    final int fromIndex=toIndex - windowSize;
    final int positiveFromIndex=fromIndex > 0 ? fromIndex : 0;
    final List<LogData> windowData=allSpoutData.subList(positiveFromIndex,toIndex);
    final String actualString=allBoltData.get(i).toString();
    for (    LogData oneLog : windowData) {
      final String logStr=oneLog.getData();
      Assert.assertTrue(actualString.contains(logStr),String.format("Missing: '%s' \nActual: '%s' \nCalculated window: '%s'",logStr,actualString,windowData));
    }
  }
}
