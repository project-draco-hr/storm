{
  final int PQ_SIZE=1024;
  final int MAX_ROUNDS=512;
  long totalSize=0;
  int deletedFiles=0;
  for (  File dir : dirs) {
    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){
      for (      Path path : stream) {
        File file=path.toFile();
        totalSize+=file.length();
      }
    }
   }
  long toDeleteSize=totalSize - quota;
  if (toDeleteSize <= 0) {
    return deletedFiles;
  }
  Comparator<File> comparator=new Comparator<File>(){
    public int compare(    File f1,    File f2){
      if (f1.lastModified() > f2.lastModified()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
;
  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);
  int round=0;
  while (toDeleteSize > 0) {
    LOG.debug("To delete size is {}, start a new round of deletion, round: {}",toDeleteSize,round);
    for (    File dir : dirs) {
      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){
        for (        Path path : stream) {
          File file=path.toFile();
          if (for_per_dir) {
            if (ACTIVE_LOG_PATTERN.matcher(file.getName()).matches()) {
              continue;
            }
          }
 else {
            if (active_dirs.contains(dir.getCanonicalPath())) {
              if (ACTIVE_LOG_PATTERN.matcher(file.getName()).matches()) {
                continue;
              }
            }
 else {
              if (META_LOG_PATTERN.matcher(file.getName()).matches()) {
                continue;
              }
            }
          }
          if (pq.size() < PQ_SIZE) {
            pq.offer(file);
          }
 else {
            if (file.lastModified() < pq.peek().lastModified()) {
              pq.poll();
              pq.offer(file);
            }
          }
        }
      }
     }
    Stack<File> stack=new Stack<File>();
    while (!pq.isEmpty()) {
      File file=pq.poll();
      stack.push(file);
    }
    while (!stack.isEmpty() && toDeleteSize > 0) {
      File file=stack.pop();
      toDeleteSize-=file.length();
      LOG.info("Delete file: {}, size: {}, lastModified: {}",file.getName(),file.length(),file.lastModified());
      file.delete();
      deletedFiles++;
    }
    pq.clear();
    round++;
    if (round >= MAX_ROUNDS) {
      if (for_per_dir) {
        LOG.warn("Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in " + "a single directory : {}, will delete the rest files in next interval.",MAX_ROUNDS,dirs.get(0).getCanonicalPath());
      }
 else {
        LOG.warn("Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, " + "will delete the rest files in next interval.",MAX_ROUNDS);
      }
      break;
    }
  }
  return deletedFiles;
}
