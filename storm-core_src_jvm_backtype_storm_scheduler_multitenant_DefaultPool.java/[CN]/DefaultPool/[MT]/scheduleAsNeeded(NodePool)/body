{
  for (  TopologyDetails td : _tds.values()) {
    String topId=td.getId();
    if (_cluster.needsScheduling(td)) {
      LOG.debug("Scheduling topology {}",topId);
      int totalTasks=td.getExecutors().size();
      int origRequest=td.getNumWorkers();
      int slotsRequested=Math.min(totalTasks,origRequest);
      int slotsUsed=Node.countSlotsUsed(topId,_nodes);
      int slotsFree=Node.countFreeSlotsAlive(_nodes);
      int slotsAvailable=0;
      if (slotsRequested > slotsFree) {
        slotsAvailable=NodePool.slotsAvailable(lesserPools);
      }
      int slotsToUse=Math.min(slotsRequested - slotsUsed,slotsFree + slotsAvailable);
      int executorsNotRunning=_cluster.getUnassignedExecutors(td).size();
      LOG.debug("Slots... requested {} used {} free {} available {} to be used {}, executors not running {}",slotsRequested,slotsUsed,slotsFree,slotsAvailable,slotsToUse,executorsNotRunning);
      if (slotsToUse <= 0) {
        if (executorsNotRunning > 0) {
          _cluster.setStatus(topId,"Not fully scheduled (No free slots in default pool) " + executorsNotRunning + " executors not scheduled");
        }
 else {
          if (slotsUsed < slotsRequested) {
            _cluster.setStatus(topId,"Running with fewer slots than requested (" + slotsUsed + "/"+ origRequest+ ")");
          }
 else {
            _cluster.setStatus(topId,"Fully Scheduled (requested " + origRequest + " slots, but could only use "+ slotsUsed+ ")");
          }
        }
        continue;
      }
      int slotsNeeded=slotsToUse - slotsFree;
      if (slotsNeeded > 0) {
        _nodes.addAll(NodePool.takeNodesBySlot(slotsNeeded,lesserPools));
      }
      if (executorsNotRunning <= 0) {
        for (        Node n : _nodes) {
          n.freeTopology(topId,_cluster);
        }
        slotsFree=Node.countFreeSlotsAlive(_nodes);
        slotsToUse=Math.min(slotsRequested,slotsFree);
      }
      RoundRobinSlotScheduler slotSched=new RoundRobinSlotScheduler(td,slotsToUse,_cluster);
      LinkedList<Node> nodes=new LinkedList<>(_nodes);
      while (true) {
        Node n;
        do {
          if (nodes.isEmpty()) {
            throw new IllegalStateException("This should not happen, we" + " messed up and did not get enough slots");
          }
          n=nodes.peekFirst();
          if (n.totalSlotsFree() == 0) {
            nodes.remove();
            n=null;
          }
        }
 while (n == null);
        if (!slotSched.assignSlotTo(n)) {
          break;
        }
      }
      int afterSchedSlotsUsed=Node.countSlotsUsed(topId,_nodes);
      if (afterSchedSlotsUsed < slotsRequested) {
        _cluster.setStatus(topId,"Running with fewer slots than requested (" + afterSchedSlotsUsed + "/"+ origRequest+ ")");
      }
 else       if (afterSchedSlotsUsed < origRequest) {
        _cluster.setStatus(topId,"Fully Scheduled (requested " + origRequest + " slots, but could only use "+ afterSchedSlotsUsed+ ")");
      }
 else {
        _cluster.setStatus(topId,"Fully Scheduled");
      }
    }
 else {
      _cluster.setStatus(topId,"Fully Scheduled");
    }
  }
}
