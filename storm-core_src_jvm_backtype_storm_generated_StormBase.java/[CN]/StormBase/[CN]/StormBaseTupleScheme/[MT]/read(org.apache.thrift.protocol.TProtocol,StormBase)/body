{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.name=iprot.readString();
  struct.set_name_isSet(true);
  struct.status=backtype.storm.generated.TopologyStatus.findByValue(iprot.readI32());
  struct.set_status_isSet(true);
  struct.num_workers=iprot.readI32();
  struct.set_num_workers_isSet(true);
  BitSet incoming=iprot.readBitSet(6);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map438=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.component_executors=new HashMap<String,Integer>(2 * _map438.size);
      String _key439;
      int _val440;
      for (int _i441=0; _i441 < _map438.size; ++_i441) {
        _key439=iprot.readString();
        _val440=iprot.readI32();
        struct.component_executors.put(_key439,_val440);
      }
    }
    struct.set_component_executors_isSet(true);
  }
  if (incoming.get(1)) {
    struct.launch_time_secs=iprot.readI32();
    struct.set_launch_time_secs_isSet(true);
  }
  if (incoming.get(2)) {
    struct.owner=iprot.readString();
    struct.set_owner_isSet(true);
  }
  if (incoming.get(3)) {
    struct.topology_action_options=new TopologyActionOptions();
    struct.topology_action_options.read(iprot);
    struct.set_topology_action_options_isSet(true);
  }
  if (incoming.get(4)) {
    struct.prev_status=backtype.storm.generated.TopologyStatus.findByValue(iprot.readI32());
    struct.set_prev_status_isSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TMap _map442=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.BOOL,iprot.readI32());
      struct.component_debug=new HashMap<String,Boolean>(2 * _map442.size);
      String _key443;
      boolean _val444;
      for (int _i445=0; _i445 < _map442.size; ++_i445) {
        _key443=iprot.readString();
        _val444=iprot.readBool();
        struct.component_debug.put(_key443,_val444);
      }
    }
    struct.set_component_debug_isSet(true);
  }
}
