{
  assertStoreHasExactly(store);
  LOG.info("Creating test");
  SettableBlobMeta metadata=new SettableBlobMeta(BlobStoreAclHandler.WORLD_EVERYTHING);
  AtomicOutputStream out=store.createBlob("test",metadata,null);
  out.write(1);
  out.close();
  assertStoreHasExactly(store,"test");
  assertTrue("ACL does not contain WORLD_EVERYTHING",metadata.toString().contains("AccessControl(type:OTHER, access:7)"));
  readAssertEquals(store,"test",1);
  LOG.info("Deleting test");
  store.deleteBlob("test",null);
  assertStoreHasExactly(store);
  metadata=new SettableBlobMeta(BlobStoreAclHandler.WORLD_EVERYTHING);
  LOG.info("Creating test again");
  out=store.createBlob("test",metadata,null);
  out.write(2);
  out.close();
  assertStoreHasExactly(store,"test");
  if (store instanceof LocalFsBlobStore) {
    assertTrue("ACL does not contain WORLD_EVERYTHING",metadata.toString().contains("AccessControl(type:OTHER, access:7)"));
  }
  readAssertEquals(store,"test",2);
  LOG.info("Updating test");
  out=store.updateBlob("test",null);
  out.write(3);
  out.close();
  assertStoreHasExactly(store,"test");
  readAssertEquals(store,"test",3);
  LOG.info("Updating test again");
  out=store.updateBlob("test",null);
  out.write(4);
  out.flush();
  LOG.info("SLEEPING");
  Thread.sleep(2);
  if (store instanceof LocalFsBlobStore) {
    metadata=new SettableBlobMeta(BlobStoreAclHandler.DEFAULT);
    LOG.info("Creating test for empty acls when security is off");
    out=store.createBlob("test-empty-acls",metadata,null);
    LOG.info("metadata {}",metadata);
    out.write(2);
    out.close();
    assertStoreHasExactly(store,"test-empty-acls","test");
    assertTrue("ACL does not contain WORLD_EVERYTHING",metadata.get_acl().toString().contains("OTHER"));
    LOG.info("Deleting test-empty-acls");
    store.deleteBlob("test-empty-acls",null);
  }
  if (store instanceof LocalFsBlobStore) {
    ((LocalFsBlobStore)store).fullCleanup(1);
  }
 else {
    fail("Error the blobstore is of unknowntype");
  }
  try {
    out.close();
  }
 catch (  IOException e) {
  }
}
