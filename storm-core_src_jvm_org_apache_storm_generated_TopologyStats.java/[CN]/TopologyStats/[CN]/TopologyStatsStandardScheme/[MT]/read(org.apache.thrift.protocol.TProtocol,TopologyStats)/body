{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map378=iprot.readMapBegin();
          struct.window_to_emitted=new HashMap<String,Long>(2 * _map378.size);
          String _key379;
          long _val380;
          for (int _i381=0; _i381 < _map378.size; ++_i381) {
            _key379=iprot.readString();
            _val380=iprot.readI64();
            struct.window_to_emitted.put(_key379,_val380);
          }
          iprot.readMapEnd();
        }
        struct.set_window_to_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map382=iprot.readMapBegin();
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map382.size);
      String _key383;
      long _val384;
      for (int _i385=0; _i385 < _map382.size; ++_i385) {
        _key383=iprot.readString();
        _val384=iprot.readI64();
        struct.window_to_transferred.put(_key383,_val384);
      }
      iprot.readMapEnd();
    }
    struct.set_window_to_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map386=iprot.readMapBegin();
  struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map386.size);
  String _key387;
  double _val388;
  for (int _i389=0; _i389 < _map386.size; ++_i389) {
    _key387=iprot.readString();
    _val388=iprot.readDouble();
    struct.window_to_complete_latencies_ms.put(_key387,_val388);
  }
  iprot.readMapEnd();
}
struct.set_window_to_complete_latencies_ms_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map390=iprot.readMapBegin();
struct.window_to_acked=new HashMap<String,Long>(2 * _map390.size);
String _key391;
long _val392;
for (int _i393=0; _i393 < _map390.size; ++_i393) {
_key391=iprot.readString();
_val392=iprot.readI64();
struct.window_to_acked.put(_key391,_val392);
}
iprot.readMapEnd();
}
struct.set_window_to_acked_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map394=iprot.readMapBegin();
struct.window_to_failed=new HashMap<String,Long>(2 * _map394.size);
String _key395;
long _val396;
for (int _i397=0; _i397 < _map394.size; ++_i397) {
_key395=iprot.readString();
_val396=iprot.readI64();
struct.window_to_failed.put(_key395,_val396);
}
iprot.readMapEnd();
}
struct.set_window_to_failed_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
