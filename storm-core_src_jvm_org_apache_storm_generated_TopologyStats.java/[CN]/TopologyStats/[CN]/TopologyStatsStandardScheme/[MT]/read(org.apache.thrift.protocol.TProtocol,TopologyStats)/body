{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map368=iprot.readMapBegin();
          struct.window_to_emitted=new HashMap<String,Long>(2 * _map368.size);
          String _key369;
          long _val370;
          for (int _i371=0; _i371 < _map368.size; ++_i371) {
            _key369=iprot.readString();
            _val370=iprot.readI64();
            struct.window_to_emitted.put(_key369,_val370);
          }
          iprot.readMapEnd();
        }
        struct.set_window_to_emitted_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map372=iprot.readMapBegin();
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map372.size);
      String _key373;
      long _val374;
      for (int _i375=0; _i375 < _map372.size; ++_i375) {
        _key373=iprot.readString();
        _val374=iprot.readI64();
        struct.window_to_transferred.put(_key373,_val374);
      }
      iprot.readMapEnd();
    }
    struct.set_window_to_transferred_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map376=iprot.readMapBegin();
  struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map376.size);
  String _key377;
  double _val378;
  for (int _i379=0; _i379 < _map376.size; ++_i379) {
    _key377=iprot.readString();
    _val378=iprot.readDouble();
    struct.window_to_complete_latencies_ms.put(_key377,_val378);
  }
  iprot.readMapEnd();
}
struct.set_window_to_complete_latencies_ms_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map380=iprot.readMapBegin();
struct.window_to_acked=new HashMap<String,Long>(2 * _map380.size);
String _key381;
long _val382;
for (int _i383=0; _i383 < _map380.size; ++_i383) {
_key381=iprot.readString();
_val382=iprot.readI64();
struct.window_to_acked.put(_key381,_val382);
}
iprot.readMapEnd();
}
struct.set_window_to_acked_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map384=iprot.readMapBegin();
struct.window_to_failed=new HashMap<String,Long>(2 * _map384.size);
String _key385;
long _val386;
for (int _i387=0; _i387 < _map384.size; ++_i387) {
_key385=iprot.readString();
_val386=iprot.readI64();
struct.window_to_failed.put(_key385,_val386);
}
iprot.readMapEnd();
}
struct.set_window_to_failed_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
