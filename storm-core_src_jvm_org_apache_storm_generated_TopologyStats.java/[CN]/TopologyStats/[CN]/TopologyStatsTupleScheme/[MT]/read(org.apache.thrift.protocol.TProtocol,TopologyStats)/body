{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map398=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_emitted=new HashMap<String,Long>(2 * _map398.size);
      String _key399;
      long _val400;
      for (int _i401=0; _i401 < _map398.size; ++_i401) {
        _key399=iprot.readString();
        _val400=iprot.readI64();
        struct.window_to_emitted.put(_key399,_val400);
      }
    }
    struct.set_window_to_emitted_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map402=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_transferred=new HashMap<String,Long>(2 * _map402.size);
      String _key403;
      long _val404;
      for (int _i405=0; _i405 < _map402.size; ++_i405) {
        _key403=iprot.readString();
        _val404=iprot.readI64();
        struct.window_to_transferred.put(_key403,_val404);
      }
    }
    struct.set_window_to_transferred_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map406=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.DOUBLE,iprot.readI32());
      struct.window_to_complete_latencies_ms=new HashMap<String,Double>(2 * _map406.size);
      String _key407;
      double _val408;
      for (int _i409=0; _i409 < _map406.size; ++_i409) {
        _key407=iprot.readString();
        _val408=iprot.readDouble();
        struct.window_to_complete_latencies_ms.put(_key407,_val408);
      }
    }
    struct.set_window_to_complete_latencies_ms_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map410=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_acked=new HashMap<String,Long>(2 * _map410.size);
      String _key411;
      long _val412;
      for (int _i413=0; _i413 < _map410.size; ++_i413) {
        _key411=iprot.readString();
        _val412=iprot.readI64();
        struct.window_to_acked.put(_key411,_val412);
      }
    }
    struct.set_window_to_acked_isSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map414=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.window_to_failed=new HashMap<String,Long>(2 * _map414.size);
      String _key415;
      long _val416;
      for (int _i417=0; _i417 < _map414.size; ++_i417) {
        _key415=iprot.readString();
        _val416=iprot.readI64();
        struct.window_to_failed.put(_key415,_val416);
      }
    }
    struct.set_window_to_failed_isSet(true);
  }
}
