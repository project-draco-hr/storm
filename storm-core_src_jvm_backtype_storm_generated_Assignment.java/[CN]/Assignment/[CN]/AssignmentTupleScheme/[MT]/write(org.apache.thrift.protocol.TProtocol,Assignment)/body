{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  oprot.writeString(struct.master_code_dir);
  BitSet optionals=new BitSet();
  if (struct.is_set_node_host()) {
    optionals.set(0);
  }
  if (struct.is_set_executor_node_port()) {
    optionals.set(1);
  }
  if (struct.is_set_executor_start_time_secs()) {
    optionals.set(2);
  }
  if (struct.is_set_worker_resources()) {
    optionals.set(3);
  }
  oprot.writeBitSet(optionals,4);
  if (struct.is_set_node_host()) {
{
      oprot.writeI32(struct.node_host.size());
      for (      Map.Entry<String,String> _iter552 : struct.node_host.entrySet()) {
        oprot.writeString(_iter552.getKey());
        oprot.writeString(_iter552.getValue());
      }
    }
  }
  if (struct.is_set_executor_node_port()) {
{
      oprot.writeI32(struct.executor_node_port.size());
      for (      Map.Entry<List<Long>,NodeInfo> _iter553 : struct.executor_node_port.entrySet()) {
{
          oprot.writeI32(_iter553.getKey().size());
          for (          long _iter554 : _iter553.getKey()) {
            oprot.writeI64(_iter554);
          }
        }
        _iter553.getValue().write(oprot);
      }
    }
  }
  if (struct.is_set_executor_start_time_secs()) {
{
      oprot.writeI32(struct.executor_start_time_secs.size());
      for (      Map.Entry<List<Long>,Long> _iter555 : struct.executor_start_time_secs.entrySet()) {
{
          oprot.writeI32(_iter555.getKey().size());
          for (          long _iter556 : _iter555.getKey()) {
            oprot.writeI64(_iter556);
          }
        }
        oprot.writeI64(_iter555.getValue());
      }
    }
  }
  if (struct.is_set_worker_resources()) {
{
      oprot.writeI32(struct.worker_resources.size());
      for (      Map.Entry<NodeInfo,WorkerResources> _iter557 : struct.worker_resources.entrySet()) {
        _iter557.getKey().write(oprot);
        _iter557.getValue().write(oprot);
      }
    }
  }
}
