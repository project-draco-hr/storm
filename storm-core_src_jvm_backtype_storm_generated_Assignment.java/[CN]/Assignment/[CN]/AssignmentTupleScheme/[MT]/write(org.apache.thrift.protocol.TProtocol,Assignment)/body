{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  oprot.writeString(struct.master_code_dir);
  BitSet optionals=new BitSet();
  if (struct.is_set_node_host()) {
    optionals.set(0);
  }
  if (struct.is_set_executor_node_port()) {
    optionals.set(1);
  }
  if (struct.is_set_executor_start_time_secs()) {
    optionals.set(2);
  }
  oprot.writeBitSet(optionals,3);
  if (struct.is_set_node_host()) {
{
      oprot.writeI32(struct.node_host.size());
      for (      Map.Entry<String,String> _iter509 : struct.node_host.entrySet()) {
        oprot.writeString(_iter509.getKey());
        oprot.writeString(_iter509.getValue());
      }
    }
  }
  if (struct.is_set_executor_node_port()) {
{
      oprot.writeI32(struct.executor_node_port.size());
      for (      Map.Entry<List<Long>,NodeInfo> _iter510 : struct.executor_node_port.entrySet()) {
{
          oprot.writeI32(_iter510.getKey().size());
          for (          long _iter511 : _iter510.getKey()) {
            oprot.writeI64(_iter511);
          }
        }
        _iter510.getValue().write(oprot);
      }
    }
  }
  if (struct.is_set_executor_start_time_secs()) {
{
      oprot.writeI32(struct.executor_start_time_secs.size());
      for (      Map.Entry<List<Long>,Long> _iter512 : struct.executor_start_time_secs.entrySet()) {
{
          oprot.writeI32(_iter512.getKey().size());
          for (          long _iter513 : _iter512.getKey()) {
            oprot.writeI64(_iter513);
          }
        }
        oprot.writeI64(_iter512.getValue());
      }
    }
  }
}
