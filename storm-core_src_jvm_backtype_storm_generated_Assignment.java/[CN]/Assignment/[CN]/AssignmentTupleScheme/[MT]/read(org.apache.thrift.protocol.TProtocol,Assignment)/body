{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.master_code_dir=iprot.readString();
  struct.set_master_code_dir_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map582=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.node_host=new HashMap<String,String>(2 * _map582.size);
      String _key583;
      String _val584;
      for (int _i585=0; _i585 < _map582.size; ++_i585) {
        _key583=iprot.readString();
        _val584=iprot.readString();
        struct.node_host.put(_key583,_val584);
      }
    }
    struct.set_node_host_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map586=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map586.size);
      List<Long> _key587;
      NodeInfo _val588;
      for (int _i589=0; _i589 < _map586.size; ++_i589) {
{
          org.apache.thrift.protocol.TList _list590=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key587=new ArrayList<Long>(_list590.size);
          long _elem591;
          for (int _i592=0; _i592 < _list590.size; ++_i592) {
            _elem591=iprot.readI64();
            _key587.add(_elem591);
          }
        }
        _val588=new NodeInfo();
        _val588.read(iprot);
        struct.executor_node_port.put(_key587,_val588);
      }
    }
    struct.set_executor_node_port_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map593=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map593.size);
      List<Long> _key594;
      long _val595;
      for (int _i596=0; _i596 < _map593.size; ++_i596) {
{
          org.apache.thrift.protocol.TList _list597=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key594=new ArrayList<Long>(_list597.size);
          long _elem598;
          for (int _i599=0; _i599 < _list597.size; ++_i599) {
            _elem598=iprot.readI64();
            _key594.add(_elem598);
          }
        }
        _val595=iprot.readI64();
        struct.executor_start_time_secs.put(_key594,_val595);
      }
    }
    struct.set_executor_start_time_secs_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map600=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map600.size);
      NodeInfo _key601;
      WorkerResources _val602;
      for (int _i603=0; _i603 < _map600.size; ++_i603) {
        _key601=new NodeInfo();
        _key601.read(iprot);
        _val602=new WorkerResources();
        _val602.read(iprot);
        struct.worker_resources.put(_key601,_val602);
      }
    }
    struct.set_worker_resources_isSet(true);
  }
}
