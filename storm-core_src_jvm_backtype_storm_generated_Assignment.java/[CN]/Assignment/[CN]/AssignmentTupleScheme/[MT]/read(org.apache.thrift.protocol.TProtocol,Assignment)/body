{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.master_code_dir=iprot.readString();
  struct.set_master_code_dir_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map558=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.node_host=new HashMap<String,String>(2 * _map558.size);
      String _key559;
      String _val560;
      for (int _i561=0; _i561 < _map558.size; ++_i561) {
        _key559=iprot.readString();
        _val560=iprot.readString();
        struct.node_host.put(_key559,_val560);
      }
    }
    struct.set_node_host_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map562=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map562.size);
      List<Long> _key563;
      NodeInfo _val564;
      for (int _i565=0; _i565 < _map562.size; ++_i565) {
{
          org.apache.thrift.protocol.TList _list566=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key563=new ArrayList<Long>(_list566.size);
          long _elem567;
          for (int _i568=0; _i568 < _list566.size; ++_i568) {
            _elem567=iprot.readI64();
            _key563.add(_elem567);
          }
        }
        _val564=new NodeInfo();
        _val564.read(iprot);
        struct.executor_node_port.put(_key563,_val564);
      }
    }
    struct.set_executor_node_port_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map569=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map569.size);
      List<Long> _key570;
      long _val571;
      for (int _i572=0; _i572 < _map569.size; ++_i572) {
{
          org.apache.thrift.protocol.TList _list573=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key570=new ArrayList<Long>(_list573.size);
          long _elem574;
          for (int _i575=0; _i575 < _list573.size; ++_i575) {
            _elem574=iprot.readI64();
            _key570.add(_elem574);
          }
        }
        _val571=iprot.readI64();
        struct.executor_start_time_secs.put(_key570,_val571);
      }
    }
    struct.set_executor_start_time_secs_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map576=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map576.size);
      NodeInfo _key577;
      WorkerResources _val578;
      for (int _i579=0; _i579 < _map576.size; ++_i579) {
        _key577=new NodeInfo();
        _key577.read(iprot);
        _val578=new WorkerResources();
        _val578.read(iprot);
        struct.worker_resources.put(_key577,_val578);
      }
    }
    struct.set_worker_resources_isSet(true);
  }
}
