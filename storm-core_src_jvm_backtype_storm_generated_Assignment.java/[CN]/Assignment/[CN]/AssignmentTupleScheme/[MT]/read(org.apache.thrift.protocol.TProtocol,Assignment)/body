{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.master_code_dir=iprot.readString();
  struct.set_master_code_dir_isSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map566=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.node_host=new HashMap<String,String>(2 * _map566.size);
      String _key567;
      String _val568;
      for (int _i569=0; _i569 < _map566.size; ++_i569) {
        _key567=iprot.readString();
        _val568=iprot.readString();
        struct.node_host.put(_key567,_val568);
      }
    }
    struct.set_node_host_isSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map570=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map570.size);
      List<Long> _key571;
      NodeInfo _val572;
      for (int _i573=0; _i573 < _map570.size; ++_i573) {
{
          org.apache.thrift.protocol.TList _list574=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key571=new ArrayList<Long>(_list574.size);
          long _elem575;
          for (int _i576=0; _i576 < _list574.size; ++_i576) {
            _elem575=iprot.readI64();
            _key571.add(_elem575);
          }
        }
        _val572=new NodeInfo();
        _val572.read(iprot);
        struct.executor_node_port.put(_key571,_val572);
      }
    }
    struct.set_executor_node_port_isSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map577=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST,org.apache.thrift.protocol.TType.I64,iprot.readI32());
      struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map577.size);
      List<Long> _key578;
      long _val579;
      for (int _i580=0; _i580 < _map577.size; ++_i580) {
{
          org.apache.thrift.protocol.TList _list581=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,iprot.readI32());
          _key578=new ArrayList<Long>(_list581.size);
          long _elem582;
          for (int _i583=0; _i583 < _list581.size; ++_i583) {
            _elem582=iprot.readI64();
            _key578.add(_elem582);
          }
        }
        _val579=iprot.readI64();
        struct.executor_start_time_secs.put(_key578,_val579);
      }
    }
    struct.set_executor_start_time_secs_isSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map584=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map584.size);
      NodeInfo _key585;
      WorkerResources _val586;
      for (int _i587=0; _i587 < _map584.size; ++_i587) {
        _key585=new NodeInfo();
        _key585.read(iprot);
        _val586=new WorkerResources();
        _val586.read(iprot);
        struct.worker_resources.put(_key585,_val586);
      }
    }
    struct.set_worker_resources_isSet(true);
  }
}
