{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.master_code_dir=iprot.readString();
        struct.set_master_code_dir_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map524=iprot.readMapBegin();
      struct.node_host=new HashMap<String,String>(2 * _map524.size);
      String _key525;
      String _val526;
      for (int _i527=0; _i527 < _map524.size; ++_i527) {
        _key525=iprot.readString();
        _val526=iprot.readString();
        struct.node_host.put(_key525,_val526);
      }
      iprot.readMapEnd();
    }
    struct.set_node_host_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map528=iprot.readMapBegin();
  struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map528.size);
  List<Long> _key529;
  NodeInfo _val530;
  for (int _i531=0; _i531 < _map528.size; ++_i531) {
{
      org.apache.thrift.protocol.TList _list532=iprot.readListBegin();
      _key529=new ArrayList<Long>(_list532.size);
      long _elem533;
      for (int _i534=0; _i534 < _list532.size; ++_i534) {
        _elem533=iprot.readI64();
        _key529.add(_elem533);
      }
      iprot.readListEnd();
    }
    _val530=new NodeInfo();
    _val530.read(iprot);
    struct.executor_node_port.put(_key529,_val530);
  }
  iprot.readMapEnd();
}
struct.set_executor_node_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map535=iprot.readMapBegin();
struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map535.size);
List<Long> _key536;
long _val537;
for (int _i538=0; _i538 < _map535.size; ++_i538) {
{
  org.apache.thrift.protocol.TList _list539=iprot.readListBegin();
  _key536=new ArrayList<Long>(_list539.size);
  long _elem540;
  for (int _i541=0; _i541 < _list539.size; ++_i541) {
    _elem540=iprot.readI64();
    _key536.add(_elem540);
  }
  iprot.readListEnd();
}
_val537=iprot.readI64();
struct.executor_start_time_secs.put(_key536,_val537);
}
iprot.readMapEnd();
}
struct.set_executor_start_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map542=iprot.readMapBegin();
struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map542.size);
NodeInfo _key543;
WorkerResources _val544;
for (int _i545=0; _i545 < _map542.size; ++_i545) {
_key543=new NodeInfo();
_key543.read(iprot);
_val544=new WorkerResources();
_val544.read(iprot);
struct.worker_resources.put(_key543,_val544);
}
iprot.readMapEnd();
}
struct.set_worker_resources_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
