{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.master_code_dir=iprot.readString();
        struct.set_master_code_dir_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map380=iprot.readMapBegin();
      struct.node_host=new HashMap<String,String>(2 * _map380.size);
      String _key381;
      String _val382;
      for (int _i383=0; _i383 < _map380.size; ++_i383) {
        _key381=iprot.readString();
        _val382=iprot.readString();
        struct.node_host.put(_key381,_val382);
      }
      iprot.readMapEnd();
    }
    struct.set_node_host_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map384=iprot.readMapBegin();
  struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map384.size);
  List<Long> _key385;
  NodeInfo _val386;
  for (int _i387=0; _i387 < _map384.size; ++_i387) {
{
      org.apache.thrift.protocol.TList _list388=iprot.readListBegin();
      _key385=new ArrayList<Long>(_list388.size);
      long _elem389;
      for (int _i390=0; _i390 < _list388.size; ++_i390) {
        _elem389=iprot.readI64();
        _key385.add(_elem389);
      }
      iprot.readListEnd();
    }
    _val386=new NodeInfo();
    _val386.read(iprot);
    struct.executor_node_port.put(_key385,_val386);
  }
  iprot.readMapEnd();
}
struct.set_executor_node_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map391=iprot.readMapBegin();
struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map391.size);
List<Long> _key392;
long _val393;
for (int _i394=0; _i394 < _map391.size; ++_i394) {
{
  org.apache.thrift.protocol.TList _list395=iprot.readListBegin();
  _key392=new ArrayList<Long>(_list395.size);
  long _elem396;
  for (int _i397=0; _i397 < _list395.size; ++_i397) {
    _elem396=iprot.readI64();
    _key392.add(_elem396);
  }
  iprot.readListEnd();
}
_val393=iprot.readI64();
struct.executor_start_time_secs.put(_key392,_val393);
}
iprot.readMapEnd();
}
struct.set_executor_start_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
