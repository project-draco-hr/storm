{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.master_code_dir=iprot.readString();
        struct.set_master_code_dir_isSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map532=iprot.readMapBegin();
      struct.node_host=new HashMap<String,String>(2 * _map532.size);
      String _key533;
      String _val534;
      for (int _i535=0; _i535 < _map532.size; ++_i535) {
        _key533=iprot.readString();
        _val534=iprot.readString();
        struct.node_host.put(_key533,_val534);
      }
      iprot.readMapEnd();
    }
    struct.set_node_host_isSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map536=iprot.readMapBegin();
  struct.executor_node_port=new HashMap<List<Long>,NodeInfo>(2 * _map536.size);
  List<Long> _key537;
  NodeInfo _val538;
  for (int _i539=0; _i539 < _map536.size; ++_i539) {
{
      org.apache.thrift.protocol.TList _list540=iprot.readListBegin();
      _key537=new ArrayList<Long>(_list540.size);
      long _elem541;
      for (int _i542=0; _i542 < _list540.size; ++_i542) {
        _elem541=iprot.readI64();
        _key537.add(_elem541);
      }
      iprot.readListEnd();
    }
    _val538=new NodeInfo();
    _val538.read(iprot);
    struct.executor_node_port.put(_key537,_val538);
  }
  iprot.readMapEnd();
}
struct.set_executor_node_port_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map543=iprot.readMapBegin();
struct.executor_start_time_secs=new HashMap<List<Long>,Long>(2 * _map543.size);
List<Long> _key544;
long _val545;
for (int _i546=0; _i546 < _map543.size; ++_i546) {
{
  org.apache.thrift.protocol.TList _list547=iprot.readListBegin();
  _key544=new ArrayList<Long>(_list547.size);
  long _elem548;
  for (int _i549=0; _i549 < _list547.size; ++_i549) {
    _elem548=iprot.readI64();
    _key544.add(_elem548);
  }
  iprot.readListEnd();
}
_val545=iprot.readI64();
struct.executor_start_time_secs.put(_key544,_val545);
}
iprot.readMapEnd();
}
struct.set_executor_start_time_secs_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map550=iprot.readMapBegin();
struct.worker_resources=new HashMap<NodeInfo,WorkerResources>(2 * _map550.size);
NodeInfo _key551;
WorkerResources _val552;
for (int _i553=0; _i553 < _map550.size; ++_i553) {
_key551=new NodeInfo();
_key551.read(iprot);
_val552=new WorkerResources();
_val552.read(iprot);
struct.worker_resources.put(_key551,_val552);
}
iprot.readMapEnd();
}
struct.set_worker_resources_isSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
