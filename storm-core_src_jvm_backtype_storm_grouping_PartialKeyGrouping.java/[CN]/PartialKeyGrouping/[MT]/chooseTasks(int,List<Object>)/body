{
  List<Integer> boltIds=new ArrayList<>(1);
  if (values.size() > 0) {
    byte[] raw;
    if (fields != null) {
      List<Object> selectedFields=outFields.select(fields,values);
      ByteBuffer out=ByteBuffer.allocate(selectedFields.size() * 4);
      for (      Object o : selectedFields) {
        if (o instanceof List) {
          out.putInt(Arrays.deepHashCode(((List)o).toArray()));
        }
 else         if (o instanceof Object[]) {
          out.putInt(Arrays.deepHashCode((Object[])o));
        }
 else         if (o instanceof byte[]) {
          out.putInt(Arrays.hashCode((byte[])o));
        }
 else         if (o instanceof short[]) {
          out.putInt(Arrays.hashCode((short[])o));
        }
 else         if (o instanceof int[]) {
          out.putInt(Arrays.hashCode((int[])o));
        }
 else         if (o instanceof long[]) {
          out.putInt(Arrays.hashCode((long[])o));
        }
 else         if (o instanceof char[]) {
          out.putInt(Arrays.hashCode((char[])o));
        }
 else         if (o instanceof float[]) {
          out.putInt(Arrays.hashCode((float[])o));
        }
 else         if (o instanceof double[]) {
          out.putInt(Arrays.hashCode((double[])o));
        }
 else         if (o instanceof boolean[]) {
          out.putInt(Arrays.hashCode((boolean[])o));
        }
 else         if (o != null) {
          out.putInt(o.hashCode());
        }
 else {
          out.putInt(0);
        }
      }
      raw=out.array();
    }
 else {
      raw=values.get(0).toString().getBytes();
    }
    int firstChoice=(int)(Math.abs(h1.hashBytes(raw).asLong()) % this.targetTasks.size());
    int secondChoice=(int)(Math.abs(h2.hashBytes(raw).asLong()) % this.targetTasks.size());
    int selected=targetTaskStats[firstChoice] > targetTaskStats[secondChoice] ? secondChoice : firstChoice;
    boltIds.add(targetTasks.get(selected));
    targetTaskStats[selected]++;
  }
  return boltIds;
}
