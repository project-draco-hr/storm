{
  Time.startSimulatingAutoAdvanceOnSleep(1010);
  try {
    int port=8080;
    String cTopoId="CURRENT";
    List<ExecutorInfo> cExecList=mkExecutorInfoList(1,2,3,4,5);
    LocalAssignment cAssignment=mkLocalAssignment(cTopoId,cExecList,mkWorkerResources(100.0,100.0,100.0));
    Container cContainer=mock(Container.class);
    LSWorkerHeartbeat chb=mkWorkerHB(cTopoId,port,cExecList,Time.currentTimeSecs());
    when(cContainer.readHeartbeat()).thenReturn(chb);
    when(cContainer.areAllProcessesDead()).thenReturn(false,true);
    String nTopoId="NEW";
    List<ExecutorInfo> nExecList=mkExecutorInfoList(1,2,3,4,5);
    LocalAssignment nAssignment=mkLocalAssignment(nTopoId,nExecList,mkWorkerResources(100.0,100.0,100.0));
    ILocalizer localizer=mock(ILocalizer.class);
    Container nContainer=mock(Container.class);
    LocalState state=mock(LocalState.class);
    ContainerLauncher containerLauncher=mock(ContainerLauncher.class);
    when(containerLauncher.launchContainer(port,nAssignment,state)).thenReturn(nContainer);
    LSWorkerHeartbeat nhb=mkWorkerHB(nTopoId,100,nExecList,Time.currentTimeSecs());
    when(nContainer.readHeartbeat()).thenReturn(nhb,nhb);
    @SuppressWarnings("unchecked") Future<Void> baseFuture=mock(Future.class);
    when(localizer.requestDownloadBaseTopologyBlobs(nAssignment,port)).thenReturn(baseFuture);
    @SuppressWarnings("unchecked") Future<Void> blobFuture=mock(Future.class);
    when(localizer.requestDownloadTopologyBlobs(nAssignment,port)).thenReturn(blobFuture);
    ISupervisor iSuper=mock(ISupervisor.class);
    StaticState staticState=new StaticState(localizer,5000,120000,1000,1000,containerLauncher,"localhost",port,iSuper,state);
    DynamicState dynamicState=new DynamicState(cAssignment,cContainer,nAssignment);
    DynamicState nextState=Slot.stateMachineStep(dynamicState,staticState);
    assertEquals(MachineState.KILL,nextState.state);
    verify(cContainer).kill();
    verify(localizer).requestDownloadBaseTopologyBlobs(nAssignment,port);
    assertSame("pendingDownload not set properly",baseFuture,nextState.pendingDownload);
    assertEquals(nAssignment,nextState.pendingLocalization);
    assertTrue(Time.currentTimeMillis() > 1000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.KILL,nextState.state);
    verify(cContainer).forceKill();
    assertSame("pendingDownload not set properly",baseFuture,nextState.pendingDownload);
    assertEquals(nAssignment,nextState.pendingLocalization);
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.WAITING_FOR_BASIC_LOCALIZATION,nextState.state);
    verify(cContainer).cleanUp();
    verify(localizer).releaseSlotFor(cAssignment,port);
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.WAITING_FOR_BLOB_LOCALIZATION,nextState.state);
    verify(baseFuture).get(1000,TimeUnit.MILLISECONDS);
    verify(localizer).requestDownloadTopologyBlobs(nAssignment,port);
    assertSame("pendingDownload not set properly",blobFuture,nextState.pendingDownload);
    assertEquals(nAssignment,nextState.pendingLocalization);
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    verify(blobFuture).get(1000,TimeUnit.MILLISECONDS);
    verify(containerLauncher).launchContainer(port,nAssignment,state);
    assertEquals(MachineState.WAITING_FOR_WORKER_START,nextState.state);
    assertSame("pendingDownload is not null",null,nextState.pendingDownload);
    assertSame(null,nextState.pendingLocalization);
    assertSame(nAssignment,nextState.currentAssignment);
    assertSame(nContainer,nextState.container);
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.RUNNING,nextState.state);
    assertSame("pendingDownload is not null",null,nextState.pendingDownload);
    assertSame(null,nextState.pendingLocalization);
    assertSame(nAssignment,nextState.currentAssignment);
    assertSame(nContainer,nextState.container);
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.RUNNING,nextState.state);
    assertSame("pendingDownload is not null",null,nextState.pendingDownload);
    assertSame(null,nextState.pendingLocalization);
    assertSame(nAssignment,nextState.currentAssignment);
    assertSame(nContainer,nextState.container);
    assertTrue(Time.currentTimeMillis() > 3000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.RUNNING,nextState.state);
    assertSame("pendingDownload is not null",null,nextState.pendingDownload);
    assertSame(null,nextState.pendingLocalization);
    assertSame(nAssignment,nextState.currentAssignment);
    assertSame(nContainer,nextState.container);
    assertTrue(Time.currentTimeMillis() > 4000);
  }
  finally {
    Time.stopSimulating();
  }
}
