{
  Time.startSimulatingAutoAdvanceOnSleep(1010);
  try {
    int port=8080;
    String topoId="CURRENT";
    List<ExecutorInfo> execList=mkExecutorInfoList(1,2,3,4,5);
    LocalAssignment assignment=mkLocalAssignment(topoId,execList,mkWorkerResources(100.0,100.0,100.0));
    ILocalizer localizer=mock(ILocalizer.class);
    Container container=mock(Container.class);
    ContainerLauncher containerLauncher=mock(ContainerLauncher.class);
    LSWorkerHeartbeat oldhb=mkWorkerHB(topoId,port,execList,Time.currentTimeSecs() - 10);
    LSWorkerHeartbeat goodhb=mkWorkerHB(topoId,port,execList,Time.currentTimeSecs());
    when(container.readHeartbeat()).thenReturn(oldhb,oldhb,goodhb,goodhb);
    when(container.areAllProcessesDead()).thenReturn(false,true);
    ISupervisor iSuper=mock(ISupervisor.class);
    LocalState state=mock(LocalState.class);
    StaticState staticState=new StaticState(localizer,5000,120000,1000,1000,containerLauncher,"localhost",port,iSuper,state);
    DynamicState dynamicState=new DynamicState(assignment,container,assignment);
    DynamicState nextState=Slot.stateMachineStep(dynamicState,staticState);
    assertEquals(MachineState.KILL_AND_RELAUNCH,nextState.state);
    verify(container).kill();
    assertTrue(Time.currentTimeMillis() > 1000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.KILL_AND_RELAUNCH,nextState.state);
    verify(container).forceKill();
    assertTrue(Time.currentTimeMillis() > 2000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.WAITING_FOR_WORKER_START,nextState.state);
    verify(container).relaunch();
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.WAITING_FOR_WORKER_START,nextState.state);
    assertTrue(Time.currentTimeMillis() > 3000);
    nextState=Slot.stateMachineStep(nextState,staticState);
    assertEquals(MachineState.RUNNING,nextState.state);
  }
  finally {
    Time.stopSimulating();
  }
}
